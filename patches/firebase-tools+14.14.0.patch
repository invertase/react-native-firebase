diff --git a/node_modules/firebase-tools/lib/emulator/auth/operations.js b/node_modules/firebase-tools/lib/emulator/auth/operations.js
index 2104c80..c42d2f5 100644
--- a/node_modules/firebase-tools/lib/emulator/auth/operations.js
+++ b/node_modules/firebase-tools/lib/emulator/auth/operations.js
@@ -721,6 +721,7 @@ function sendVerificationCode(state, reqBody) {
     (0, errors_1.assert)(state instanceof state_1.AgentProjectState, "UNSUPPORTED_TENANT_OPERATION");
     (0, errors_1.assert)(reqBody.phoneNumber && (0, utils_1.isValidPhoneNumber)(reqBody.phoneNumber), "INVALID_PHONE_NUMBER : Invalid format.");
     const user = state.getUserByPhoneNumber(reqBody.phoneNumber);
+    console.log('getting user by ' + reqBody.phoneNumber + ', got ' + JSON.stringify(user));
     (0, errors_1.assert)(!((_a = user === null || user === void 0 ? void 0 : user.mfaInfo) === null || _a === void 0 ? void 0 : _a.length), "UNSUPPORTED_FIRST_FACTOR : A phone number cannot be set as a first factor on an SMS based MFA user.");
     const { sessionInfo, phoneNumber, code } = state.createVerificationCode(reqBody.phoneNumber);
     emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.AUTH).log("BULLET", `To verify the phone number ${phoneNumber}, use the code ${code}.`);
@@ -1485,6 +1486,7 @@ function mfaSignInStart(state, reqBody) {
     (0, errors_1.assert)(reqBody.mfaPendingCredential, "MISSING_MFA_PENDING_CREDENTIAL : Request does not have MFA pending credential.");
     (0, errors_1.assert)(reqBody.mfaEnrollmentId, "MISSING_MFA_ENROLLMENT_ID : No second factor identifier is provided.");
     const { user } = parsePendingCredential(state, reqBody.mfaPendingCredential);
+    console.log('in mfaSignInStart?')
     const enrollment = (_b = user.mfaInfo) === null || _b === void 0 ? void 0 : _b.find((factor) => factor.mfaEnrollmentId === reqBody.mfaEnrollmentId);
     (0, errors_1.assert)(enrollment, "MFA_ENROLLMENT_NOT_FOUND");
     const phoneNumber = enrollment.unobfuscatedPhoneInfo;
@@ -1511,8 +1513,9 @@ async function mfaSignInFinalize(state, reqBody) {
     (0, errors_1.assert)(code, "MISSING_CODE");
     (0, errors_1.assert)(sessionInfo, "MISSING_SESSION_INFO");
     const phoneNumber = verifyPhoneNumber(state, sessionInfo, code);
+    console.error('phoneNumber is ' + phoneNumber);
     let { user, signInProvider } = parsePendingCredential(state, reqBody.mfaPendingCredential);
-    const enrollment = (_b = user.mfaInfo) === null || _b === void 0 ? void 0 : _b.find((enrollment) => enrollment.unobfuscatedPhoneInfo === phoneNumber);
+    const enrollment = (_b = user.mfaInfo) === null || _b === void 0 ? void 0 : _b.find((enrollment) => { console.log('searching, enrollment is ' + JSON.stringify(enrollment)); return enrollment.unobfuscatedPhoneInfo === phoneNumber || ('+********' + enrollment.unobfuscatedPhoneInfo.substring(enrollment.unobfuscatedPhoneInfo.length - 4)) === phoneNumber; });
     const { updates, extraClaims } = await fetchBlockingFunction(state, state_1.BlockingFunctionEvents.BEFORE_SIGN_IN, user, { signInMethod: signInProvider, signInSecondFactor: "phone" });
     user = state.updateUserByLocalId(user.localId, Object.assign(Object.assign({}, updates), { lastLoginAt: Date.now().toString() }));
     (0, errors_1.assert)(enrollment && enrollment.mfaEnrollmentId, "MFA_ENROLLMENT_NOT_FOUND");
@@ -1657,6 +1660,7 @@ function verifyPhoneNumber(state, sessionInfo, code) {
     (0, errors_1.assert)(verification, "INVALID_SESSION_INFO");
     (0, errors_1.assert)(verification.code === code, "INVALID_CODE");
     state.deleteVerificationCodeBySessionInfo(sessionInfo);
+    console.log('verifyPhoneNumber verification is ' + JSON.stringify(verification));
     return verification.phoneNumber;
 }
 const CUSTOM_ATTRIBUTES_MAX_LENGTH = 1000;
diff --git a/node_modules/firebase-tools/lib/emulator/auth/state.js b/node_modules/firebase-tools/lib/emulator/auth/state.js
index 204ead8..99425c7 100644
--- a/node_modules/firebase-tools/lib/emulator/auth/state.js
+++ b/node_modules/firebase-tools/lib/emulator/auth/state.js
@@ -328,10 +328,12 @@ class ProjectState {
             phoneNumber,
             sessionInfo,
         };
+        console.log('creating verification code for ' + phoneNumber + ': ' + JSON.stringify(verification));
         this.verificationCodes.set(sessionInfo, verification);
         return verification;
     }
     getVerificationCodeBySessionInfo(sessionInfo) {
+        console.log('getVerificationCodesBySessionInfo returning ' + JSON.stringify(this.verificationCodes.get(sessionInfo)));
         return this.verificationCodes.get(sessionInfo);
     }
     deleteVerificationCodeBySessionInfo(sessionInfo) {
