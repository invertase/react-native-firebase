{
	"id": 0,
	"name": "@react-native-firebase/analytics",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 40,
			"name": "\"@react-native-firebase/analytics\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 43,
					"name": "AnalyticsDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 232,
							"character": 30
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 3
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 2
							}
						]
					}
				},
				{
					"id": 41,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 222,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 42,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "```js\nimport { firebase } from '@react-native-firebase/analytics';\nfirebase.analytics().logEvent(...);\n```"
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 230,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						43,
						41,
						42
					]
				}
			],
			"sources": [
				{
					"fileName": "analytics/lib/index.d.ts",
					"line": 219,
					"character": 49
				}
			]
		},
		{
			"id": 50,
			"name": "\"@react-native-firebase/app\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"tags": [
					{
						"tag": "firebase",
						"text": "firebase\n"
					}
				]
			},
			"children": [
				{
					"id": 51,
					"name": "ReactNativeFirebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 25,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						51
					]
				}
			],
			"sources": [
				{
					"fileName": "app/lib/index.d.ts",
					"line": 23,
					"character": 43
				}
			]
		},
		{
			"id": 44,
			"name": "\"@react-native-firebase/app-types\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "Attach namespace to `firebase.` and `FirebaseApp.`."
			},
			"children": [
				{
					"id": 47,
					"name": "FirebaseApp",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 48,
							"name": "analytics",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 49,
									"name": "analytics",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 252,
									"character": 13
								}
							]
						},
						{
							"id": 338,
							"name": "auth",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 339,
									"name": "auth",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Auth"
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 247
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1606,
									"character": 8
								}
							]
						},
						{
							"id": 392,
							"name": "config",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 393,
									"name": "config",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Firebase Remote Config is a cloud service that lets you change the behavior and appearance of your\napp without requiring users to download an app update. When using Remote Config, you create in-app default\nvalues that control the behavior and appearance of your app."
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 357
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 395,
									"character": 10
								}
							]
						},
						{
							"id": 434,
							"name": "crashlytics",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 435,
									"name": "crashlytics",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Firebase Crashlytics helps you track, prioritize, and fix stability issues that erode app quality, in realtime.\nSpend less time triaging and troubleshooting crashes and more time building app features that delight users."
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 396
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 276,
									"character": 15
								}
							]
						},
						{
							"id": 453,
							"name": "fiam",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 454,
									"name": "fiam",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Firebase In-App Messaging helps you engage users who are actively using your app by sending\nthem targeted and contextual messages that nudge them to complete key in-app actions - like\nbeating a game level, buying an item, or subscribing to content."
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 438
									}
								}
							],
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 181,
									"character": 8
								}
							]
						},
						{
							"id": 464,
							"name": "firestore",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 465,
									"name": "firestore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Firestore"
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 457
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 135,
									"character": 13
								}
							]
						},
						{
							"id": 513,
							"name": "functions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 514,
									"name": "functions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The Cloud Functions for Firebase client SDKs let you call functions\ndirectly from a Firebase app. To call a function from your app in this way,\nwrite and deploy an HTTPS Callable function in Cloud Functions,\nand then add client logic to call the function from your app."
									},
									"parameters": [
										{
											"id": 515,
											"name": "region",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The region you deployed your functions to. Defaults to 'us-central1'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 499
									}
								}
							],
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 393,
									"character": 13
								}
							]
						},
						{
							"id": 537,
							"name": "iid",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 538,
									"name": "iid",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Firebase Instance ID provides a unique identifier for each instance of your app and a mechanism to authenticate\nand authorize actions for it (for example: sending FCM messages).",
										"text": "An Instance ID is long lived except when you call delete, the app is restored on a new device, the user\nuninstalls/reinstall the app or the user clears the app data (clearing data applies to Android only).\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 518
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 187,
									"character": 7
								}
							]
						},
						{
							"id": 604,
							"name": "invites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 605,
									"name": "invites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "<b>Firebase Invites is deprecated</b>. You can create cross-platform invitation links that survive app installation using Firebase Dynamic Links instead.\nFirebase Invites are an out-of-the-box solution for app referrals and sharing via email or SMS.\nTo customize the invitation user experience, or to generate links programmatically, use Firebase Dynamic Links."
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 581
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 455,
									"character": 11
								}
							]
						},
						{
							"id": 615,
							"name": "mlkit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 616,
									"name": "mlkit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Mlkit"
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 608
									}
								}
							],
							"sources": [
								{
									"fileName": "mlkit/lib/index.d.ts",
									"line": 127,
									"character": 9
								}
							]
						},
						{
							"id": 704,
							"name": "perf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 705,
									"name": "perf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Perf"
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 682
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 484,
									"character": 8
								}
							]
						},
						{
							"id": 880,
							"name": "storage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 881,
									"name": "storage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 882,
											"name": "bucket",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 855
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1138,
									"character": 11
								}
							]
						},
						{
							"id": 56,
							"name": "utils",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"signatures": [
								{
									"id": 57,
									"name": "utils",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 58,
											"name": "app",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FirebaseApp",
												"id": 47
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseUtilsModule"
									}
								},
								{
									"id": 892,
									"name": "utils",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Utils"
									},
									"type": {
										"type": "reference",
										"name": "Module",
										"id": 885
									}
								}
							],
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 37,
									"character": 9
								},
								{
									"fileName": "utils/lib/index.d.ts",
									"line": 134,
									"character": 9
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								48,
								338,
								392,
								434,
								453,
								464,
								513,
								537,
								604,
								615,
								704,
								880,
								56
							]
						}
					],
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 251,
							"character": 23
						},
						{
							"fileName": "app/lib/index.d.ts",
							"line": 36,
							"character": 23
						},
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1602,
							"character": 23
						},
						{
							"fileName": "config/lib/index.d.ts",
							"line": 389,
							"character": 23
						},
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 271,
							"character": 23
						},
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 175,
							"character": 23
						},
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 131,
							"character": 23
						},
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 384,
							"character": 23
						},
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 178,
							"character": 23
						},
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 448,
							"character": 23
						},
						{
							"fileName": "mlkit/lib/index.d.ts",
							"line": 123,
							"character": 23
						},
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 480,
							"character": 23
						},
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1137,
							"character": 23
						},
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 130,
							"character": 23
						}
					]
				},
				{
					"id": 45,
					"name": "ReactNativeFirebaseNamespace",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 46,
							"name": "analytics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 245,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 3
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 2
									}
								]
							}
						},
						{
							"id": 337,
							"name": "auth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Auth"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1599,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 247
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 90
									}
								]
							}
						},
						{
							"id": 391,
							"name": "config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Firebase Remote Config is a cloud service that lets you change the behavior and appearance of your\napp without requiring users to download an app update. When using Remote Config, you create in-app default\nvalues that control the behavior and appearance of your app."
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 386,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 357
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 341
									}
								]
							}
						},
						{
							"id": 433,
							"name": "crashlytics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Firebase Crashlytics helps you track, prioritize, and fix stability issues that erode app quality, in realtime.\nSpend less time triaging and troubleshooting crashes and more time building app features that delight users."
							},
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 268,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 396
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 395
									}
								]
							}
						},
						{
							"id": 452,
							"name": "fiam",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Firebase In-App Messaging helps you engage users who are actively using your app by sending\nthem targeted and contextual messages that nudge them to complete key in-app actions - like\nbeating a game level, buying an item, or subscribing to content."
							},
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 172,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 438
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 437
									}
								]
							}
						},
						{
							"id": 463,
							"name": "firestore",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Firestore"
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 125,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 457
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 456
									}
								]
							}
						},
						{
							"id": 512,
							"name": "functions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The Cloud Functions for Firebase client SDKs let you call functions\ndirectly from a Firebase app. To call a function from your app in this way,\nwrite and deploy an HTTPS Callable function in Cloud Functions,\nand then add client logic to call the function from your app."
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 381,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStaticsWithApp",
								"id": 965,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 499
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 497
									}
								]
							}
						},
						{
							"id": 536,
							"name": "iid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Firebase Instance ID provides a unique identifier for each instance of your app and a mechanism to authenticate\nand authorize actions for it (for example: sending FCM messages).",
								"text": "An Instance ID is long lived except when you call delete, the app is restored on a new device, the user\nuninstalls/reinstall the app or the user clears the app data (clearing data applies to Android only).\n"
							},
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 175,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStaticsWithApp",
								"id": 965,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 518
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 517
									}
								]
							}
						},
						{
							"id": 603,
							"name": "invites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "<b>Firebase Invites is deprecated</b>. You can create cross-platform invitation links that survive app installation using Firebase Dynamic Links instead.\nFirebase Invites are an out-of-the-box solution for app referrals and sharing via email or SMS.\nTo customize the invitation user experience, or to generate links programmatically, use Firebase Dynamic Links."
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 445,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 581
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 540
									}
								]
							}
						},
						{
							"id": 614,
							"name": "mlkit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Mlkit"
							},
							"sources": [
								{
									"fileName": "mlkit/lib/index.d.ts",
									"line": 117,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 608
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 607
									}
								]
							}
						},
						{
							"id": 703,
							"name": "perf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Get insights into how your app performs from your users’ point of view, with automatic and customized performance tracing."
							},
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 477,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 682
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 681
									}
								]
							}
						},
						{
							"id": 879,
							"name": "storage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1134,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 855
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 730
									}
								]
							}
						},
						{
							"id": 52,
							"name": "utils",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Utils provides a collection of utilities to aid in using Firebase\nand related services inside React Native, e.g. Test Lab helpers\nand Google Play Services version helpers."
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 31,
									"character": 9
								},
								{
									"fileName": "utils/lib/index.d.ts",
									"line": 124,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "ReactNativeFirebaseModuleAndStatics",
								"id": 959,
								"typeArguments": [
									{
										"type": "reference",
										"name": "Module",
										"id": 885
									},
									{
										"type": "reference",
										"name": "Statics",
										"id": 884
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								46,
								337,
								391,
								433,
								452,
								463,
								512,
								536,
								603,
								614,
								703,
								879,
								52
							]
						}
					],
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 244,
							"character": 40
						},
						{
							"fileName": "app/lib/index.d.ts",
							"line": 30,
							"character": 40
						},
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1595,
							"character": 40
						},
						{
							"fileName": "config/lib/index.d.ts",
							"line": 380,
							"character": 40
						},
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 263,
							"character": 40
						},
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 166,
							"character": 40
						},
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 121,
							"character": 40
						},
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 374,
							"character": 40
						},
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 167,
							"character": 40
						},
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 439,
							"character": 40
						},
						{
							"fileName": "mlkit/lib/index.d.ts",
							"line": 113,
							"character": 40
						},
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 473,
							"character": 40
						},
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1133,
							"character": 40
						},
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 118,
							"character": 40
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						47,
						45
					]
				}
			],
			"sources": [
				{
					"fileName": "analytics/lib/index.d.ts",
					"line": 243,
					"character": 49
				},
				{
					"fileName": "app/lib/index.d.ts",
					"line": 29,
					"character": 49
				},
				{
					"fileName": "auth/lib/index.d.ts",
					"line": 1594,
					"character": 49
				},
				{
					"fileName": "config/lib/index.d.ts",
					"line": 379,
					"character": 49
				},
				{
					"fileName": "crashlytics/lib/index.d.ts",
					"line": 262,
					"character": 49
				},
				{
					"fileName": "fiam/lib/index.d.ts",
					"line": 165,
					"character": 49
				},
				{
					"fileName": "firestore/lib/index.d.ts",
					"line": 120,
					"character": 49
				},
				{
					"fileName": "functions/lib/index.d.ts",
					"line": 373,
					"character": 49
				},
				{
					"fileName": "iid/lib/index.d.ts",
					"line": 166,
					"character": 49
				},
				{
					"fileName": "invites/lib/index.d.ts",
					"line": 438,
					"character": 49
				},
				{
					"fileName": "mlkit/lib/index.d.ts",
					"line": 112,
					"character": 49
				},
				{
					"fileName": "perf/lib/index.d.ts",
					"line": 472,
					"character": 49
				},
				{
					"fileName": "storage/lib/index.d.ts",
					"line": 1132,
					"character": 49
				},
				{
					"fileName": "utils/lib/index.d.ts",
					"line": 117,
					"character": 49
				}
			]
		},
		{
			"id": 333,
			"name": "\"@react-native-firebase/auth\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 336,
					"name": "AuthDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1580,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 247
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 90
							}
						]
					}
				},
				{
					"id": 334,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1569,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 335,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/auth';\nfirebase.auth().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1578,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						336,
						334,
						335
					]
				}
			],
			"sources": [
				{
					"fileName": "auth/lib/index.d.ts",
					"line": 1566,
					"character": 44
				}
			]
		},
		{
			"id": 387,
			"name": "\"@react-native-firebase/config\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 390,
					"name": "ConfigDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 365,
							"character": 27
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 357
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 341
							}
						]
					}
				},
				{
					"id": 388,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 354,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 389,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/config';\nfirebase.config().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 363,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						390,
						388,
						389
					]
				}
			],
			"sources": [
				{
					"fileName": "config/lib/index.d.ts",
					"line": 351,
					"character": 46
				}
			]
		},
		{
			"id": 429,
			"name": "\"@react-native-firebase/crashlytics\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 432,
					"name": "CrashlyticsDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 245,
							"character": 32
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 396
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 395
							}
						]
					}
				},
				{
					"id": 430,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 234,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 431,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/crashlytics';\nfirebase.crashlytics().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 243,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						432,
						430,
						431
					]
				}
			],
			"sources": [
				{
					"fileName": "crashlytics/lib/index.d.ts",
					"line": 231,
					"character": 51
				}
			]
		},
		{
			"id": 448,
			"name": "\"@react-native-firebase/fiam\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 451,
					"name": "FiamDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 151,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 438
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 437
							}
						]
					}
				},
				{
					"id": 449,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 140,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 450,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/fiam';\nfirebase.fiam().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 149,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						451,
						449,
						450
					]
				}
			],
			"sources": [
				{
					"fileName": "fiam/lib/index.d.ts",
					"line": 137,
					"character": 44
				}
			]
		},
		{
			"id": 459,
			"name": "\"@react-native-firebase/firestore\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 460,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 92,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 462,
					"name": "FirestoreDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 103,
							"character": 30
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 457
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 456
							}
						]
					}
				},
				{
					"id": 461,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/firestore';\nfirebase.firestore().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 101,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						460,
						462,
						461
					]
				}
			],
			"sources": [
				{
					"fileName": "firestore/lib/index.d.ts",
					"line": 89,
					"character": 49
				}
			]
		},
		{
			"id": 508,
			"name": "\"@react-native-firebase/functions\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 511,
					"name": "FunctionsDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 356,
							"character": 30
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStaticsWithApp",
						"id": 965,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 499
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 497
							}
						]
					}
				},
				{
					"id": 509,
					"name": "HttpsErrorCode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 345,
							"character": 29
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "HttpsErrorCode",
								"id": 479
							}
						]
					}
				},
				{
					"id": 510,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/functions';\nfirebase.functions().httpsCallable(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 354,
							"character": 23
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						511,
						509,
						510
					]
				}
			],
			"sources": [
				{
					"fileName": "functions/lib/index.d.ts",
					"line": 341,
					"character": 49
				}
			]
		},
		{
			"id": 532,
			"name": "\"@react-native-firebase/iid\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 533,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 141,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 535,
					"name": "IidDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 152,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStaticsWithApp",
						"id": 965,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 518
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 517
							}
						]
					}
				},
				{
					"id": 534,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/iid';\nfirebase.iid().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 150,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						533,
						535,
						534
					]
				}
			],
			"sources": [
				{
					"fileName": "iid/lib/index.d.ts",
					"line": 135,
					"character": 43
				}
			]
		},
		{
			"id": 599,
			"name": "\"@react-native-firebase/invites\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 600,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 413,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 602,
					"name": "InvitesDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 424,
							"character": 28
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 581
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 540
							}
						]
					}
				},
				{
					"id": 601,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/invites';\nfirebase.invites().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 422,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						600,
						602,
						601
					]
				}
			],
			"sources": [
				{
					"fileName": "invites/lib/index.d.ts",
					"line": 410,
					"character": 47
				}
			]
		},
		{
			"id": 610,
			"name": "\"@react-native-firebase/mlkit\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 611,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "mlkit/lib/index.d.ts",
							"line": 84,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 613,
					"name": "MlkitDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "mlkit/lib/index.d.ts",
							"line": 95,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 608
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 607
							}
						]
					}
				},
				{
					"id": 612,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/mlkit';\nfirebase.mlkit().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "mlkit/lib/index.d.ts",
							"line": 93,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						611,
						613,
						612
					]
				}
			],
			"sources": [
				{
					"fileName": "mlkit/lib/index.d.ts",
					"line": 81,
					"character": 45
				}
			]
		},
		{
			"id": 699,
			"name": "\"@react-native-firebase/perf\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 700,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 447,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 702,
					"name": "PerfDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 458,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 682
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 681
							}
						]
					}
				},
				{
					"id": 701,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/perf';\nfirebase.perf().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 456,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						700,
						702,
						701
					]
				}
			],
			"sources": [
				{
					"fileName": "perf/lib/index.d.ts",
					"line": 444,
					"character": 44
				}
			]
		},
		{
			"id": 875,
			"name": "\"@react-native-firebase/storage\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 876,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1120,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 878,
					"name": "StorageDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1124,
							"character": 28
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 855
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 730
							}
						]
					}
				},
				{
					"id": 877,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1122,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						876,
						878,
						877
					]
				}
			],
			"sources": [
				{
					"fileName": "storage/lib/index.d.ts",
					"line": 1117,
					"character": 47
				}
			]
		},
		{
			"id": 888,
			"name": "\"@react-native-firebase/utils\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 889,
					"name": "FirebaseNamespaceExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 89,
							"character": 31
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseNamespace"
							}
						]
					}
				},
				{
					"id": 891,
					"name": "UtilsDefaultExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 100,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseModuleAndStatics",
						"id": 959,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module",
								"id": 885
							},
							{
								"type": "reference",
								"name": "Statics",
								"id": 884
							}
						]
					}
				},
				{
					"id": 890,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"tags": [
							{
								"tag": "example",
								"text": "\n```js\nimport { firebase } from '@react-native-firebase/utils';\nfirebase.utils().X(...);\n```\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 98,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNativeFirebaseNamespace"
					},
					"defaultValue": " FirebaseNamespaceExport"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						889,
						891,
						890
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/lib/index.d.ts",
					"line": 86,
					"character": 45
				}
			]
		},
		{
			"id": 1,
			"name": "Analytics",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Analytics package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `analytics` package:\n\n```js\nimport { firebase } from '@react-native-firebase/analytics';\n\n// firebase.analytics().X\n```\n\n#### Example 2\n\nUsing the default export from the `analytics` package:\n\n```js\nimport analytics from '@react-native-firebase/analytics';\n\n// analytics().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/analytics';\n\n// firebase.analytics().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "analytics\n"
					}
				]
			},
			"children": [
				{
					"id": 3,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Analytics service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Analytics service for the default app:\n\n```js\nconst defaultAppAnalytics = firebase.analytics();\n```\n"
					},
					"children": [
						{
							"id": 39,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 4,
							"name": "logEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5,
									"name": "logEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Log a custom event with optional params.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().logEvent('product_view', {\n  id: '1234',\n});\n```\n",
										"tags": [
											{
												"tag": "note",
												"text": "100 characters is the maximum length for param key names.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 6,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Event name must not conflict with any Reserved Events."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Parameters to be sent and displayed with the event.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 8,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 9,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 10,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "analytics/lib/index.d.ts",
															"line": 93,
															"character": 34
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 93,
									"character": 12
								}
							]
						},
						{
							"id": 37,
							"name": "resetAnalyticsData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 38,
									"name": "resetAnalyticsData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all analytics data for this instance from the device and resets the app instance ID.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().resetAnalyticsData();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 215,
									"character": 22
								}
							]
						},
						{
							"id": 11,
							"name": "setAnalyticsCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 12,
									"name": "setAnalyticsCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If true, allows the device to collect analytical data and send it to Firebase.\nUseful for GDPR.",
										"text": "#### Example\n\n```js\n// Disable collection\nawait firebase.analytics().setAnalyticsCollectionEnabled(false);\n```\n",
										"tags": [
											{
												"tag": "note",
												"text": "Analytics collection is enabled by default.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 13,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A boolean value representing whether Analytics collection is enabled or disabled.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 110,
									"character": 33
								}
							]
						},
						{
							"id": 14,
							"name": "setCurrentScreen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 15,
									"name": "setCurrentScreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the current screen name.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().setCurrentScreen('ProductScreen', 'ProductScreen');\n```\n",
										"tags": [
											{
												"tag": "note",
												"text": "Whilst screenClassOverride is optional, it is recommended it is\nalways sent as your current class name. For example on Android it will always\nshow as 'MainActivity' if you do not specify it.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 16,
											"name": "screenName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A screen name, e.g. Product."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 17,
											"name": "screenClassOverride",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "On Android, React Native runs in a single activity called\n'MainActivity'. Setting this parameter overrides the default name shown on logs.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 129,
									"character": 20
								}
							]
						},
						{
							"id": 18,
							"name": "setMinimumSessionDuration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 19,
									"name": "setMinimumSessionDuration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the minimum engagement time required before starting a session.",
										"text": "#### Example\n\n```js\n// 20 seconds\nawait firebase.analytics().setMinimumSessionDuration(20000);\n```\n"
									},
									"parameters": [
										{
											"id": 20,
											"name": "milliseconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The default value is 10000 (10 seconds).\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 143,
									"character": 29
								}
							]
						},
						{
							"id": 21,
							"name": "setSessionTimeoutDuration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 22,
									"name": "setSessionTimeoutDuration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the duration of inactivity that terminates the current session.",
										"text": "#### Example\n\n```js\n// 20 minutes\nawait firebase.analytics().setMinimumSessionDuration(900000);\n```\n"
									},
									"parameters": [
										{
											"id": 23,
											"name": "milliseconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The default value is 1800000 (30 minutes).\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 157,
									"character": 29
								}
							]
						},
						{
							"id": 24,
							"name": "setUserId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 25,
									"name": "setUserId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gives a user a unique identification.",
										"text": "#### Example\n\n```js\n// Set User\nawait firebase.analytics().setUserId('123456789');\n// Remove User\nawait firebase.analytics().setUserId(null);\n```\n"
									},
									"parameters": [
										{
											"id": 26,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set to null to remove a previously assigned id from analytics events\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 173,
									"character": 13
								}
							]
						},
						{
							"id": 31,
							"name": "setUserProperties",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 32,
									"name": "setUserProperties",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets multiple key/value pair of data on the current user.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().setUserProperties({\n  account_type: 'gold',\n  account_name: 'Gold Badge',\n});\n```\n",
										"tags": [
											{
												"tag": "react-native-firebase",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 33,
											"name": "properties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set a property value to null to remove it.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 34,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 35,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 36,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "null"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "analytics/lib/index.d.ts",
															"line": 204,
															"character": 33
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 204,
									"character": 21
								}
							]
						},
						{
							"id": 27,
							"name": "setUserProperty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 28,
									"name": "setUserProperty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a key/value pair of data on the current user.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().setUserProperty('account_type', 'gold');\n```\n"
									},
									"parameters": [
										{
											"id": 29,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A user property identifier."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 30,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set to null to remove a previously assigned id from analytics events.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 187,
									"character": 19
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								39
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4,
								37,
								11,
								14,
								18,
								21,
								24,
								31,
								27
							]
						}
					],
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 76,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 2,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "analytics/lib/index.d.ts",
					"line": 60,
					"character": 26
				}
			]
		},
		{
			"id": 940,
			"name": "App",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"tags": [
					{
						"tag": "firebase",
						"text": "app\n"
					}
				]
			},
			"children": [
				{
					"id": 941,
					"name": "FirebaseApp",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 942,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name (identifier) for this App. '[DEFAULT]' is the default App."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 191,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 943,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The (read-only) configuration options from the app initialization."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 196,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseOptions",
								"id": 926
							}
						},
						{
							"id": 944,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 945,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Make this app unusable and free up resources."
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 201,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								942,
								943
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								944
							]
						}
					],
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 187,
							"character": 30
						}
					]
				},
				{
					"id": 946,
					"name": "ReactNativeFirebaseNamespace",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 958,
							"name": "SDK_VERSION",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current React Native Firebase version."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 242,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 957,
							"name": "apps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A (read-only) array of all the initialized Apps."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 237,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "FirebaseApp",
									"id": 941
								}
							}
						},
						{
							"id": 954,
							"name": "app",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 955,
									"name": "app",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve an instance of a FirebaseApp.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```js\nconst app = firebase.app('foo');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 956,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional name of the app to return ('[DEFAULT]' if omitted)\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseApp",
										"id": 941
									}
								}
							],
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 232,
									"character": 7
								}
							]
						},
						{
							"id": 947,
							"name": "initializeApp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 948,
									"name": "initializeApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create (and initialize) a FirebaseApp."
									},
									"parameters": [
										{
											"id": 949,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options to configure the services used in the App."
											},
											"type": {
												"type": "reference",
												"name": "FirebaseOptions",
												"id": 926
											}
										},
										{
											"id": 950,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional config for your firebase app\n"
											},
											"type": {
												"type": "reference",
												"name": "FirebaseAppConfig",
												"id": 902
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseApp",
										"id": 941
									}
								},
								{
									"id": 951,
									"name": "initializeApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create (and initialize) a FirebaseApp."
									},
									"parameters": [
										{
											"id": 952,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options to configure the services used in the App."
											},
											"type": {
												"type": "reference",
												"name": "FirebaseOptions",
												"id": 926
											}
										},
										{
											"id": 953,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional name of the app to initialize ('[DEFAULT]' if\nomitted)\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseApp",
										"id": 941
									}
								}
							],
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 211,
									"character": 17
								},
								{
									"fileName": "app-types/index.d.ts",
									"line": 220,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								958,
								957
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								954,
								947
							]
						}
					],
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 204,
							"character": 47
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						941,
						946
					]
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 186,
					"character": 20
				}
			]
		},
		{
			"id": 59,
			"name": "Auth",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Authentication package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `auth` package:\n\n```js\nimport { firebase } from '@react-native-firebase/auth';\n\n// firebase.auth().X\n```\n\n#### Example 2\n\nUsing the default export from the `auth` package:\n\n```js\nimport auth from '@react-native-firebase/auth';\n\n// auth().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/auth';\n\n// firebase.auth().X\n```\nTODO @salakar @ehesp missing auth providers (PhoneAuthProvider, Facebook etc)\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "auth\n"
					}
				]
			},
			"children": [
				{
					"id": 247,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Authentication service is available for the default app or a given app.",
						"text": "#### Example 1\n\nGet the auth instance for the **default app**:\n\n```js\nconst authForDefaultApp = firebase.auth();\n```\n\n#### Example 2\n\nGet the auth instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst authForOtherApp = firebase.auth(otherApp);\n```\n\nTODO @salakar missing updateCurrentUser\n"
					},
					"children": [
						{
							"id": 328,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 252,
							"name": "settings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the current `AuthSettings`."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1164,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthSettings",
								"id": 194
							}
						},
						{
							"id": 253,
							"name": "currentUser",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the currently signed-in user (or null if no user signed in). See the User interface documentation for detailed usage.",
								"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser;\n```\n\n> It is recommended to use {@link auth#onAuthStateChanged} to track whether the user is currently signed in.\n"
							},
							"getSignature": [
								{
									"id": 254,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the currently signed-in user (or null if no user signed in). See the User interface documentation for detailed usage.",
										"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser;\n```\n\n> It is recommended to use {@link auth#onAuthStateChanged} to track whether the user is currently signed in.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "User",
												"id": 200
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1177,
									"character": 19
								}
							]
						},
						{
							"id": 248,
							"name": "languageCode",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the current language code.\nSets the language code.",
								"text": "#### Example\n\n```js\nconst language = firebase.auth().languageCode;\n```\n\n#### Example\n\n```js\n// Set language to French\nfirebase.auth().languageCode = 'fr';\n```\n"
							},
							"getSignature": [
								{
									"id": 249,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current language code.",
										"text": "#### Example\n\n```js\nconst language = firebase.auth().languageCode;\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"setSignature": [
								{
									"id": 250,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the language code.",
										"text": "#### Example\n\n```js\n// Set language to French\nfirebase.auth().languageCode = 'fr';\n```\n"
									},
									"parameters": [
										{
											"id": 251,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An ISO language code.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1145,
									"character": 20
								},
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1159,
									"character": 20
								}
							]
						},
						{
							"id": 316,
							"name": "applyActionCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 317,
									"name": "applyActionCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Applies a verification code sent to the user by email or other out-of-band mechanism.",
										"text": "#### Example\n\n```js\nawait firebase.auth().applyActionCode('ABCD');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the action code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the action code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given action code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the action code. This may have happened if the user was deleted between when the action code was issued and when this method was called."
											}
										]
									},
									"parameters": [
										{
											"id": 318,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A verification code sent to the user.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1508,
									"character": 19
								}
							]
						},
						{
							"id": 319,
							"name": "checkActionCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 320,
									"name": "checkActionCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks a verification code sent to the user by email or other out-of-band mechanism.",
										"text": "#### Example\n\n```js\nconst actionCodeInfo = await firebase.auth().checkActionCode('ABCD');\nconsole.log('Action code operation: ', actionCodeInfo.operation);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the action code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the action code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given action code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the action code. This may have happened if the user was deleted between when the action code was issued and when this method was called."
											}
										]
									},
									"parameters": [
										{
											"id": 321,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A verification code sent to the user.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ActionCodeInfo",
												"id": 142
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1526,
									"character": 19
								}
							]
						},
						{
							"id": 312,
							"name": "confirmPasswordReset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 313,
									"name": "confirmPasswordReset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Completes the password reset process with the confirmation code and new password, via\n{@link auth#sendPasswordResetEmail}.",
										"text": "#### Example\n\n```js\nawait firebase.auth().confirmPasswordReset('ABCD', '1234567');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the password reset code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the password reset code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given password reset code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the password reset code. This may have happened if the user was deleted between when the code was issued and when this method was called."
											},
											{
												"tag": "error",
												"text": "auth/weak-password Thrown if the new password is not strong enough."
											}
										]
									},
									"parameters": [
										{
											"id": 314,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code from the password reset email."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 315,
											"name": "newPassword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1491,
									"character": 24
								}
							]
						},
						{
							"id": 283,
							"name": "createUserWithEmailAndPassword",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 284,
									"name": "createUserWithEmailAndPassword",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new user with an email and password.",
										"text": "This method also signs the user in once the account has been created.\n\n#### Example\n\n```js\nconst userCredential = await firebase.auth().createUserWithEmailAndPassword('joe.bloggs@example.com', '123456');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/email-already-in-use Thrown if there already exists an account with the given email address."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if email/password accounts are not enabled. Enable email/password accounts in the Firebase Console, under the Auth tab."
											},
											{
												"tag": "error",
												"text": "auth/weak-password Thrown if the password is not strong enough."
											}
										]
									},
									"parameters": [
										{
											"id": 285,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 286,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1338,
									"character": 34
								}
							]
						},
						{
							"id": 322,
							"name": "fetchSignInMethodsForEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 323,
									"name": "fetchSignInMethodsForEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of authentication methods that can be used to sign in a given user (identified by its main email address).",
										"text": "#### Example\n\n```js\nconst methods = await firebase.auth().fetchSignInMethodsForEmail('joe.bloggs@example.com');\n\nmethods.forEach((method) => {\n  console.log(method);\n});\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 324,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1544,
									"character": 30
								}
							]
						},
						{
							"id": 305,
							"name": "isSignInWithEmailLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 306,
									"name": "isSignInWithEmailLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether the user signed in with a given email link.",
										"text": "#### Example\n\n```js\nconst signedInWithLink = firebase.auth().isSignInWithEmailLink(link);\n```\n"
									},
									"parameters": [
										{
											"id": 307,
											"name": "emailLink",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The email link to check whether the user signed in with it.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1454,
									"character": 25
								}
							]
						},
						{
							"id": 255,
							"name": "onAuthStateChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 256,
									"name": "onAuthStateChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen for changes in the users auth state (logging in and out).\nThis method returns a unsubscribe function to stop listening to events.\nAlways ensure you unsubscribe from the listener when no longer needed to prevent updates to components no longer in use.",
										"text": "#### Example\n\n```js\nconst unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n  if (user) {\n    // Signed in\n  } else {\n    // Signed out\n  }\n});\n\n// Unsubscribe from further state changes\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 257,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener function which triggers when auth state changed (for example signing out).\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthListenerCallback",
												"id": 329
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 258,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 259,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "auth/lib/index.d.ts",
													"line": 1201,
													"character": 55
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1201,
									"character": 22
								}
							]
						},
						{
							"id": 260,
							"name": "onIdTokenChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 261,
									"name": "onIdTokenChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen for changes in id token.\nThis method returns a unsubscribe function to stop listening to events.\nAlways ensure you unsubscribe from the listener when no longer needed to prevent updates to components no longer in use.",
										"text": "#### Example\n\n```js\nconst unsubscribe = firebase.auth().onIdTokenChanged((user) => {\n  if (user) {\n    // User is signed in or token was refreshed.\n  }\n});\n\n// Unsubscribe from further state changes\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 262,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener function which triggers when the users ID token changes.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthListenerCallback",
												"id": 329
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 263,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 264,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "auth/lib/index.d.ts",
													"line": 1223,
													"character": 53
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1223,
									"character": 20
								}
							]
						},
						{
							"id": 265,
							"name": "onUserChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 266,
									"name": "onUserChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a listener to observe changes to the User object. This is a superset of everything from\n{@link auth#onAuthStateChanged}, {@ auth#onIdTokenChanged} and user changes. The goal of this\nmethod is to provide easier listening to all user changes, such as when credentials are\nlinked and unlinked, without manually having to call {@link auth.User#reload}.",
										"text": "#### Example\n\n```js\nconst unsubscribe = firebase.auth().onUserChanged((user) => {\n  if (user) {\n    // User is signed in or token was refreshed.\n  }\n});\n\n// Unsubscribe from further state changes\nunsubscribe();\n```\n\n> This is an experimental feature and is only part of React Native Firebase.\n",
										"tags": [
											{
												"tag": "react-native-firebase",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 267,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener function which triggers when the users data changes.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthListenerCallback",
												"id": 329
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 268,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 269,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "auth/lib/index.d.ts",
													"line": 1249,
													"character": 50
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1249,
									"character": 17
								}
							]
						},
						{
							"id": 297,
							"name": "sendPasswordResetEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 298,
									"name": "sendPasswordResetEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a password reset email to the given email address.\nUnlike the web SDK, the email will contain a password reset link rather than a code.",
										"text": "#### Example\n\n```js\nawait firebase.auth().sendPasswordResetEmail('joe.bloggs@example.com');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/missing-android-pkg-name An Android package name must be provided if the Android app is required to be installed."
											},
											{
												"tag": "error",
												"text": "auth/missing-continue-uri A continue URL must be provided in the request."
											},
											{
												"tag": "error",
												"text": "auth/missing-ios-bundle-id An iOS Bundle ID must be provided if an App Store ID is provided."
											},
											{
												"tag": "error",
												"text": "auth/invalid-continue-uri The continue URL provided in the request is invalid."
											},
											{
												"tag": "error",
												"text": "auth/unauthorized-continue-uri The domain of the continue URL is not whitelisted. Whitelist the domain in the Firebase console."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the email address."
											}
										]
									},
									"parameters": [
										{
											"id": 299,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 300,
											"name": "actionCodeSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Additional settings to be set before sending the reset email.\n"
											},
											"type": {
												"type": "reference",
												"name": "ActionCodeSettings",
												"id": 147
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1420,
									"character": 26
								}
							]
						},
						{
							"id": 301,
							"name": "sendSignInLinkToEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 302,
									"name": "sendSignInLinkToEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a sign in link to the user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().sendSignInLinkToEmail('joe.bloggs@example.com');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/argument-error Thrown if handleCodeInApp is false."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/missing-android-pkg-name An Android package name must be provided if the Android app is required to be installed."
											},
											{
												"tag": "error",
												"text": "auth/missing-continue-uri A continue URL must be provided in the request."
											},
											{
												"tag": "error",
												"text": "auth/missing-ios-bundle-id An iOS Bundle ID must be provided if an App Store ID is provided."
											},
											{
												"tag": "error",
												"text": "auth/invalid-continue-uri The continue URL provided in the request is invalid."
											},
											{
												"tag": "error",
												"text": "auth/unauthorized-continue-uri The domain of the continue URL is not whitelisted. Whitelist the domain in the Firebase console."
											}
										]
									},
									"parameters": [
										{
											"id": 303,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 304,
											"name": "actionCodeSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The action code settings. The action code settings which provides Firebase with instructions on how to construct the email link. This includes the sign in completion URL or the deep link for mobile redirects, the mobile apps to use when the sign-in link is opened on an Android or iOS device. Mobile app redirects will only be applicable if the developer configures and accepts the Firebase Dynamic Links terms of condition. The Android package name and iOS bundle ID will be respected only if they are configured in the same Firebase Auth project used.\n"
											},
											"type": {
												"type": "reference",
												"name": "ActionCodeSettings",
												"id": 147
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1441,
									"character": 25
								}
							]
						},
						{
							"id": 272,
							"name": "signInAnonymously",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 273,
									"name": "signInAnonymously",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sign in a user anonymously. If the user has already signed in, that user will be returned.",
										"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInAnonymously();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1274,
									"character": 21
								}
							]
						},
						{
							"id": 294,
							"name": "signInWithCredential",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 295,
									"name": "signInWithCredential",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs the user in with a generated credential.",
										"text": "#### Example\n\n```js\n// Generate a Firebase credential\nconst credential = firebase.auth.FacebookAuthProvider.credential('access token from Facebook');\n// Sign the user in with the credential\nconst userCredential = await firebase.auth().signInWithCredential(credential);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/account-exists-with-different-credential Thrown if there already exists an account with the email address asserted by the credential."
											},
											{
												"tag": "error",
												"text": "auth/invalid-credential Thrown if the credential is malformed or has expired."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if the type of account corresponding to the credential is not enabled. Enable the account type in the Firebase Console, under the Auth tab."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given credential has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if signing in with a credential from firebase.auth.EmailAuthProvider.credential and there is no user corresponding to the given email."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if signing in with a credential from firebase.auth.EmailAuthProvider.credential and the password is invalid for the given email, or if the account corresponding to the email does not have a password set."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the credential is a firebase.auth.PhoneAuthProvider.credential and the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the credential is a firebase.auth.PhoneAuthProvider.credential and the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 296,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A generated `AuthCredential`, for example from social auth.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 60
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1398,
									"character": 24
								}
							]
						},
						{
							"id": 291,
							"name": "signInWithCustomToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 292,
									"name": "signInWithCustomToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs a user in with a custom token.",
										"text": "#### Example\n\n```js\n// Create a custom token via the Firebase Admin SDK.\nconst token = await firebase.auth().createCustomToken(uid, customClaims);\n...\n// Use the token on the device to sign in.\nconst userCredential = await firebase.auth().signInWithCustomToken(token);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/custom-token-mismatch Thrown if the custom token is for a different Firebase App."
											},
											{
												"tag": "error",
												"text": "auth/invalid-custom-token Thrown if the custom token format is incorrect."
											}
										]
									},
									"parameters": [
										{
											"id": 293,
											"name": "customToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A custom token generated from the Firebase Admin SDK.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1374,
									"character": 25
								}
							]
						},
						{
							"id": 287,
							"name": "signInWithEmailAndPassword",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 288,
									"name": "signInWithEmailAndPassword",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs a user in with an email and password.",
										"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInWithEmailAndPassword('joe.bloggs@example.com', '123456');\n````",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given email has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the given email."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if the password is invalid for the given email, or the account corresponding to the email does not have a password set."
											}
										]
									},
									"parameters": [
										{
											"id": 289,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 290,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1355,
									"character": 30
								}
							]
						},
						{
							"id": 308,
							"name": "signInWithEmailLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 309,
									"name": "signInWithEmailLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs the user in with an email link.",
										"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInWithEmailLink('joe.bloggs@example.com', link);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if OTP in email link expires."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given email has been disabled."
											}
										]
									},
									"parameters": [
										{
											"id": 310,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email to sign in with."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 311,
											"name": "emailLink",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An email link.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1471,
									"character": 23
								}
							]
						},
						{
							"id": 274,
							"name": "signInWithPhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 275,
									"name": "signInWithPhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs in the user using their phone number.",
										"text": "#### Example\n\n```js\n// Force a new message to be sent\nconst result = await firebase.auth().signInWithPhoneNumber('#4423456789', true);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-phone-number Thrown if the phone number has an invalid format."
											},
											{
												"tag": "error",
												"text": "auth/missing-phone-number Thrown if the phone number is missing."
											},
											{
												"tag": "error",
												"text": "auth/quota-exceeded Thrown if the SMS quota for the Firebase project has been exceeded."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given phone number has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if you have not enabled the provider in the Firebase Console. Go to the Firebase Console for your project, in the Auth section and the Sign in Method tab and configure the provider."
											}
										]
									},
									"parameters": [
										{
											"id": 276,
											"name": "phoneNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The devices phone number."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 277,
											"name": "forceResend",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Forces a new message to be sent if it was already recently sent.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ConfirmationResult",
												"id": 130
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1294,
									"character": 25
								}
							]
						},
						{
							"id": 270,
							"name": "signOut",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 271,
									"name": "signOut",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs the user out.",
										"text": "Triggers the {@link auth#onAuthStateChanged} listener.\n\n#### Example\n\n```js\nawait firebase.auth().currentUser.signOut();\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1263,
									"character": 11
								}
							]
						},
						{
							"id": 325,
							"name": "verifyPasswordResetCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 326,
									"name": "verifyPasswordResetCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks a password reset code sent to the user by email or other out-of-band mechanism.\nTODO salakar: confirm return behavior (Returns the user's email address if valid.)",
										"text": "#### Example\n\n```js\nawait firebase.auth().verifyPasswordResetCode('ABCD');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the password reset code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the password reset code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given password reset code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the password reset code. This may have happened if the user was deleted between when the code was issued and when this method was called."
											}
										]
									},
									"parameters": [
										{
											"id": 327,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A password reset code.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1562,
									"character": 27
								}
							]
						},
						{
							"id": 278,
							"name": "verifyPhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 279,
									"name": "verifyPhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a PhoneAuthListener to listen to phone verification events,\non the final completion event a PhoneAuthCredential can be generated for\nauthentication purposes.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789', )\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('Snapshot state: ', phoneAuthSnapshot.state);\n });\n```\n"
									},
									"parameters": [
										{
											"id": 280,
											"name": "phoneNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The user's phone number in E.164 format (e.g. +16505550101)."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 281,
											"name": "autoVerifyTimeoutOrForceResend",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If a number, sets in seconds how to to wait until auto verification times out. If boolean, sets the `forceResend` parameter."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 282,
											"name": "forceResend",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If true, resend the verification message even if it was recently sent.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PhoneAuthListener",
										"id": 162
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1314,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								328,
								252
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								253,
								248
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								316,
								319,
								312,
								283,
								322,
								305,
								255,
								260,
								265,
								297,
								301,
								272,
								294,
								291,
								287,
								308,
								274,
								270,
								325,
								278
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1135,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 142,
					"name": "ActionCodeInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The interface returned from a {@link auth#checkActionCode} call.",
						"text": "#### Example\n\n```js\nconst actionCodeInfo = await firebase.auth().checkActionCode('ABCD');\nconsole.log('Action code operation: ', actionCodeInfo.operation);\n```\n"
					},
					"children": [
						{
							"id": 143,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Additional action code data."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 538,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ActionCodeInfoData",
								"id": 139
							}
						},
						{
							"id": 144,
							"name": "operation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operation from where the action originated."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 542,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "PASSWORD_RESET"
									},
									{
										"type": "stringLiteral",
										"value": "VERIFY_EMAIL"
									},
									{
										"type": "stringLiteral",
										"value": "RECOVER_EMAIL"
									},
									{
										"type": "stringLiteral",
										"value": "EMAIL_SIGNIN"
									},
									{
										"type": "stringLiteral",
										"value": "ERROR"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								143,
								144
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 534,
							"character": 33
						}
					]
				},
				{
					"id": 139,
					"name": "ActionCodeInfoData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Additional data returned from a {@link auth#checkActionCode} call.",
						"text": "#### Example\n\n```js\nconst actionCodeInfo = await firebase.auth().checkActionCode('ABCD');\n\nconsole.log('Action code email: ', actionCodeInfo.data.email);\nconsole.log('Action code from email: ', actionCodeInfo.data.fromEmail);\n```\n"
					},
					"children": [
						{
							"id": 140,
							"name": "email",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 520,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 141,
							"name": "fromEmail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 521,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								140,
								141
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 519,
							"character": 37
						}
					]
				},
				{
					"id": 147,
					"name": "ActionCodeSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options to be sent with requests such as {@link auth.User#sendEmailVerification}.",
						"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n handleCodeInApp: true,\n url: 'app/email-verification',\n});\n```\n"
					},
					"children": [
						{
							"id": 148,
							"name": "android",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Android specific settings."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 582,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "ActionCodeSettingsAndroid",
								"id": 135
							}
						},
						{
							"id": 149,
							"name": "handleCodeInApp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the code should be handled by the app."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 586,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 150,
							"name": "iOS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "iOS specific settings."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 590,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "ActionCodeSettingsIos",
								"id": 145
							}
						},
						{
							"id": 151,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets the URL for the action."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 594,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								148,
								149,
								150,
								151
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 578,
							"character": 37
						}
					]
				},
				{
					"id": 135,
					"name": "ActionCodeSettingsAndroid",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Android specific options which can be attached to the {@link auth.ActionCodeSettings} object\nto be sent with requests such as {@link auth.User#sendEmailVerification}.",
						"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n android: {\n   installApp: true,\n   packageName: 'com.awesome.app',\n },\n});\n```\n"
					},
					"children": [
						{
							"id": 137,
							"name": "installApp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The preference for whether to attempt to install the app if it is not present."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 500,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 138,
							"name": "minimumVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The minimum Android app version."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 504,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 136,
							"name": "packageName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Android Package Name."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 496,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								137,
								138,
								136
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 492,
							"character": 44
						}
					]
				},
				{
					"id": 145,
					"name": "ActionCodeSettingsIos",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "iOS specific options which can be attached to the {@link auth.ActionCodeSettings} object\nto be sent with requests such as {@link auth.User#sendEmailVerification}.",
						"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n iOS: {\n   bundleId: '123456',\n },\n});\n```\n"
					},
					"children": [
						{
							"id": 146,
							"name": "bundleId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An iOS build ID."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 563,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								146
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 559,
							"character": 40
						}
					]
				},
				{
					"id": 99,
					"name": "AdditionalUserInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A structure containing additional user information from a federated identity provider via {@link auth.UserCredential}.",
						"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInAnonymously();\nconsole.log('Additional user info: ', userCredential.additionalUserInfo);\n```\n",
						"tags": [
							{
								"tag": "error",
								"text": "auth/operation-not-allowed Thrown if anonymous accounts are not enabled. Enable anonymous accounts in the Firebase Console, under the Auth tab.\n"
							}
						]
					},
					"children": [
						{
							"id": 100,
							"name": "isNewUser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns whether the user is new or existing."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 281,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 101,
							"name": "profile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns a Object containing IDP-specific user data if the provider is one of Facebook,\nGitHub, Google, Twitter, Microsoft, or Yahoo."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 286,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Object"
							}
						},
						{
							"id": 102,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the provider ID for specifying which provider the information in `profile` is for."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 290,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 103,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the username if the provider is GitHub or Twitter."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 294,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								100,
								101,
								102,
								103
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 277,
							"character": 37
						}
					]
				},
				{
					"id": 60,
					"name": "AuthCredential",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface that represents the credentials returned by an auth provider. Implementations specify the details\nabout each auth provider's credential requirements.",
						"text": "TODO Missing; signInMethod, toJSON, fromJSON\n\n#### Example\n\n```js\nconst provider = firebase.auth.EmailAuthProvider;\nconst authCredential = provider.credential('foo@bar.com', '123456');\n\nawait firebase.auth().linkWithCredential(authCredential);\n```\n"
					},
					"children": [
						{
							"id": 61,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The authentication provider ID for the credential. For example, 'facebook.com', or 'google.com'."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 83,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 63,
							"name": "secret",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 85,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 62,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 84,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								61,
								63,
								62
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 79,
							"character": 33
						}
					]
				},
				{
					"id": 64,
					"name": "AuthProvider",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface that represents an auth provider. Implemented by other providers."
					},
					"children": [
						{
							"id": 65,
							"name": "PROVIDER_ID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The provider ID of the provider."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 95,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 66,
							"name": "credential",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new `AuthCredential`.",
								"tags": [
									{
										"tag": "returns",
										"text": "."
									},
									{
										"tag": "param",
										"text": "A provider token.",
										"param": "token"
									},
									{
										"tag": "param",
										"text": "A provider secret.\n",
										"param": "secret"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 103,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 67,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 68,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 69,
													"name": "token",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 70,
													"name": "secret",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 60
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 103,
											"character": 15
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								65,
								66
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 91,
							"character": 31
						}
					]
				},
				{
					"id": 194,
					"name": "AuthSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface for module auth settings.",
						"text": "#### Example\n\n```js\nconst settings = firebase.auth().settings;\nconsole.log(settings.appVerificationDisabledForTesting);\n```\n"
					},
					"children": [
						{
							"id": 195,
							"name": "appVerificationDisabledForTesting",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "iOS only flag to determine whether app verification should be disabled for testing or not.",
								"tags": [
									{
										"tag": "platform",
										"text": "iOS"
									},
									{
										"tag": "param",
										"text": "Boolean value representing whether app verification should be disabled for testing.\n",
										"param": "disabled"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 789,
									"character": 37
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 196,
							"name": "setAutoRetrievedSmsCodeForPhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 197,
									"name": "setAutoRetrievedSmsCodeForPhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The phone number and SMS code here must have been configured in the\nFirebase Console (Authentication > Sign In Method > Phone).",
										"text": "Calling this method a second time will overwrite the previously passed parameters.\nOnly one number can be configured at a given time.\n\n#### Example\n\n```js\nawait firebase.auth().settings.setAutoRetrievedSmsCodeForPhoneNumber('+4423456789', 'ABCDE');\n```\n",
										"tags": [
											{
												"tag": "platform",
												"text": "Android"
											}
										]
									},
									"parameters": [
										{
											"id": 198,
											"name": "phoneNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users phone number."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 199,
											"name": "smsCode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pre-set SMS code.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 808,
									"character": 41
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								195
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								196
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 782,
							"character": 31
						}
					]
				},
				{
					"id": 130,
					"name": "ConfirmationResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A result from a {@link auth#signInWithPhoneNumber} call.",
						"text": "#### Example\n\n```js\n// Force a new message to be sent\nconst result = await firebase.auth().signInWithPhoneNumber('#4423456789');\nconst user = await result.confirm('12345');\n```\n"
					},
					"children": [
						{
							"id": 131,
							"name": "verificationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The phone number authentication operation's verification ID. This can be used along with\nthe verification code to initialize a phone auth credential."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 468,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 132,
							"name": "confirm",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 133,
									"name": "confirm",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Finishes the sign in flow. Validates a code that was sent to the users device."
									},
									"parameters": [
										{
											"id": 134,
											"name": "verificationCode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code sent to the users device from Firebase.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "User",
														"id": 200
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 474,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								131
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								132
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 463,
							"character": 37
						}
					]
				},
				{
					"id": 71,
					"name": "EmailAuthProvider",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Email and password auth provider implementation."
					},
					"children": [
						{
							"id": 73,
							"name": "EMAIL_LINK_SIGN_IN_METHOD",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This corresponds to the sign-in method identifier as returned in {@link auth#fetchSignInMethodsForEmail}.",
								"text": "#### Example\n\n```js\nconst signInMethods = await firebase.auth().fetchSignInMethodsForEmail('...');\nif (signInMethods.indexOf(firebase.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD) != -1) {\n  // User can sign in with email/link\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 126,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 74,
							"name": "EMAIL_PASSWORD_SIGN_IN_METHOD",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This corresponds to the sign-in method identifier as returned in {@link auth#fetchSignInMethodsForEmail}.",
								"text": "#### Example\n\n```js\nconst signInMethods = await firebase.auth().fetchSignInMethodsForEmail('...');\nif (signInMethods.indexOf(firebase.auth.EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD) != -1) {\n  // User can sign in with email/password\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 139,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 72,
							"name": "PROVIDER_ID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The provider ID. Always returns `password`."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 113,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 75,
							"name": "credential",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the auth provider credential.",
								"text": "#### Example\n\n```js\nconst authCredential = firebase.auth.EmailAuthProvider.credential('joe.bloggs@example.com', '123456');\n```\n",
								"tags": [
									{
										"tag": "returns",
										"text": ""
									},
									{
										"tag": "param",
										"text": "Users email address.",
										"param": "email"
									},
									{
										"tag": "param",
										"text": "User account password.\n",
										"param": "password"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 153,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 76,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 77,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 78,
													"name": "email",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 79,
													"name": "password",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 60
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 153,
											"character": 15
										}
									]
								}
							}
						},
						{
							"id": 80,
							"name": "credentialWithLink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Initialize an `EmailAuthProvider` credential using an email and an email link after a sign in with email link operation.",
								"text": "#### Example\n\n```js\nconst authCredential = firebase.auth.EmailAuthProvider.credentialWithLink('joe.bloggs@example.com', 'https://myexample.com/invite');\n```\n",
								"tags": [
									{
										"tag": "param",
										"text": "Users email address.",
										"param": "email"
									},
									{
										"tag": "param",
										"text": "Sign-in email link.\n",
										"param": "emailLink"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 166,
									"character": 22
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 81,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 82,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 83,
													"name": "email",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 84,
													"name": "emailLink",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 60
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 166,
											"character": 23
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								73,
								74,
								72,
								75,
								80
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 109,
							"character": 36
						}
					]
				},
				{
					"id": 117,
					"name": "IdTokenResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface representing ID token result obtained from {@link auth.User#getIdTokenResult}.\nIt contains the ID token JWT string and other helper properties for getting different data\nassociated with the token as well as all the decoded payload claims.",
						"text": "TODO @salakar validate timestamp types\n\n#### Example\n\n```js\nconst idTokenResult = await firebase.auth().currentUser.getIdTokenResult();\nconsole.log('User JWT: ', idTokenResult.token);\n```\n"
					},
					"children": [
						{
							"id": 119,
							"name": "authTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The authentication time formatted as a UTC string. This is the time the user authenticated\n(signed in) and not the time the token was refreshed."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 404,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 123,
							"name": "claims",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The entire payload claims of the ID token including the standard reserved claims as well as\nthe custom claims."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 422,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 124,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 125,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 126,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 422,
											"character": 11
										}
									]
								}
							}
						},
						{
							"id": 121,
							"name": "expirationTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ID token expiration time formatted as a UTC string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 412,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 120,
							"name": "issuedAtTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ID token issued at time formatted as a UTC string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 408,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 122,
							"name": "signInProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The sign-in provider through which the ID token was obtained (anonymous, custom,\nphone, password, etc). Note, this does not map to provider IDs."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 417,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 118,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Firebase Auth ID token JWT string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 399,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								119,
								123,
								121,
								120,
								122,
								118
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 395,
							"character": 32
						}
					]
				},
				{
					"id": 157,
					"name": "PhoneAuthError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A custom error in the event verifying a phone number failed.",
						"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('Snapshot state: ', phoneAuthSnapshot.state);\n }, (phoneAuthError) => {\n   console.error('Error: ', phoneAuthError.message);\n });\n```\n"
					},
					"children": [
						{
							"id": 158,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The code the verification failed with."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 670,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 160,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "JavaScript error message."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 678,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 161,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "JavaScript error stack trace."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 682,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 159,
							"name": "verificationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The verification ID which failed."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 674,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								158,
								160,
								161,
								159
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 666,
							"character": 33
						}
					]
				},
				{
					"id": 162,
					"name": "PhoneAuthListener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The listener function returned from a {@link auth#verifyPhoneNumber} call."
					},
					"children": [
						{
							"id": 188,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 189,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A promise handler called once the `on` listener flow has rejected.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   return Promise.reject(\n     new Error('Code not sent!')\n   );\n })\n .catch((error) => {\n   console.error(error.message);\n });\n```\n\n> Used when no `onRejected` handler is passed to the `then`.\n"
									},
									"parameters": [
										{
											"id": 190,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Rejected promise handler.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 191,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 192,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 193,
																	"name": "a",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "NativeFirebaseError"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "auth/lib/index.d.ts",
															"line": 769,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 769,
									"character": 9
								}
							]
						},
						{
							"id": 163,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 164,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The phone auth state listener. See {@link auth.PhoneAuthState} for different event state types.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('State: ', phoneAuthSnapshot.state);\n }, (error) => {\n   console.error(error);\n }, (phoneAuthSnapshot) => {\n   console.log('Success');\n });\n```\n"
									},
									"parameters": [
										{
											"id": 165,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event to subscribe to. Currently only `state_changed` is available."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 166,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The required observer function. Returns a new phone auth snapshot on each event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 167,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 168,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 169,
																	"name": "snapshot",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "PhoneAuthSnapshot",
																		"id": 152
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "auth/lib/index.d.ts",
															"line": 712,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 170,
											"name": "errorCb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional error handler function. This is not required if the `error` snapshot state is being handled in the `observer`."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 171,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 172,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 173,
																			"name": "error",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "PhoneAuthError",
																				"id": 157
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 174,
											"name": "successCb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional success handler function. This is not required if the `sent` or `verified` snapshot state is being handled in the `observer`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 175,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 176,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 177,
																			"name": "snapshot",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "PhoneAuthSnapshot",
																				"id": 152
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PhoneAuthListener",
										"id": 162
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 710,
									"character": 6
								}
							]
						},
						{
							"id": 178,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 179,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A promise handler called once the `on` listener flow has succeeded or rejected.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   if (phoneAuthSnapshot.state === firebase.auth.PhoneAuthState.CODE_SENT) {\n     return Promise.resolve();\n   } else {\n     return Promise.reject(\n       new Error('Code not sent!')\n     );\n   }\n })\n .then((phoneAuthSnapshot) => {\n   console.log(phoneAuthSnapshot.state);\n }, (error) => {\n   console.error(error.message);\n });\n```\n"
									},
									"parameters": [
										{
											"id": 180,
											"name": "onFulfilled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Resolved promise handler."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 181,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 182,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 183,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "PhoneAuthSnapshot",
																				"id": 152
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "auth/lib/index.d.ts",
																	"line": 744,
																	"character": 19
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 184,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Rejected promise handler.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 185,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 186,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 187,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NativeFirebaseError"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "auth/lib/index.d.ts",
																	"line": 745,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 743,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								188,
								163,
								178
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 688,
							"character": 36
						}
					]
				},
				{
					"id": 152,
					"name": "PhoneAuthSnapshot",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A snapshot interface of the current phone auth state.",
						"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('Snapshot state: ', phoneAuthSnapshot.state);\n });\n```\n"
					},
					"children": [
						{
							"id": 155,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The verification code. Will only be available if auto verification has taken place."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 645,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 156,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A native JavaScript error if an error occurs."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 649,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "NativeFirebaseError"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 153,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current phone auth verification state.",
								"text": "- `sent`: On iOS, this is the final event received. Once sent, show a visible input box asking the user to enter the verification code.\n- `timeout`: Auto verification has timed out. Show a visible input box asking the user to enter the verification code.\n- `verified`: The verification code has automatically been verified by the Android device. The snapshot contains the verification ID & code to create a credential.\n- `error`: An error occurred. Handle or allow the promise to reject.\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 637,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "sent"
									},
									{
										"type": "stringLiteral",
										"value": "timeout"
									},
									{
										"type": "stringLiteral",
										"value": "verified"
									},
									{
										"type": "stringLiteral",
										"value": "error"
									}
								]
							}
						},
						{
							"id": 154,
							"name": "verificationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The verification ID to build a `PhoneAuthProvider` credential."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 641,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								155,
								156,
								153,
								154
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 628,
							"character": 36
						}
					]
				},
				{
					"id": 85,
					"name": "PhoneAuthState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"children": [
						{
							"id": 88,
							"name": "AUTO_VERIFIED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 175,
									"character": 17
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "verified"
							}
						},
						{
							"id": 87,
							"name": "AUTO_VERIFY_TIMEOUT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 174,
									"character": 23
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "timeout"
							}
						},
						{
							"id": 86,
							"name": "CODE_SENT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 173,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "sent"
							}
						},
						{
							"id": 89,
							"name": "ERROR",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 176,
									"character": 9
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "error"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								88,
								87,
								86,
								89
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 172,
							"character": 33
						}
					]
				},
				{
					"id": 90,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "firebase.auth.X"
					},
					"children": [
						{
							"id": 91,
							"name": "EmailAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Email and password auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.EmailAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 192,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "EmailAuthProvider",
								"id": 71
							}
						},
						{
							"id": 96,
							"name": "FacebookAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Facebook auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.FacebookAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 242,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 64
							}
						},
						{
							"id": 94,
							"name": "GithubAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Github auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.GithubAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 222,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 64
							}
						},
						{
							"id": 93,
							"name": "GoogleAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Google auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.GoogleAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 212,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 64
							}
						},
						{
							"id": 97,
							"name": "OAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Custom OAuth auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.OAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 252,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 64
							}
						},
						{
							"id": 92,
							"name": "PhoneAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Phone auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.PhoneAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 202,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 64
							}
						},
						{
							"id": 98,
							"name": "PhoneAuthState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A PhoneAuthState interface.",
								"text": "#### Example\n\n```js\nfirebase.auth.PhoneAuthState;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 262,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "PhoneAuthState",
								"id": 85
							}
						},
						{
							"id": 95,
							"name": "TwitterAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Twitter auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.TwitterAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 232,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 64
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								91,
								96,
								94,
								93,
								97,
								92,
								98,
								95
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 182,
							"character": 26
						}
					]
				},
				{
					"id": 127,
					"name": "UpdateProfile",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Request used to update user profile information.",
						"text": "#### Example\n\n```js\nconst update = {\n  displayName: 'Alias',\n  photoURL: 'https://my-cdn.com/assets/user/123.png',\n};\n\nawait firebase.auth().currentUser.updateProfile(update);\n```\n"
					},
					"children": [
						{
							"id": 128,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional display name for the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 445,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 129,
							"name": "photoURL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional photo URL for the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 449,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								128,
								129
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 441,
							"character": 32
						}
					]
				},
				{
					"id": 200,
					"name": "User",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a user's profile information in your Firebase project's user database. It also\ncontains helper methods to change or retrieve profile information, as well as to manage that user's authentication state.",
						"text": "#### Example 1\n\nSubscribing to the users authentication state.\n\n```js\nfirebase.auth().onAuthStateChanged((user) => {\n  if (user) {\n    console.log('User email: ', user.email');\n  }\n});\n```\n\n#### Example 2\n\n```js\nconst user = firebase.auth().currentUser;\n\nif (user) {\n console.log('User email: ', user.email');\n}\n```\n"
					},
					"children": [
						{
							"id": 201,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The user's display name (if available)."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 841,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 202,
							"name": "email",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "- The user's email address (if available)."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 845,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 203,
							"name": "emailVerified",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "- True if the user's email address has been verified."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 849,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 204,
							"name": "isAnonymous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns true if the user is anonymous; that is, the user account was created with\n{@link auth#signInAnonymously} and has not been linked to another account\nwith {@link auth#linkWithCredential}."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 855,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 205,
							"name": "metadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the {@link auth.UserMetadata} associated with this user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 860,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "UserMetadata",
								"id": 107
							}
						},
						{
							"id": 206,
							"name": "phoneNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the phone number of the user, as stored in the Firebase project's user database,\nor null if none exists. This can be updated at any time by calling {@link auth.User#updatePhoneNumber}."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 866,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 207,
							"name": "photoURL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of the user's profile picture (if available)."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 871,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 208,
							"name": "providerData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Additional provider-specific information about the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 876,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "Array",
								"typeArguments": [
									{
										"type": "reference",
										"name": "UserInfo",
										"id": 110
									}
								]
							}
						},
						{
							"id": 209,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " The authentication provider ID for the current user.\n For example, 'facebook.com', or 'google.com'."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 882,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 210,
							"name": "uid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " - The user's unique ID."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 887,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 211,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 212,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Delete the current user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.delete();\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/requires-recent-login Thrown if the user's last sign-in time does not meet the security threshold. Use `auth.User#reauthenticateWithCredential` to resolve. This does not apply if the user is anonymous.\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 900,
									"character": 10
								}
							]
						},
						{
							"id": 213,
							"name": "getIdToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 214,
									"name": "getIdToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the users authentication token.",
										"text": "#### Example\n\n```js\n// Force a token refresh\nconst idToken = await firebase.auth().currentUser.getIdToken(true);\n```\n"
									},
									"parameters": [
										{
											"id": 215,
											"name": "forceRefresh",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A boolean value which forces Firebase to refresh the token.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 914,
									"character": 14
								}
							]
						},
						{
							"id": 216,
							"name": "getIdTokenResult",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 217,
									"name": "getIdTokenResult",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a firebase.auth.IdTokenResult object which contains the ID token JWT string and\nother helper properties for getting different data associated with the token as well as\nall the decoded payload claims.",
										"text": "#### Example\n\n```js\n// Force a token refresh\nconst idTokenResult = await firebase.auth().currentUser.getIdTokenResult(true);\n```\n"
									},
									"parameters": [
										{
											"id": 218,
											"name": "forceRefresh",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "boolean Force refresh regardless of token expiration.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IdTokenResult",
												"id": 117
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 930,
									"character": 20
								}
							]
						},
						{
							"id": 219,
							"name": "linkWithCredential",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 220,
									"name": "linkWithCredential",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Link the user with a 3rd party credential provider.",
										"text": "#### Example\n\n```js\nconst facebookCredential = firebase.auth.FacebookAuthProvider.credential('access token from Facebook');\nconst userCredential = await firebase.auth().currentUser.linkWithCredential(facebookCredential);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/provider-already-linked Thrown if the provider has already been linked to the user. This error is thrown even if this is not the same provider's account that is currently linked to the user."
											},
											{
												"tag": "error",
												"text": "auth/invalid-credential Thrown if the provider's credential is not valid. This can happen if it has already expired when calling link, or if it used invalid token(s). See the Firebase documentation for your provider, and make sure you pass in the correct parameters to the credential method."
											},
											{
												"tag": "error",
												"text": "auth/credential-already-in-use Thrown if the account corresponding to the credential already exists among your users, or is already linked to a Firebase User."
											},
											{
												"tag": "error",
												"text": "auth/email-already-in-use Thrown if the email corresponding to the credential already exists among your users."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if you have not enabled the provider in the Firebase Console. Go to the Firebase Console for your project, in the Auth section and the Sign in Method tab and configure the provider."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email used in a auth.EmailAuthProvider.credential is invalid."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if the password used in a auth.EmailAuthProvider.credential is not correct or when the user associated with the email does not have a password."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 221,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A created {@link auth.AuthCredential}.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 60
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 953,
									"character": 22
								}
							]
						},
						{
							"id": 222,
							"name": "reauthenticateWithCredential",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 223,
									"name": "reauthenticateWithCredential",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Re-authenticate a user with a third-party authentication provider.",
										"text": "#### Example\n\n```js\nconst facebookCredential = firebase.auth.FacebookAuthProvider.credential('access token from Facebook');\nconst userCredential = await firebase.auth().currentUser.reauthenticateWithCredential(facebookCredential);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/user-mismatch Thrown if the credential given does not correspond to the user."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if the credential given does not correspond to any existing user."
											},
											{
												"tag": "error",
												"text": "auth/invalid-credential Thrown if the provider's credential is not valid. This can happen if it has already expired when calling link, or if it used invalid token(s). See the Firebase documentation for your provider, and make sure you pass in the correct parameters to the credential method."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email used in a auth.EmailAuthProvider.credential is invalid."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if the password used in a auth.EmailAuthProvider.credential is not correct or when the user associated with the email does not have a password."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 224,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A created {@link auth.AuthCredential}.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 60
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 104
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 974,
									"character": 32
								}
							]
						},
						{
							"id": 225,
							"name": "reload",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 226,
									"name": "reload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the current user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.reload();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 985,
									"character": 10
								}
							]
						},
						{
							"id": 227,
							"name": "sendEmailVerification",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 228,
									"name": "sendEmailVerification",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a verification email to a user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n  handleCodeInApp: true,\n});\n```\n\n> This will Promise reject if the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/missing-android-pkg-name An Android package name must be provided if the Android app is required to be installed."
											},
											{
												"tag": "error",
												"text": "auth/missing-continue-uri A continue URL must be provided in the request."
											},
											{
												"tag": "error",
												"text": "auth/missing-ios-bundle-id An iOS bundle ID must be provided if an App Store ID is provided."
											},
											{
												"tag": "error",
												"text": "auth/invalid-continue-uri The continue URL provided in the request is invalid."
											},
											{
												"tag": "error",
												"text": "auth/unauthorized-continue-uri The domain of the continue URL is not whitelisted. Whitelist the domain in the Firebase console."
											}
										]
									},
									"parameters": [
										{
											"id": 229,
											"name": "actionCodeSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Any optional additional settings to be set before sending the verification email.\n"
											},
											"type": {
												"type": "reference",
												"name": "ActionCodeSettings",
												"id": 147
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1007,
									"character": 25
								}
							]
						},
						{
							"id": 230,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 231,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a JSON-serializable representation of this object.",
										"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser.toJSON();\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1018,
									"character": 10
								}
							]
						},
						{
							"id": 232,
							"name": "unlink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 233,
									"name": "unlink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unlinks a provider from a user account.",
										"text": "#### Example\n\n```js\nconst user = await firebase.auth().currentUser.unlink('facebook.com');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/no-such-provider Thrown if the user does not have this provider linked or when the provider ID given does not exist."
											}
										]
									},
									"parameters": [
										{
											"id": 234,
											"name": "providerId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "User",
												"id": 200
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1032,
									"character": 10
								}
							]
						},
						{
							"id": 235,
							"name": "updateEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 236,
									"name": "updateEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the user's email address.",
										"text": "See Firebase docs for more information on security & email validation.\n\n#### Example\n\n```js\nawait firebase.auth().currentUser.updateEmail('joe.bloggs@new-email.com');\n```\n\n> This will Promise reject if the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email used is invalid."
											},
											{
												"tag": "error",
												"text": "auth/email-already-in-use Thrown if the email is already used by another user."
											},
											{
												"tag": "error",
												"text": "auth/requires-recent-login Thrown if the user's last sign-in time does not meet the security threshold."
											}
										]
									},
									"parameters": [
										{
											"id": 237,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users new email address.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1052,
									"character": 15
								}
							]
						},
						{
							"id": 238,
							"name": "updatePassword",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 239,
									"name": "updatePassword",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the users password.",
										"text": "Important: this is a security sensitive operation that requires the user to have recently signed in.\nIf this requirement isn't met, ask the user to authenticate again and then call firebase.User#reauthenticate.\n\n#### Example\n\n```js\nawait firebase.auth().currentUser.updatePassword('654321');\n```\n\n> This will Promise reject is the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/weak-password Thrown if the password is not strong enough."
											},
											{
												"tag": "error",
												"text": "auth/requires-recent-login Thrown if the user's last sign-in time does not meet the security threshold."
											}
										]
									},
									"parameters": [
										{
											"id": 240,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users new password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1072,
									"character": 18
								}
							]
						},
						{
							"id": 241,
							"name": "updatePhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 242,
									"name": "updatePhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the user's phone number.",
										"text": "See Firebase docs for more information on security & email validation.\n\n#### Example\n\n```js\nconst snapshot = await firebase.auth().verifyPhoneNumber('+4423456789')\n .on(...); // See PhoneAuthListener - wait for successful verification\n\nconst credential = firebase.auth.PhoneAuthProvider.credential(snapshot.verificationId, snapshot.code);\n\n// Update user with new verified phone number\nawait firebase.auth().currentUser.updatePhoneNumber(credential);\n```\n\n> This will Promise reject is the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 243,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A created `PhoneAuthCredential`.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 60
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1097,
									"character": 21
								}
							]
						},
						{
							"id": 244,
							"name": "updateProfile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 245,
									"name": "updateProfile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates a user's profile data.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.updateProfile({\n  displayName: 'Alias',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 246,
											"name": "updates",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "UpdateProfile",
												"id": 127
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1110,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								201,
								202,
								203,
								204,
								205,
								206,
								207,
								208,
								209,
								210
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								211,
								213,
								216,
								219,
								222,
								225,
								227,
								230,
								232,
								235,
								238,
								241,
								244
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 837,
							"character": 23
						}
					]
				},
				{
					"id": 104,
					"name": "UserCredential",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A structure containing a User, an AuthCredential, the operationType, and any additional user\ninformation that was returned from the identity provider. operationType could be 'signIn' for\na sign-in operation, 'link' for a linking operation and 'reauthenticate' for a reauthentication operation.",
						"text": "TODO @salakar; missing credential, operationType\n"
					},
					"children": [
						{
							"id": 105,
							"name": "additionalUserInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any additional user information assigned to the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 308,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AdditionalUserInfo",
								"id": 99
							}
						},
						{
							"id": 106,
							"name": "user",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the {@link auth.User} interface of this credential."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 312,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "User",
								"id": 200
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								105,
								106
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 304,
							"character": 33
						}
					]
				},
				{
					"id": 110,
					"name": "UserInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a collection of standard profile information for a user. Can be used to expose\nprofile information returned by an identity provider, such as Google Sign-In or Facebook Login.",
						"text": "TODO @salakar: isEmailVerified\n\n#### Example\n\n```js\nconst user = firebase.auth().currentUser;\n\nuser.providerData.forEach((userInfo) => {\n  console.log('User info for provider: ', userInfo);\n});\n```\n"
					},
					"children": [
						{
							"id": 111,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the user's display name, if available."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 358,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 112,
							"name": "email",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the email address corresponding to the user's account in the specified provider, if available."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 362,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 113,
							"name": "phoneNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The phone number normalized based on the E.164 standard (e.g. +16505550101) for the current user. This is null if the user has no phone credential linked to the account."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 366,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 114,
							"name": "photoURL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns a url to the user's profile picture, if available."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 370,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 115,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the unique identifier of the provider type that this instance corresponds to."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 374,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 116,
							"name": "uid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a user identifier as specified by the authentication provider."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 378,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								111,
								112,
								113,
								114,
								115,
								116
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 354,
							"character": 27
						}
					]
				},
				{
					"id": 107,
					"name": "UserMetadata",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Holds the user metadata for the current {@link auth.User}.",
						"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser;\nconsole.log('User metadata: ', user.metadata);\n```\n"
					},
					"children": [
						{
							"id": 108,
							"name": "creationTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the timestamp at which this account was created as dictated by the server clock\nas an ISO Date string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 330,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 109,
							"name": "lastSignInTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the last signin timestamp as dictated by the server clock as an ISO Date string.\nThis is only accurate up to a granularity of 2 minutes for consecutive sign-in attempts."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 335,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								108,
								109
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 325,
							"character": 31
						}
					]
				},
				{
					"id": 329,
					"name": "AuthListenerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An auth listener callback function for {@link auth#onAuthStateChanged}.",
						"text": "#### Example\n\n```js\nfunction listener(user) {\n  if (user) {\n    // Signed in\n  } else {\n    // Signed out\n  }\n}\n\nfirebase.auth().onAuthStateChanged(listener);\n```\n"
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 614,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 330,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 331,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 332,
											"name": "user",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "User",
														"id": 200
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 614,
									"character": 36
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						247
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						142,
						139,
						147,
						135,
						145,
						99,
						60,
						64,
						194,
						130,
						71,
						117,
						157,
						162,
						152,
						85,
						90,
						127,
						200,
						104,
						110,
						107
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						329
					]
				}
			],
			"sources": [
				{
					"fileName": "auth/lib/index.d.ts",
					"line": 62,
					"character": 21
				}
			]
		},
		{
			"id": 340,
			"name": "Config",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Remote Config package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `config` package:\n\n```js\nimport { firebase } from '@react-native-firebase/config';\n\n// firebase.config().X\n```\n\n#### Example 2\n\nUsing the default export from the `config` package:\n\n```js\nimport config from '@react-native-firebase/config';\n\n// config().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/config';\n\n// firebase.config().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "config\n"
					}
				]
			},
			"children": [
				{
					"id": 357,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Remote Config service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Remote Config service for the default app:\n\n```js\nconst defaultAppRemoteConfig = firebase.config();\n```\n"
					},
					"children": [
						{
							"id": 386,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 358,
							"name": "activateFetched",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 359,
									"name": "activateFetched",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves fetched data to the apps active config.\nResolves with a boolean value of whether the fetched config was moved successfully.",
										"text": "#### Example\n\n```js\n// Fetch values\nawait firebase.config().fetch();\nconst activated = await firebase.config().activateFetched();\n\nif (activated) {\n console.log('Fetched values successfully activated.');\n} else {\n  console.log('Fetched values failed to activate.');\n}\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 210,
									"character": 19
								}
							]
						},
						{
							"id": 360,
							"name": "fetch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 361,
									"name": "fetch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches the remote config data from Firebase, as defined in the dashboard. If duration is defined (seconds), data will be locally cached for this duration.",
										"text": "#### Example\n\n```js\n// Fetch and cache for 5 minutes\nawait firebase.config().fetch(300);\n```\n"
									},
									"parameters": [
										{
											"id": 362,
											"name": "cacheExpirationSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Duration in seconds to cache the data for. To skip cache, use a duration of 0.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 224,
									"character": 9
								}
							]
						},
						{
							"id": 363,
							"name": "fetchAndActivate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 364,
									"name": "fetchAndActivate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches the remote config data from Firebase, as defined in the dashboard. If duration is defined (seconds), data will be locally cached for this duration.",
										"text": "Once fetching is complete this method immediately calls activateFetched and returns a boolean value of the activation status.\n\n#### Example\n\n```js\n// Fetch, cache for 5 minutes and activate\nconst activated = await firebase.config().fetchAndActivate(300);\n\nif (activated) {\n console.log('Fetched values successfully activated.');\n} else {\n  console.log('Fetched values failed to activate.');\n}\n```\n"
									},
									"parameters": [
										{
											"id": 365,
											"name": "cacheExpirationSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Duration in seconds to cache the data for. To skip cache use a duration of 0.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 246,
									"character": 20
								}
							]
						},
						{
							"id": 366,
							"name": "getConfigSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 367,
									"name": "getConfigSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve the configuration settings and status for Remote Config.",
										"text": "### Example\n\n```js\nconst settings = await firebase.config().getConfigSettings();\nconsole.log('Developer mode enabled: ', settings.isDeveloperModeEnabled);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ConfigSettingsRead",
												"id": 350
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 258,
									"character": 21
								}
							]
						},
						{
							"id": 368,
							"name": "getKeysByPrefix",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 369,
									"name": "getKeysByPrefix",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all keys matching the prefix as an array. If no prefix is defined all keys are returned.",
										"text": "#### Example\n\n```js\n const keys = await firebase.config().getKeysByPrefix('feature_');\n```\n"
									},
									"parameters": [
										{
											"id": 370,
											"name": "prefix",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A prefix value to match keys by. Leave blank to retrieve all keys.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 271,
									"character": 19
								}
							]
						},
						{
							"id": 374,
							"name": "getValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 375,
									"name": "getValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a ConfigValue by key.",
										"text": "#### Example\n\n```js\nconst configValue = await firebase.config().getValue('experiment');\nconsole.log('Source: ', configValue.source);\nconsole.log('Value: ', configValue.value);\n```\n"
									},
									"parameters": [
										{
											"id": 376,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A key used to retrieve a specific value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ConfigValue",
												"id": 342
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 304,
									"character": 12
								}
							]
						},
						{
							"id": 371,
							"name": "getValuesByKeysPrefix",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 372,
									"name": "getValuesByKeysPrefix",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all config values for the keys matching the prefix provided. In no prefix is provided all values are returned.",
										"text": "#### Example\n\n```js\nconst values = await firebase.config().getValuesByKeysPrefix('feature_');\n\nvalues.forEach(($) => {\n  console.log('Source: ', $.source);\n  console.log('Value: ', $.value);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 373,
											"name": "prefix",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A prefix value to match values by. Leave blank to retrieve all values.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ConfigValues",
												"id": 345
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 289,
									"character": 25
								}
							]
						},
						{
							"id": 377,
							"name": "setConfigSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 378,
									"name": "setConfigSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the Remote Config settings, specifically the `isDeveloperModeEnabled` flag.",
										"text": "#### Example\n\n```js\nawait firebase.config().setConfigSettings({\n  isDeveloperModeEnabled: __DEV__,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 379,
											"name": "configSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A ConfigSettingsWrite instance used to set Remote Config settings.\n"
											},
											"type": {
												"type": "reference",
												"name": "ConfigSettingsWrite",
												"id": 348
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ConfigSettingsRead",
												"id": 350
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 319,
									"character": 21
								}
							]
						},
						{
							"id": 380,
							"name": "setDefaults",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 381,
									"name": "setDefaults",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets default values for the app to use when accessing values.\nAny data fetched and activated will override any default values. Any values in the defaults but not on Firebase will be untouched.",
										"text": "#### Example\n\n```js\nawait firebase.config().setDefaults({\n  experiment_enabled: false,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 382,
											"name": "defaults",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A ConfigDefaults instance used to set default values.\n"
											},
											"type": {
												"type": "reference",
												"name": "ConfigDefaults",
												"id": 354
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 335,
									"character": 15
								}
							]
						},
						{
							"id": 383,
							"name": "setDefaultsFromResource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 384,
									"name": "setDefaultsFromResource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the default values from a resource file.\nOn iOS this is a plist file and on Android this is an XML defaultsMap file.",
										"text": "```js\n // TODO @ehesp\n```\n"
									},
									"parameters": [
										{
											"id": 385,
											"name": "resourceName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The plist/xml file name with no extension.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 347,
									"character": 27
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								386
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								358,
								360,
								363,
								366,
								368,
								374,
								371,
								377,
								380,
								383
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 191,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 354,
					"name": "ConfigDefaults",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing a Config Defaults object.",
						"text": "#### Example\n\n```js\nawait firebase.config().setDefaults({\n  experiment_enabled: false,\n});\n```\n"
					},
					"indexSignature": [
						{
							"id": 355,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "An Interface representing a Config Defaults object.",
								"text": "#### Example\n\n```js\nawait firebase.config().setDefaults({\n  experiment_enabled: false,\n});\n```\n"
							},
							"parameters": [
								{
									"id": 356,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 174,
							"character": 33
						}
					]
				},
				{
					"id": 350,
					"name": "ConfigSettingsRead",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing readable config settings.",
						"text": "#### Example\n\n```js\nconst settings = await firebase.config().getConfigSettings();\nconsole.log('Last fetched time: ', settings.lastFetchTime);\nconsole.log('Developer mode enabled': settings.isDeveloperModeEnabled);\nconsole.log('Last fetch status: ', settings.lastFetchStatus);\n```\n"
					},
					"children": [
						{
							"id": 352,
							"name": "isDeveloperModeEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether developer mode is enabled. This is set manually via {@link config#setConfigSettings}"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 156,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 353,
							"name": "lastFetchStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The status of the latest Remote Config fetch action."
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 160,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "success"
									},
									{
										"type": "stringLiteral",
										"value": "failure"
									},
									{
										"type": "stringLiteral",
										"value": "no_fetch_yet"
									},
									{
										"type": "stringLiteral",
										"value": "throttled"
									}
								]
							}
						},
						{
							"id": 351,
							"name": "lastFetchTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of milliseconds since the last Remote Config fetch was performed."
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 152,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								352,
								353,
								351
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 148,
							"character": 37
						}
					]
				},
				{
					"id": 348,
					"name": "ConfigSettingsWrite",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing settable config settings.",
						"text": "#### Example\n\nThe example below makes use of the React Native `__DEV__` global JavaScript variable which\nis exposed.\n\n```js\nawait firebase.config().setConfigSettings({\n  isDeveloperModeEnabled: __DEV__,\n});\n```\n"
					},
					"children": [
						{
							"id": 349,
							"name": "isDeveloperModeEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If enabled, default behaviour such as caching is disabled for a better debugging\nexperience."
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 133,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								349
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 128,
							"character": 38
						}
					]
				},
				{
					"id": 342,
					"name": "ConfigValue",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing a Remote Config value."
					},
					"children": [
						{
							"id": 343,
							"name": "source",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Where the value was retrieved from.",
								"text": "- `remote`:  If the value was retrieved from the server.\n- `default`: If the value was set as a default value.\n- `static`: If no value was found and a static default value was returned instead.\n\n#### Example\n\n```js\nconst configValue = await firebase.config().getValue('beta_enabled');\nconsole.log('Value source: ', configValue.source);\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 81,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "remote"
									},
									{
										"type": "stringLiteral",
										"value": "default"
									},
									{
										"type": "stringLiteral",
										"value": "static"
									}
								]
							}
						},
						{
							"id": 344,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The returned value.",
								"text": "#### Example\n\n```js\nconst configValue = await firebase.config().getValue('beta_enabled');\nconsole.log('Value: ', configValue.value);\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 93,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								343,
								344
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 66,
							"character": 30
						}
					]
				},
				{
					"id": 345,
					"name": "ConfigValues",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing multiple Config Values.",
						"text": "#### Example\n\n```js\nconst values = await firebase.config().getValuesByKeysPrefix('feature_');\n\nvalues.forEach(($) => {\n  console.log('Source: ', $.source);\n  console.log('Value: ', $.value);\n});\n```\n"
					},
					"indexSignature": [
						{
							"id": 346,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "An Interface representing multiple Config Values.",
								"text": "#### Example\n\n```js\nconst values = await firebase.config().getValuesByKeysPrefix('feature_');\n\nvalues.forEach(($) => {\n  console.log('Source: ', $.source);\n  console.log('Value: ', $.value);\n});\n```\n"
							},
							"parameters": [
								{
									"id": 347,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ConfigValue",
								"id": 342
							}
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 110,
							"character": 31
						}
					]
				},
				{
					"id": 341,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						357
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						354,
						350,
						348,
						342,
						345,
						341
					]
				}
			],
			"sources": [
				{
					"fileName": "config/lib/index.d.ts",
					"line": 60,
					"character": 23
				}
			]
		},
		{
			"id": 394,
			"name": "Crashlytics",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Crashlytics package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `crashlytics` package:\n\n```js\nimport { firebase } from '@react-native-firebase/crashlytics';\n\n// firebase.crashlytics().X\n```\n\n#### Example 2\n\nUsing the default export from the `crashlytics` package:\n\n```js\nimport crashlytics from '@react-native-firebase/crashlytics';\n\n// crashlytics().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/crashlytics';\n\n// firebase.crashlytics().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "crashlytics\n"
					}
				]
			},
			"children": [
				{
					"id": 396,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Crashlytics service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Crashlytics service for the default app:\n\n```js\nconst defaultAppCrashlytics = firebase.crashlytics();\n```\n"
					},
					"children": [
						{
							"id": 428,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 397,
							"name": "isCrashlyticsCollectionEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether Crashlytics reporting is enabled.",
								"text": "#### Example\n\n```js\nconst isEnabled = firebase.crashlytics().isCrashlyticsCollectionEnabled;\n```\n\n"
							},
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 87,
									"character": 34
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						},
						{
							"id": 398,
							"name": "crash",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 399,
									"name": "crash",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cause your app to crash for testing purposes.",
										"text": "#### Example\n\n```js\nfirebase.crashlytics().crash();\n```\n\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 99,
									"character": 9
								}
							]
						},
						{
							"id": 400,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 401,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Log a message that will appear in any subsequent Crash or Non-fatal error reports.",
										"text": "#### Example\n\n```js\nfirebase.crashlytics().logEvent('Testing a crash');\nfirebase.crashlytics().crash();\n```\n"
									},
									"parameters": [
										{
											"id": 402,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 113,
									"character": 7
								}
							]
						},
						{
							"id": 403,
							"name": "recordError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 404,
									"name": "recordError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Record a JavaScript Error.",
										"text": "The JavaScript stack trace is converted into a mock native iOS or Android exception before submission.\n\n#### Example\n\n```js\nfirebase.crashlytics().recordError(\n new Error('An error was caught')\n);\n```\n"
									},
									"parameters": [
										{
											"id": 405,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Expects an instance of Error; e.g. classes that extend Error will also be supported.\n"
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 130,
									"character": 15
								}
							]
						},
						{
							"id": 415,
							"name": "setAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 416,
									"name": "setAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a string value to be associated with the given attribute name which will be visible in the Firebase Crashlytics console.",
										"text": "#### Example\n\n```js\nawait firebase.crashlytics().setAttribute('role', 'admin');\n```\n"
									},
									"parameters": [
										{
											"id": 417,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the attribute to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 418,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string value for the given attribute.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 195,
									"character": 16
								}
							]
						},
						{
							"id": 419,
							"name": "setAttributes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 420,
									"name": "setAttributes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Like `setAttribute` but for multiple attributes.",
										"text": "#### Example\n\n```js\nawait firebase.crashlytics().setAttributes({\n  role: 'admin',\n  followers: '13',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 421,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object of key/value attribute name and values.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 422,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 423,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 424,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "crashlytics/lib/index.d.ts",
															"line": 211,
															"character": 29
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 211,
									"character": 17
								}
							]
						},
						{
							"id": 425,
							"name": "setCrashlyticsCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 426,
									"name": "setCrashlyticsCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enable/disable Crashlytics reporting.",
										"text": "Use this for opt-in first user data collection flows combined with `firebase.json` settings to disable auto collection.\n\n#### Example\n\n```js\n// Disable crash reporting\nawait firebase.crashlytics().setCrashlyticsCollectionEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 427,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A boolean value representing whether to enable Crashlytics error collection.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 227,
									"character": 35
								}
							]
						},
						{
							"id": 412,
							"name": "setUserEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 413,
									"name": "setUserEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optionally specify a user email which will be visible in the Firebase Crashlytics console.",
										"text": "If you choose to collect contact information it is strongly recommend that you disclose this in your apps privacy policy.\n\n#### Example\n\n```js\nfirebase.crashlytics().setUserEmail('user@gmail.com');\n```\n"
									},
									"parameters": [
										{
											"id": 414,
											"name": "userEmail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A users email address.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 181,
									"character": 16
								}
							]
						},
						{
							"id": 406,
							"name": "setUserId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 407,
									"name": "setUserId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Specify a user identifier which will be visible in the Firebase Crashlytics console.",
										"text": "It is recommended for privacy purposes that this value be a value that's meaningless to a third-party\nobserver; such as an arbitrary string that ties an end-user to a record in your system e.g. a database record id.\n\n#### Example\n\n```js\n// Custom user id\nawait firebase.crashlytics().setUserId('123456789');\n// Firebase auth uid\nawait firebase.crashlytics().setUserId(\n firebase.auth().currentUser.uid\n);\n```\n"
									},
									"parameters": [
										{
											"id": 408,
											"name": "userId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An arbitrary string that ties an end-user to a record in your system e.g. a database record id.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 151,
									"character": 13
								}
							]
						},
						{
							"id": 409,
							"name": "setUserName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 410,
									"name": "setUserName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optionally specify a user name which will be visible in the Firebase Crashlytics console.",
										"text": "If you choose to collect contact information it is strongly recommend that you disclose this in your apps privacy policy.\n\n#### Example\n\n```js\nawait firebase.crashlytics().setUserName('Alias');\n```\n"
									},
									"parameters": [
										{
											"id": 411,
											"name": "userName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string representing an end-user's name or app username\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 166,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								428,
								397
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								398,
								400,
								403,
								415,
								419,
								425,
								412,
								406,
								409
							]
						}
					],
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 76,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 395,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						396
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						395
					]
				}
			],
			"sources": [
				{
					"fileName": "crashlytics/lib/index.d.ts",
					"line": 60,
					"character": 28
				}
			]
		},
		{
			"id": 436,
			"name": "Fiam",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase In-App Messaging package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `fiam` package:\n\n```js\nimport { firebase } from '@react-native-firebase/fiam';\n\n// firebase.fiam().X\n```\n\n#### Example 2\n\nUsing the default export from the `fiam` package:\n\n```js\nimport fiam from '@react-native-firebase/fiam';\n\n// fiam().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/fiam';\n\n// firebase.fiam().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "fiam\n"
					}
				]
			},
			"children": [
				{
					"id": 438,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase In-App Messaging service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the  In-App Messaging service for the default app:\n\n```js\nconst defaultAppFiam = firebase.fiam();\n```\n"
					},
					"children": [
						{
							"id": 447,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 443,
							"name": "isAutomaticDataCollectionEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Determines whether automatic data collection is enabled or not.",
								"text": "#### Example\n\n```js\nconst isDataCollectionEnabled = firebase.fiam().isAutomaticDataCollectionEnabled;\n```\n"
							},
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 114,
									"character": 36
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 439,
							"name": "isMessagesDisplaySuppressed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Determines whether messages are suppressed or not.",
								"text": "#### Example\n\n```js\nconst isSuppressed = firebase.fiam().isMessagesDisplaySuppressed;\n```\n"
							},
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 86,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 444,
							"name": "setAutomaticDataCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 445,
									"name": "setAutomaticDataCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enable or disable automatic data collection for Firebase In-App Messaging.",
										"text": "When enabled, generates a registration token on app startup if there is no valid one and generates a new token\nwhen it is deleted (which prevents deleteInstanceId() from stopping the periodic sending of data).\n\nThis setting is persisted across app restarts and overrides the setting specified in your manifest/plist file.\n\n#### Example\n\n```js\n// Disable data collection\nfirebase.fiam().setAutomaticDataCollectionEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 446,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Whether automatic data collection is enabled.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 133,
									"character": 37
								}
							]
						},
						{
							"id": 440,
							"name": "setMessagesDisplaySuppressed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 441,
									"name": "setMessagesDisplaySuppressed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enable or disable suppression of Firebase In App Messaging messages.",
										"text": "When enabled, no in app messages will be rendered until either you disable suppression, or the app restarts.\nThis state is not persisted between app restarts.\n\n#### Example\n\n```js\n// Suppress messages\nawait firebase.fiam().setMessagesDisplaySuppressed(true);\n```\n"
									},
									"parameters": [
										{
											"id": 442,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Whether messages should be suppressed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 103,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								447,
								443,
								439
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								444,
								440
							]
						}
					],
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 76,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 437,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						438
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						437
					]
				}
			],
			"sources": [
				{
					"fileName": "fiam/lib/index.d.ts",
					"line": 60,
					"character": 21
				}
			]
		},
		{
			"id": 455,
			"name": "Firestore",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Cloud Firestore package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `firestore` package:\n\n```js\nimport { firebase } from '@react-native-firebase/firestore';\n\n// firebase.firestore().X\n```\n\n#### Example 2\n\nUsing the default export from the `firestore` package:\n\n```js\nimport firestore from '@react-native-firebase/firestore';\n\n// firestore().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/firestore';\n\n// firebase.firestore().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "firestore\n"
					}
				]
			},
			"children": [
				{
					"id": 457,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Cloud Firestore service is available for the default app or a given app.",
						"text": "#### Example 1\n\nGet the firestore instance for the **default app**:\n\n```js\nconst firestoreForDefaultApp = firebase.firestore();\n```\n\n#### Example 2\n\nGet the firestore instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst firestoreForOtherApp = firebase.firestore(otherApp);\n```\n\n"
					},
					"children": [
						{
							"id": 458,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								458
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 84,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 456,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						457
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						456
					]
				}
			],
			"sources": [
				{
					"fileName": "firestore/lib/index.d.ts",
					"line": 60,
					"character": 26
				}
			]
		},
		{
			"id": 466,
			"name": "Functions",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Cloud Functions package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `functions` package:\n\n```js\nimport { firebase } from '@react-native-firebase/functions';\n\n// firebase.functions().X\n```\n\n#### Example 2\n\nUsing the default export from the `functions` package:\n\n```js\nimport functions from '@react-native-firebase/functions';\n\n// functions().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/functions';\n\n// firebase.functions().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "functions\n"
					}
				]
			},
			"children": [
				{
					"id": 499,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Cloud Functions service is available for the default app, a given app or a specified region.",
						"text": "> The default functions region for all apps is `us-central1`.\n\n#### Example 1\n\nGet the functions instance for the **default app**:\n\n```js\nconst functionsForDefaultApp = firebase.functions();\n```\n\n#### Example 2\n\nGet the functions instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst functionsForOtherApp = firebase.functions(otherApp);\n```\n\n#### Example 3\n\nGet the functions instance for a **specific functions region**:\n\n```js\nconst defaultApp = firebase.app();\nconst functionsForRegion = defaultApp.functions('europe-west1');\n\nconst otherApp = firebase.app('otherApp');\nconst functionsForOtherAppRegion = otherApp.functions('europe-west1');\n```\n\n"
					},
					"children": [
						{
							"id": 506,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 500,
							"name": "httpsCallable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 501,
									"name": "httpsCallable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an `HttpsCallable` instance that refers to the function with the given\nname.",
										"text": "#### Example\n\n```js\nconst instance = firebase.functions().httpsCallable('order');\n\ntry {\n const response = await instance({\n   id: '12345',\n });\n} catch (e) {\n console.error(e);\n}\n```\n",
										"returns": "The `HttpsCallable` instance.\n"
									},
									"parameters": [
										{
											"id": 502,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the https callable function."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpsCallable",
										"id": 469
									}
								}
							],
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 318,
									"character": 17
								}
							]
						},
						{
							"id": 503,
							"name": "useFunctionsEmulator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 504,
									"name": "useFunctionsEmulator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Changes this instance to point to a Cloud Functions emulator running\nlocally.",
										"text": "See https://firebase.google.com/docs/functions/local-emulator\n\n#### Example\n\n```js\nif (__DEV__) {\n  firebase.functions().useFunctionsEmulator('http://10.0.0.8:1337');\n}\n```\n"
									},
									"parameters": [
										{
											"id": 505,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The origin string of the local emulator started via firebase tools\n\"http://10.0.0.8:1337\".\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 337,
									"character": 24
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								506
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								500,
								503
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 296,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 469,
					"name": "HttpsCallable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An HttpsCallable is a reference to a \"callable\" http trigger in\nGoogle Cloud Functions.",
						"text": "#### Example\n\n```js\n// Create a HttpsCallable instance\nconst instance = firebase.functions().httpsCallable('order');\n\ntry {\n const response = await instance({\n   id: '12345',\n });\n} catch (e) {\n console.error(e);\n}\n```\n"
					},
					"signatures": [
						{
							"id": 470,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An HttpsCallable is a reference to a \"callable\" http trigger in\nGoogle Cloud Functions.",
								"text": "#### Example\n\n```js\n// Create a HttpsCallable instance\nconst instance = firebase.functions().httpsCallable('order');\n\ntry {\n const response = await instance({\n   id: '12345',\n });\n} catch (e) {\n console.error(e);\n}\n```\n"
							},
							"parameters": [
								{
									"id": 471,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HttpsCallableResult",
										"id": 467
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 146,
							"character": 32
						}
					]
				},
				{
					"id": 467,
					"name": "HttpsCallableResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An HttpsCallableResult wraps a single result from a function call."
					},
					"children": [
						{
							"id": 468,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 124,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								468
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 123,
							"character": 38
						}
					]
				},
				{
					"id": 472,
					"name": "HttpsError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An HttpsError wraps a single error from a function call.",
						"text": "#### Example\n\n```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n  console.log('Message', httpsError.message);\n\n  // Check code\n  if (httpsError.code === firebase.functions.HttpsErrorCode.NOT_FOUND) {\n    console.error('Functions endpoint \"order\" not found');\n  }\n}\n```\n"
					},
					"children": [
						{
							"id": 478,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "D:/Code/react-native-firebase/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						},
						{
							"id": 473,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A standard error code that will be returned to the client. This also\ndetermines the HTTP status code of the response, as defined in code.proto.",
								"text": "#### Example\n\n```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n  console.error(httpsError.code);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 183,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionsErrorCode",
								"id": 507
							}
						},
						{
							"id": 474,
							"name": "details",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Extra data to be converted to JSON and included in the error response.",
								"text": "```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n  if (httpsError.details) {\n    console.error(httpsError.details);\n  }\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 197,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 476,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "D:/Code/react-native-firebase/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 964,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 475,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "D:/Code/react-native-firebase/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 963,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 477,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "D:/Code/react-native-firebase/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 965,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								478,
								473,
								474,
								476,
								475,
								477
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 168,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 479,
					"name": "HttpsErrorCode",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The HttpsErrorCode interface provides access to all FunctionsErrorCode\ntype aliases.",
						"text": "#### Example\n\n```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n switch(httpsError.code) {\n   case firebase.functions.HttpsErrorCode.NOT_FOUND:\n     console.error('Functions endpoint not found');\n     break;\n   case firebase.functions.HttpsErrorCode.CANCELLED:\n     console.error('The operation was cancelled');\n     break;\n   default:\n     console.error('An error occurred');\n     break;\n }\n}\n```\n"
					},
					"children": [
						{
							"id": 491,
							"name": "ABORTED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 236,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "aborted"
							}
						},
						{
							"id": 486,
							"name": "ALREADY_EXISTS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 231,
									"character": 18
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "already-exists"
							}
						},
						{
							"id": 481,
							"name": "CANCELLED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 226,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "cancelled"
							}
						},
						{
							"id": 496,
							"name": "DATA_LOSS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 241,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "data-loss"
							}
						},
						{
							"id": 484,
							"name": "DEADLINE_EXCEEDED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 229,
									"character": 21
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "deadline-exceeded"
							}
						},
						{
							"id": 490,
							"name": "FAILED_PRECONDITION",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 235,
									"character": 23
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "failed-precondition"
							}
						},
						{
							"id": 494,
							"name": "INTERNAL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 239,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "internal"
							}
						},
						{
							"id": 483,
							"name": "INVALID_ARGUMENT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 228,
									"character": 20
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "invalid-argument"
							}
						},
						{
							"id": 485,
							"name": "NOT_FOUND",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 230,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "not-found"
							}
						},
						{
							"id": 480,
							"name": "OK",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 225,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "ok"
							}
						},
						{
							"id": 492,
							"name": "OUT_OF_RANGE",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 237,
									"character": 16
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "out-of-range"
							}
						},
						{
							"id": 487,
							"name": "PERMISSION_DENIED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 232,
									"character": 21
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "permission-denied"
							}
						},
						{
							"id": 489,
							"name": "RESOURCE_EXHAUSTED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 234,
									"character": 22
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "resource-exhausted"
							}
						},
						{
							"id": 488,
							"name": "UNAUTHENTICATED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 233,
									"character": 19
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unauthenticated"
							}
						},
						{
							"id": 495,
							"name": "UNAVAILABLE",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 240,
									"character": 15
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unavailable"
							}
						},
						{
							"id": 493,
							"name": "UNIMPLEMENTED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 238,
									"character": 17
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unimplemented"
							}
						},
						{
							"id": 482,
							"name": "UNKNOWN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 227,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								491,
								486,
								481,
								496,
								484,
								490,
								494,
								483,
								485,
								480,
								492,
								487,
								489,
								488,
								495,
								493,
								482
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 224,
							"character": 33
						}
					]
				},
				{
					"id": 497,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "firebase.functions.X"
					},
					"children": [
						{
							"id": 498,
							"name": "HttpsErrorCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Uppercase + underscored variables of {@link functions.FunctionsErrorCode}",
								"text": "#### Example\n\n```js\nfirebase.functions.HttpsErrorCode.OK;\nfirebase.functions.HttpsErrorCode.NOT_FOUND;\n```\n"
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 258,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "HttpsErrorCode",
								"id": 479
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								498
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 247,
							"character": 26
						}
					]
				},
				{
					"id": 507,
					"name": "FunctionsErrorCode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The set of Firebase Functions status codes.",
						"tags": [
							{
								"tag": "note",
								"text": "\nThe codes are the same at the ones exposed by [gRPC](https://github.com/grpc/grpc/blob/master/doc/statuscodes.md).\n\nPossible values:\n- `cancelled`: The operation was cancelled (typically by the caller).\n- `unknown`: Unknown error or an error from a different error domain.\n- `invalid-argument`: Client specified an invalid argument. Note that this\n  differs from `failed-precondition`. `invalid-argument` indicates\n  arguments that are problematic regardless of the state of the system\n  (e.g. an invalid field name).\n- `deadline-exceeded`: Deadline expired before operation could complete.\n  For operations that change the state of the system, this error may be\n  returned even if the operation has completed successfully. For example,\n  a successful response from a server could have been delayed long enough\n  for the deadline to expire.\n- `not-found`: Some requested document was not found.\n- `already-exists`: Some document that we attempted to create already\n  exists.\n- `permission-denied`: The caller does not have permission to execute the\n  specified operation.\n- `resource-exhausted`: Some resource has been exhausted, perhaps a\n  per-user quota, or perhaps the entire file system is out of space.\n- `failed-precondition`: Operation was rejected because the system is not\n  in a state required for the operation's execution.\n- `aborted`: The operation was aborted, typically due to a concurrency\n  issue like transaction aborts, etc.\n- `out-of-range`: Operation was attempted past the valid range.\n- `unimplemented`: Operation is not implemented or not supported/enabled.\n- `internal`: Internal errors. Means some invariants expected by\n  underlying system has been broken. If you see one of these errors,\n  something is very broken.\n- `unavailable`: The service is currently unavailable. This is most likely\n  a transient condition and may be corrected by retrying with a backoff.\n- `data-loss`: Unrecoverable data loss or corruption.\n- `unauthenticated`: The request does not have valid authentication\n  credentials for the operation.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 101,
							"character": 32
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "ok"
							},
							{
								"type": "stringLiteral",
								"value": "cancelled"
							},
							{
								"type": "stringLiteral",
								"value": "unknown"
							},
							{
								"type": "stringLiteral",
								"value": "invalid-argument"
							},
							{
								"type": "stringLiteral",
								"value": "deadline-exceeded"
							},
							{
								"type": "stringLiteral",
								"value": "not-found"
							},
							{
								"type": "stringLiteral",
								"value": "already-exists"
							},
							{
								"type": "stringLiteral",
								"value": "permission-denied"
							},
							{
								"type": "stringLiteral",
								"value": "resource-exhausted"
							},
							{
								"type": "stringLiteral",
								"value": "failed-precondition"
							},
							{
								"type": "stringLiteral",
								"value": "aborted"
							},
							{
								"type": "stringLiteral",
								"value": "out-of-range"
							},
							{
								"type": "stringLiteral",
								"value": "unimplemented"
							},
							{
								"type": "stringLiteral",
								"value": "internal"
							},
							{
								"type": "stringLiteral",
								"value": "unavailable"
							},
							{
								"type": "stringLiteral",
								"value": "data-loss"
							},
							{
								"type": "stringLiteral",
								"value": "unauthenticated"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						499
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						469,
						467,
						472,
						479,
						497
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						507
					]
				}
			],
			"sources": [
				{
					"fileName": "functions/lib/index.d.ts",
					"line": 60,
					"character": 26
				}
			]
		},
		{
			"id": 516,
			"name": "Iid",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Instance ID package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `iid` package:\n\n```js\nimport { firebase } from '@react-native-firebase/iid';\n\n// firebase.iid().X\n```\n\n#### Example 2\n\nUsing the default export from the `iid` package:\n\n```js\nimport iid from '@react-native-firebase/iid';\n\n// iid().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/iid';\n\n// firebase.iid().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "iid\n"
					}
				]
			},
			"children": [
				{
					"id": 518,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Instance ID service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Instance ID service for the default app:\n\n```js\nconst defaultAppIid = firebase.iid();\n```\n"
					},
					"children": [
						{
							"id": 531,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 521,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 522,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Delete the Instance ID and all data associated with it. This stops the periodic sending of data to the Firebase\nbackend that was started when the Instance ID was generated.",
										"text": "A new Instance ID is asynchronously generated unless auto initialisation is turned off.\n\n#### Example\n\n```js\nawait firebase.iid().delete();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 103,
									"character": 10
								}
							]
						},
						{
							"id": 527,
							"name": "deleteToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 528,
									"name": "deleteToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Revokes access to a scope for an entity previously authorized by `getToken()`.",
										"text": "#### Example\n\n```js\nawait firebase.iid().deleteToken(firebase.app().options.storageBucket, '*');\n```\n"
									},
									"parameters": [
										{
											"id": 529,
											"name": "authorizedEntity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Entity authorized by the token. Defaults to the apps' `messagingSenderId` option."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 530,
											"name": "scope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Action authorized for authorizedEntity. Defaults to '*'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 131,
									"character": 15
								}
							]
						},
						{
							"id": 519,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 520,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a identifier that uniquely identifies the app instance.",
										"text": "Once an Instance ID is generated, Firebase periodically sends information about the application\nand the device it's running on to the Firebase backend. To stop this, see `delete()`.\n\n#### Example\n\n```js\nconst id = firebase.iid().get();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 89,
									"character": 7
								}
							]
						},
						{
							"id": 523,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 524,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a token that authorizes an Entity to perform an action on behalf of the application.",
										"text": "#### Example\n\n```js\nconst token = await firebase.iid().getToken(firebase.app().options.storageBucket, '*');\n```\n"
									},
									"parameters": [
										{
											"id": 525,
											"name": "authorizedEntity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Entity authorized by the token. Defaults to the apps `messagingSenderId` option."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 526,
											"name": "scope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Action authorized for authorizedEntity. Defaults to '*'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 117,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								531
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								521,
								527,
								519,
								523
							]
						}
					],
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 76,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 517,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						518
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						517
					]
				}
			],
			"sources": [
				{
					"fileName": "iid/lib/index.d.ts",
					"line": 60,
					"character": 20
				}
			]
		},
		{
			"id": 539,
			"name": "Invites",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Invites package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `invites` package:\n\n```js\nimport { firebase } from '@react-native-firebase/invites';\n\n// firebase.invites().X\n```\n\n#### Example 2\n\nUsing the default export from the `invites` package:\n\n```js\nimport invites from '@react-native-firebase/invites';\n\n// invites().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/invites';\n\n// firebase.invites().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "invites\n"
					}
				]
			},
			"children": [
				{
					"id": 545,
					"name": "AndroidInviteBuilder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Android Invite representation. Instance is returned from {@link links.InviteBuilder#android}."
					},
					"children": [
						{
							"id": 546,
							"name": "setAdditionalReferralParameters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 547,
									"name": "setAdditionalReferralParameters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds query parameters to the play store referral URL when the app needs additional referral parameters for other\napplication component referrals. These parameters are added to the referral URL sent from the play store and are\navailable to be processed by other application components, for example Google Analytics. The parameters are set\nas name, value pairs that will be set as query parameter name and value on the referral URL.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setAdditionalReferralParameters({\n  screen: 'Profile',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 548,
											"name": "additionalReferralParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Referral parameters defined as string name value pairs.\n"
											},
											"type": {
												"type": "reference",
												"name": "AdditionalReferralParameters",
												"id": 542
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 108,
									"character": 35
								}
							]
						},
						{
							"id": 549,
							"name": "setEmailHtmlContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 550,
									"name": "setEmailHtmlContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the HTML-formatted (UTF-8 encoded, no JavaScript) content for invites sent through email. If set, this will\nbe sent instead of the default email.",
										"text": "emailHtmlContent must be valid HTML for standard email processing. The pattern `%%APPINVITE_LINK_PLACEHOLDER%%`\nshould be embedded in your htmlContent and will be replaced with the invitation URL.\nThis url is a link that will launch the app if already installed or take the user to the appropriate app store\nif not. In both cases the deep link will be available if provided using setDeepLink(Uri).\n",
										"tags": [
											{
												"tag": "warning",
												"text": "Cannot be used with {@link invites.InviteBuilder#setCallToActionText}\n\n#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setEmailHtmlContent('<p><strong>Rich HTML content</strong></p>');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 551,
											"name": "emailHtmlContent",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The html-formatted content for the email.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 132,
									"character": 23
								}
							]
						},
						{
							"id": 552,
							"name": "setEmailSubject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 553,
									"name": "setEmailSubject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the subject for invites sent by email.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.emailSubject(`Hey ${user.name}, joint my app!`);\n```\n"
									},
									"parameters": [
										{
											"id": 554,
											"name": "emailSubject",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The subject for the email.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 146,
									"character": 19
								}
							]
						},
						{
							"id": 555,
							"name": "setGoogleAnalyticsTrackingId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 556,
									"name": "setGoogleAnalyticsTrackingId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the Google Analytics Tracking id. The tracking id should be created for the calling application under\nGoogle Analytics. See more about how to get a tracking id . The tracking id is recommended so that invitations\nsent from the calling application are available in Google Analytics.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setGoogleAnalyticsTrackingId('UA-1234-5');\n```\n"
									},
									"parameters": [
										{
											"id": 557,
											"name": "gaTrackingId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "String of the form UA-xxxx-y\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 162,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								546,
								549,
								552,
								555
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 90,
							"character": 35
						}
					]
				},
				{
					"id": 558,
					"name": "InviteBuilder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Invite builder representation returned from {@link invites#createInvitation}."
					},
					"children": [
						{
							"id": 559,
							"name": "android",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Set Android specific Invite properties",
								"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setGoogleAnalyticsTrackingId('UA-1234-5');\n```\n"
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 179,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "AndroidInviteBuilder",
								"id": 545
							}
						},
						{
							"id": 560,
							"name": "setAndroidClientId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 561,
									"name": "setAndroidClientId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the Android target client ID for the invitation.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setAndroidClientId('xxxxxxxxxxxx');\n```\n"
									},
									"parameters": [
										{
											"id": 562,
											"name": "androidClientId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The android client ID.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 193,
									"character": 22
								}
							]
						},
						{
							"id": 563,
							"name": "setAndroidMinimumVersionCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 564,
									"name": "setAndroidMinimumVersionCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the minimum version of the android app installed on the receiving device. If this minimum version is not installed then the install flow will be triggered.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setAndroidMinimumVersionCode(18);\n```\n"
									},
									"parameters": [
										{
											"id": 565,
											"name": "androidMinimumVersionCode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Minimum version of the android app.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 207,
									"character": 32
								}
							]
						},
						{
							"id": 566,
							"name": "setCallToActionText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 567,
									"name": "setCallToActionText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Text shown on the email invitation for the user to accept the invitation. Default install text used if not set.",
										"tags": [
											{
												"tag": "warning",
												"text": "Cannot be used with {@link invites.AndroidInviteBuilder#setEmailHtmlContent}.\n\n#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setCallToActionText('Join the app!');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 568,
											"name": "callToActionText",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Text to use on the invitation button.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 223,
									"character": 23
								}
							]
						},
						{
							"id": 569,
							"name": "setCustomImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 570,
									"name": "setCustomImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets an image for invitations.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setCustomImage('https://my-cdn.com/assets/invites.png');\n```\n"
									},
									"parameters": [
										{
											"id": 571,
											"name": "customImage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The image Uri. The Uri is required to be in absolute format. The supported image formats are \"jpg\", \"jpeg\" and \"png\".\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 237,
									"character": 18
								}
							]
						},
						{
							"id": 572,
							"name": "setDeepLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 573,
									"name": "setDeepLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the deep link that is made available to the app when opened from the invitation. This deep link is made\navailable both to a newly installed application and an already installed application. The deep link can be sent\nto Android and other platforms so should be formatted to support deep links across platforms.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.deepLink('/invites');\n```\n"
									},
									"parameters": [
										{
											"id": 574,
											"name": "deepLink",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The app deep link.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 253,
									"character": 15
								}
							]
						},
						{
							"id": 575,
							"name": "setIOSClientId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 576,
									"name": "setIOSClientId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the iOS target client ID for the invitation.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setIOSClientId('xxxxxxxxxxxx');\n```\n"
									},
									"parameters": [
										{
											"id": 577,
											"name": "iOSClientId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The iOS client ID.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 267,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								559
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								560,
								563,
								566,
								569,
								572,
								575
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 168,
							"character": 28
						}
					]
				},
				{
					"id": 581,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Invites service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Invites service for the default app:\n\n```js\nconst defaultAppInvites = firebase.invites();\n```\n"
					},
					"children": [
						{
							"id": 594,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 582,
							"name": "createInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 583,
									"name": "createInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create an invitation via an InvitationBuilder instance.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app and share content');\n```\n"
									},
									"parameters": [
										{
											"id": 584,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The title displayed in the invitation."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 585,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The message displayed in the invitation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 558
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 351,
									"character": 20
								}
							]
						},
						{
							"id": 589,
							"name": "getInitialInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 590,
									"name": "getInitialInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Invitation that the app has been launched from. If the app was not launched from an Invitation the\nreturn value will be null.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().getInitialInvitation();\n\nif (invite) {\n console.log('Deeplink: ', invite.deepLink);\n console.log('ID: ', invite.invitationId);\n}\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "NativeInvite",
												"id": 578
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 390,
									"character": 24
								}
							]
						},
						{
							"id": 586,
							"name": "onInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 587,
									"name": "onInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "When an invitation is opened whilst the app is open, the listener is invoked with the invitation.\nReturns a function that when called unsubscribes the listener from further events.",
										"text": "#### Example\n\n```js\nfunction handleInvitation({ deepLink, invitationId}) {\n  console.log('Deeplink: ', deepLink);\n  console.log('ID: ', invitationId);\n}\n\nconst subscriber = firebase.invites().onInvitation(handleInvitation);\n\n// Unsubscribe from invitation listener\nsubscriber();\n```\n"
									},
									"parameters": [
										{
											"id": 588,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function called when an invitation is opened.\n"
											},
											"type": {
												"type": "reference",
												"name": "InviteListener",
												"id": 595
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 373,
									"character": 16
								}
							]
						},
						{
							"id": 591,
							"name": "sendInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 592,
									"name": "sendInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Displays the invitation dialog which allows the user to select who received the invitation.\nReturns a promise that resolves with the created invitation IDs if the invitation is sent, otherwise it is\nrejected with an error.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app and share content');\nconst ids = await firebase.invites().sendInvitation(invite);\n```\n"
									},
									"parameters": [
										{
											"id": 593,
											"name": "invite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The invitation to send. Must be an instance of InviteBuilder\n"
											},
											"type": {
												"type": "reference",
												"name": "InviteBuilder",
												"id": 558
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 406,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								594
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								582,
								589,
								586,
								591
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 338,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 542,
					"name": "AdditionalReferralParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Additional referral parameters for {@link invites.AndroidInviteBuilder#setAdditionalReferralParameters}.",
						"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setAdditionalReferralParameters({\n  screen: 'Profile',\n});\n```\n"
					},
					"indexSignature": [
						{
							"id": 543,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "Additional referral parameters for {@link invites.AndroidInviteBuilder#setAdditionalReferralParameters}.",
								"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setAdditionalReferralParameters({\n  screen: 'Profile',\n});\n```\n"
							},
							"parameters": [
								{
									"id": 544,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 83,
							"character": 47
						}
					]
				},
				{
					"id": 578,
					"name": "NativeInvite",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A native invite representation returned from getInitialInvite and onInvite.",
						"text": "#### Example 1\n\nWhen an invitation has been opened from a closed/terminated app.\n\n```js\nconst invite = firebase.invites().getInitialInvitation();\n\nif (invite) {\n  console.log('Deeplink: ', invite.deepLink);\n  console.log('ID: ', invite.invitationId);\n}\n```\n\n#### Example 2\n\nWhen an invite has been opened and the app is running.\n\n```js\n function handleInvitation({ deepLink, invitationId}) {\n  console.log('Deeplink: ', deepLink);\n  console.log('ID: ', invitationId);\n }\n\n firebase.invites().onInvitation(handleInvitation);\n```\n"
					},
					"children": [
						{
							"id": 579,
							"name": "deepLink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The deepLink that should be opened within the application."
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 303,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 580,
							"name": "invitationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ID of the invitation that was opened."
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 308,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								579,
								580
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 299,
							"character": 31
						}
					]
				},
				{
					"id": 540,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "firebase.invites.X"
					},
					"children": [
						{
							"id": 541,
							"name": "Invitation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Invitation returns an `InviteBuilder` instance used to send new invites."
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 68,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "InviteBuilder",
								"id": 558
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								541
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 64,
							"character": 26
						}
					]
				},
				{
					"id": 595,
					"name": "InviteListener",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type alias for an invite listener used with {@link invites#onInvitation}",
						"text": "#### Example\n\n```js\nfirebase.invites().onInvitation((invite) => {\n  console.log('Deeplink: ', invite.deepLink);\n  console.log('ID: ', invite.invitationId);\n});\n```\n"
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 323,
							"character": 28
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 596,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 597,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 598,
											"name": "nativeInvite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NativeInvite",
												"id": 578
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 323,
									"character": 30
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						545,
						558,
						581
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						542,
						578,
						540
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						595
					]
				}
			],
			"sources": [
				{
					"fileName": "invites/lib/index.d.ts",
					"line": 60,
					"character": 24
				}
			]
		},
		{
			"id": 606,
			"name": "Mlkit",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase ML Kit package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `mlkit` package:\n\n```js\nimport { firebase } from '@react-native-firebase/mlkit';\n\n// firebase.mlkit().X\n```\n\n#### Example 2\n\nUsing the default export from the `mlkit` package:\n\n```js\nimport mlkit from '@react-native-firebase/mlkit';\n\n// mlkit().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/mlkit';\n\n// firebase.mlkit().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "mlkit\n"
					}
				]
			},
			"children": [
				{
					"id": 608,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase ML Kit service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the ML Kit service for the default app:\n\n```js\nconst defaultAppMLKit = firebase.mlkit();\n```\n"
					},
					"children": [
						{
							"id": 609,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								609
							]
						}
					],
					"sources": [
						{
							"fileName": "mlkit/lib/index.d.ts",
							"line": 76,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 607,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "mlkit/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						608
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						607
					]
				}
			],
			"sources": [
				{
					"fileName": "mlkit/lib/index.d.ts",
					"line": 60,
					"character": 22
				}
			]
		},
		{
			"id": 617,
			"name": "Perf",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Performance Monitoring package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `perf` package:\n\n```js\nimport { firebase } from '@react-native-firebase/perf';\n\n// firebase.perf().X\n```\n\n#### Example 2\n\nUsing the default export from the `perf` package:\n\n```js\nimport perf from '@react-native-firebase/perf';\n\n// perf().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/perf';\n\n// firebase.perf().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "perf\n"
					}
				]
			},
			"children": [
				{
					"id": 649,
					"name": "HttpMetric",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Metric used to collect data for network requests/responses. A new instance must be used for every request/response."
					},
					"children": [
						{
							"id": 650,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 651,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the value of an attribute. Returns null if it does not exist.",
										"text": "#### Example\n\n```js\nconst attribute = metric.getAttribute('user_role');\n```\n"
									},
									"parameters": [
										{
											"id": 652,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute to fetch the value of\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 228,
									"character": 16
								}
							]
						},
						{
							"id": 653,
							"name": "getAttributes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 654,
									"name": "getAttributes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an object of all the currently added attributes.",
										"text": "#### Example\n\n```js\nconst attributes = metric.getAttributes();\n\nattributes.forEach(($) => {\n  console.log($);\n});\n```\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 655,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 656,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 657,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "perf/lib/index.d.ts",
													"line": 243,
													"character": 20
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 243,
									"character": 17
								}
							]
						},
						{
							"id": 658,
							"name": "putAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 659,
									"name": "putAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a String value for the specified attribute. Updates the value of the attribute if it already exists.\nThe maximum number of attributes that can be added is 5.",
										"text": "#### Example\n\n```js\nmetric.putAttribute('user_role', 'admin');\n```\n"
									},
									"parameters": [
										{
											"id": 660,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute. Max length is 40 chars."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 661,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value of the attribute. Max length is 100 chars.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 258,
									"character": 16
								}
							]
						},
						{
							"id": 662,
							"name": "removeAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 663,
									"name": "removeAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes an already added attribute. Does nothing if attribute does not exist.",
										"text": "#### Example\n\n```js\nmetric.removeAttribute('user_role');\n```\n"
									},
									"parameters": [
										{
											"id": 664,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute to be removed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 271,
									"character": 19
								}
							]
						},
						{
							"id": 665,
							"name": "setHttpResponseCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 666,
									"name": "setHttpResponseCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the httpResponse code of the request.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setHttpResponseCode(response.status);\n```",
										"tags": [
											{
												"tag": "warning",
												"text": "This is required for every request, if you do not provide this your metric will not be captured.\n\n"
											}
										]
									},
									"parameters": [
										{
											"id": 667,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value must be greater than 0. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 287,
									"character": 23
								}
							]
						},
						{
							"id": 668,
							"name": "setRequestPayloadSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 669,
									"name": "setRequestPayloadSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the size of the request payload.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setRequestPayloadSize(response.headers.get('Content-Type'));\n```\n"
									},
									"parameters": [
										{
											"id": 670,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value must be greater than 0. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 301,
									"character": 25
								}
							]
						},
						{
							"id": 674,
							"name": "setResponseContentType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 675,
									"name": "setResponseContentType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Content type of the response e.g. `text/html` or `application/json`.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setResponsePayloadSize(response.headers.get('Content-Type'));\n```\n"
									},
									"parameters": [
										{
											"id": 676,
											"name": "contentType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Valid string of MIME type. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 329,
									"character": 26
								}
							]
						},
						{
							"id": 671,
							"name": "setResponsePayloadSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 672,
									"name": "setResponsePayloadSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the size of the response payload.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setResponsePayloadSize(response.headers.get('Content-Length'));\n```\n"
									},
									"parameters": [
										{
											"id": 673,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value must be greater than 0. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 315,
									"character": 26
								}
							]
						},
						{
							"id": 677,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 678,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the start time of the request. Does nothing if already started.",
										"text": "#### Example\n\n```js\nconst metric = firebase.perf().newHttpMetric('https://api.com/login', 'POST');\nawait metric.start();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 341,
									"character": 9
								}
							]
						},
						{
							"id": 679,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 680,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the end time of the response and queues the network request metric on the device for transmission. Does nothing if already stopped.",
										"text": "#### Example\n\n```js\nconst metric = firebase.perf().newHttpMetric('https://api.com/login', 'POST');\nawait metric.start();\nmetric.putAttribute('user_role', 'admin');\nawait metric.stop();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 355,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								650,
								653,
								658,
								662,
								665,
								668,
								674,
								671,
								677,
								679
							]
						}
					],
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 216,
							"character": 25
						}
					]
				},
				{
					"id": 682,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Performance Monitoring service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Performance Monitoring service for the default app:\n\n```js\nconst defaultAppPerf = firebase.perf();\n```\n"
					},
					"children": [
						{
							"id": 697,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 683,
							"name": "isPerformanceCollectionEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Determines whether performance monitoring is enabled or disabled.",
								"text": "#### Example\n\n```js\nconst isEnabled = firebase.perf().isPerformanceCollectionEnabled;\nconsole.log('Performance collection enabled: ', isEnabled);\n```\n"
							},
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 384,
									"character": 34
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 693,
							"name": "newHttpMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 694,
									"name": "newHttpMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a HttpMetric instance for collecting network performance data for a single request/response",
										"text": "#### Example\n\n```js\nconst metric = firebase.perf().newHttpMetric('https://api.com/user/1', 'GET');\nawait metric.start();\n```\n"
									},
									"parameters": [
										{
											"id": 695,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A valid url String, cannot be empty"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 696,
											"name": "httpMethod",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "One of the values GET, PUT, POST, DELETE, HEAD, PATCH, OPTIONS, TRACE, or CONNECT\n"
											},
											"type": {
												"type": "reference",
												"name": "HttpMethod",
												"id": 698
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpMetric",
										"id": 649
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 440,
									"character": 17
								}
							]
						},
						{
							"id": 687,
							"name": "newTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 688,
									"name": "newTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Trace instance with the given identifier.",
										"text": "#### Example\n\n```js\nconst trace = firebase.perf().newTrace('user_profile');\nawait trace.start();\n```\n"
									},
									"parameters": [
										{
											"id": 689,
											"name": "identifier",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the trace, no leading or trailing whitespace allowed, no leading underscore '_' character allowed, max length is 100.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Trace",
										"id": 618
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 412,
									"character": 12
								}
							]
						},
						{
							"id": 684,
							"name": "setPerformanceCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 685,
									"name": "setPerformanceCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enables or disables performance monitoring.",
										"text": "#### Example\n\n```js\n// Disable performance monitoring collection\nawait firebase.perf().setPerformanceCollectionEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 686,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Should performance monitoring be enabled\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 398,
									"character": 35
								}
							]
						},
						{
							"id": 690,
							"name": "startTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 691,
									"name": "startTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Trace instance with the given identifier and immediately starts it.",
										"text": "#### Example\n\n```js\nconst trace = await firebase.perf().startTrace('user_profile');\n```\n"
									},
									"parameters": [
										{
											"id": 692,
											"name": "identifier",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the trace, no leading or trailing whitespace allowed, no leading underscore '_' character allowed, max length is 100.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Trace",
												"id": 618
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 425,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								697,
								683
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								693,
								687,
								684,
								690
							]
						}
					],
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 373,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 618,
					"name": "Trace",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Trace allows you to time the beginning to end of a certain action in your app with additional metric values and attributes."
					},
					"children": [
						{
							"id": 619,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 620,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the value of an attribute. Returns null if it does not exist.",
										"text": "#### Example\n\n```js\nconst attribute = trace.getAttribute('userId');\n```\n"
									},
									"parameters": [
										{
											"id": 621,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute to fetch the value of.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 96,
									"character": 16
								}
							]
						},
						{
							"id": 626,
							"name": "getMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 627,
									"name": "getMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the value of the metric with the given name in the current trace. If the metric\ndoesn't exist, it will not be created and a 0 is returned.",
										"text": "#### Example\n\n```js\nconst metric = trace.getMetric('hits');\n```\n"
									},
									"parameters": [
										{
											"id": 628,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to get.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 125,
									"character": 13
								}
							]
						},
						{
							"id": 629,
							"name": "getMetrics",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 630,
									"name": "getMetrics",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an object of all the currently added metrics and their number values.",
										"text": "#### Example\n\n```js\nconst metrics = trace.getMetrics();\n\nmetrics.forEach(($) => {\n  console.log($);\n});\n```\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 631,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 632,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 633,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "perf/lib/index.d.ts",
													"line": 140,
													"character": 17
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 140,
									"character": 14
								}
							]
						},
						{
							"id": 638,
							"name": "incrementMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 639,
									"name": "incrementMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Increments the named metric by the `incrementBy` value.",
										"text": "If a metric with the given name doesn't exist, a new one will be created starting with the value of `incrementBy`.\n\n```js\ntrace.incrementMetric('hits', 1);\n```\n"
									},
									"parameters": [
										{
											"id": 640,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to increment. Must not have a leading or trailing whitespace, no leading underscore '_' character and have a max length of 32 characters."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 641,
											"name": "incrementBy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value the metric should be incremented by.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 171,
									"character": 19
								}
							]
						},
						{
							"id": 622,
							"name": "putAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 623,
									"name": "putAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a String value for the specified attribute. Updates the value of the attribute if it already exists.\nThe maximum number of attributes that can be added is 5.",
										"text": "#### Example\n\n```js\ntrace.putAttribute('userId', '123456789');\n```\n"
									},
									"parameters": [
										{
											"id": 624,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute. Max length is 40 chars."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 625,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value of the attribute. Max length is 100 chars.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 111,
									"character": 16
								}
							]
						},
						{
							"id": 634,
							"name": "putMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 635,
									"name": "putMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of the named metric with the provided number.",
										"text": "If a metric with the given name exists it will be overwritten.\nIf a metric with the given name doesn't exist, a new one will be created.\n\n#### Example\n\n```js\ntrace.putMetric('hits', 1);\n```\n"
									},
									"parameters": [
										{
											"id": 636,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to set. Must not have a leading or trailing whitespace, no leading underscore '_' character and have a max length of 32 characters."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 637,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value the metric should be set to.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 157,
									"character": 13
								}
							]
						},
						{
							"id": 642,
							"name": "removeMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 643,
									"name": "removeMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes a metric by name if it exists.",
										"text": "#### Example\n\n```js\ntrace.removeMetric('hits');\n```\n"
									},
									"parameters": [
										{
											"id": 644,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to remove.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 184,
									"character": 16
								}
							]
						},
						{
							"id": 645,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 646,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the start time of the trace. Does nothing if already started.",
										"text": "#### Example\n\n```js\nconst trace = firebase.perf().newTrace('example');\nawait trace.start();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 196,
									"character": 9
								}
							]
						},
						{
							"id": 647,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 648,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the end time of the trace and queues the metric on the device for transmission. Does nothing if already stopped.",
										"text": "* #### Example\n\n```js\nconst trace = firebase.perf().newTrace('example');\nawait trace.start();\ntrace.putMetric('hits', 1);\nawait trace.stop();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 210,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								619,
								626,
								629,
								638,
								622,
								634,
								642,
								645,
								647
							]
						}
					],
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 84,
							"character": 20
						}
					]
				},
				{
					"id": 681,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 358,
							"character": 26
						}
					]
				},
				{
					"id": 698,
					"name": "HttpMethod",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Type alias describing the valid HTTP methods accepted when creating a new {@link perf.HttpMetric} instance.",
						"text": "#### Example\n\n```js\nconst metric = perf().newHttpMetric('https://api.com/user', 'PATCH');\n```\n"
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 70,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "GET"
							},
							{
								"type": "stringLiteral",
								"value": "HEAD"
							},
							{
								"type": "stringLiteral",
								"value": "PUT"
							},
							{
								"type": "stringLiteral",
								"value": "POST"
							},
							{
								"type": "stringLiteral",
								"value": "PATCH"
							},
							{
								"type": "stringLiteral",
								"value": "TRACE"
							},
							{
								"type": "stringLiteral",
								"value": "DELETE"
							},
							{
								"type": "stringLiteral",
								"value": "CONNECT"
							},
							{
								"type": "stringLiteral",
								"value": "OPTIONS"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						649,
						682,
						618
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						681
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						698
					]
				}
			],
			"sources": [
				{
					"fileName": "perf/lib/index.d.ts",
					"line": 60,
					"character": 21
				}
			]
		},
		{
			"id": 706,
			"name": "Storage",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Cloud Storage package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `storage` package:\n\n```js\nimport { firebase } from '@react-native-firebase/storage';\n\n// firebase.storage().X\n```\n\n#### Example 2\n\nUsing the default export from the `storage` package:\n\n```js\nimport storage from '@react-native-firebase/storage';\n\n// storage().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/storage';\n\n// firebase.storage().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "storage\n"
					}
				]
			},
			"children": [
				{
					"id": 855,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Cloud Storage service is available for the default app, a given app or a specific storage bucket.",
						"text": "#### Example 1\n\nGet the storage instance for the **default app**:\n\n```js\nconst storageForDefaultApp = firebase.storage();\n```\n\n#### Example 2\n\nGet the storage instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst storageForOtherApp = firebase.storage(otherApp);\n```\n\n#### Example 3\n\nGet the storage instance for a **specific storage bucket**:\n\n```js\nconst defaultApp = firebase.app();\nconst storageForBucket = defaultApp.storage('gs://another-bucket-url');\n\nconst otherApp = firebase.app('otherApp');\nconst storageForOtherAppBucket = otherApp.storage('gs://another-bucket-url');\n```\n\n"
					},
					"children": [
						{
							"id": 874,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 860,
							"name": "maxDownloadRetryTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the maximum time to retry a download if a failure occurs.",
								"text": "#### Example\n\n```js\nconst downloadRetryTime = firebase.storage().maxUploadRetryTime;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1048,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 864,
							"name": "maxOperationRetryTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the maximum time to retry operations other than upload and download if a failure occurs.",
								"text": "#### Example\n\n```js\nconst maxOperationRetryTime = firebase.storage().maxOperationRetryTime;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1072,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 856,
							"name": "maxUploadRetryTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the maximum time to retry an upload if a failure occurs.",
								"text": "#### Example\n\n```js\nconst uploadRetryTime = firebase.storage().maxUploadRetryTime;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1024,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 868,
							"name": "ref",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 869,
									"name": "ref",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new {@link storage.Reference} instance.",
										"text": "#### Example\n\n```js\nconst maxOperationRetryTime = firebase.storage().maxOperationRetryTime;\n```\n"
									},
									"parameters": [
										{
											"id": 870,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional string pointing to a location on the storage bucket. If no path\nis provided, the returned reference will be the bucket root path.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 764
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1099,
									"character": 7
								}
							]
						},
						{
							"id": 871,
							"name": "refFromURL",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 872,
									"name": "refFromURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new {@link storage.Reference} instance from a storage bucket URL.",
										"text": "#### Example\n\n```js\nconst maxOperationRetryTime = firebase.storage().maxOperationRetryTime;\n```\n"
									},
									"parameters": [
										{
											"id": 873,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A storage bucket URL pointing to a single file or location. Must start with `gs://`,\ne.g. `gs://assets/logo.png` or `gs://assets`.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 764
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1113,
									"character": 14
								}
							]
						},
						{
							"id": 861,
							"name": "setMaxDownloadRetryTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 862,
									"name": "setMaxDownloadRetryTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the maximum time to retry a download if a failure occurs.",
										"text": "#### Example\n\n```js\nawait firebase.storage().setMaxDownloadRetryTime(5000);\n```\n"
									},
									"parameters": [
										{
											"id": 863,
											"name": "time",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of times to retry.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1061,
									"character": 27
								}
							]
						},
						{
							"id": 865,
							"name": "setMaxOperationRetryTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 866,
									"name": "setMaxOperationRetryTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the maximum time to retry operations other than upload and download if a failure occurs.",
										"text": "#### Example\n\n```js\nawait firebase.storage().setMaxOperationRetryTime(5000);\n```\n"
									},
									"parameters": [
										{
											"id": 867,
											"name": "time",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of times to retry.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1085,
									"character": 28
								}
							]
						},
						{
							"id": 857,
							"name": "setMaxUploadRetryTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 858,
									"name": "setMaxUploadRetryTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the maximum time to retry an upload if a failure occurs.",
										"text": "#### Example\n\n```js\nawait firebase.storage().setMaxUploadRetryTime(3);\n```\n"
									},
									"parameters": [
										{
											"id": 859,
											"name": "time",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of times to retry.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1037,
									"character": 25
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								874,
								860,
								864,
								856
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								868,
								871,
								861,
								865,
								857
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1014,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 745,
					"name": "FullMetadata",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The full readable metadata returned by `TaskSnapshot.metadata` or `StorageReference.getMetadata()`."
					},
					"children": [
						{
							"id": 747,
							"name": "bucket",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bucket this storage object is contained in.",
								"text": "#### Example Value\n\n```\ngs://my-project-storage-bucket\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 484,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 755,
							"name": "cacheControl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Cache-Control' HTTP header that will be set on the storage object when it's requested.",
								"text": "#### Example 1\n\nTo turn off caching, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'no-store',\n}\n```\n\n#### Example 2\n\nTo aggressively cache an object, e.g. static assets, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'public, max-age=31536000',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 399,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.cacheControl",
								"id": 736
							}
						},
						{
							"id": 756,
							"name": "contentDisposition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Disposition' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 406,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentDisposition",
								"id": 737
							}
						},
						{
							"id": 757,
							"name": "contentEncoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Encoding' HTTP header that will be used on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 413,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentEncoding",
								"id": 738
							}
						},
						{
							"id": 758,
							"name": "contentLanguage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Language' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 420,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentLanguage",
								"id": 739
							}
						},
						{
							"id": 759,
							"name": "contentType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Type' HTTP header that will be set on the object when it's requested.",
								"text": "This is used to indicate the media type (or MIME type) of the object. When uploading a file\nFirebase Cloud Storage for React Native will attempt to automatically detect this if `contentType`\nis not already set, if it fails to detect a media type it will default to `application/octet-stream`.\n\nFor `DATA_URL` string formats uploaded via `putString` this will also be automatically extracted if available.\n\n#### Example\n\nSetting the content type as JSON, e.g. for when uploading a JSON string via `putString`.\n\n```js\n{\n  contentType: 'application/json',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 443,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentType",
								"id": 740
							}
						},
						{
							"id": 760,
							"name": "customMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Additional user-defined custom metadata for this storage object.",
								"text": "String values only are supported for custom metadata property values.\n\n#### Example\n\nAdding a user controlled NSFW meta data field.\n\n```js\n{\n  customMetadata: {\n    'nsfw': 'true'\n  },\n}\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 461,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 761,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 762,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 763,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "storage/lib/index.d.ts",
													"line": 461,
													"character": 20
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.customMetadata",
								"id": 741
							}
						},
						{
							"id": 748,
							"name": "fullPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The full path to this storage object in its bucket.",
								"text": "#### Example Value\n\n```\ninvertase/logo.png\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 495,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 749,
							"name": "generation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Storage object generation values enable users to uniquely identify data resources, e.g. object versioning.",
								"text": "Read more on generation on the [Google Cloud Storage documentation](https://cloud.google.com/storage/docs/generations-preconditions).\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 502,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 746,
							"name": "md5Hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A Base64-encoded MD5 hash of the storage object being uploaded."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 473,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 750,
							"name": "metageneration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Storage object metageneration values enable users to uniquely identify data resources, e.g. object versioning.",
								"text": "Read more on metageneration on the [Google Cloud Storage documentation](https://cloud.google.com/storage/docs/generations-preconditions).\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 509,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 751,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The short name of storage object in its bucket, e.g. it's file name.",
								"text": "#### Example Value\n\n```\nlogo.png\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 520,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 752,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The size of this storage object in bytes."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 525,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 753,
							"name": "timeCreated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A date string representing when this storage object was created.",
								"text": "#### Example Value\n\n```\n2019-05-02T00:34:56.264Z\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 536,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 754,
							"name": "updated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A date string representing when this storage object was last updated.",
								"text": "#### Example Value\n\n```\n2019-05-02T00:35:56.264Z\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 547,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								747,
								755,
								756,
								757,
								758,
								759,
								760,
								748,
								749,
								746,
								750,
								751,
								752,
								753,
								754
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 469,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "SettableMetadata",
							"id": 735
						}
					]
				},
				{
					"id": 720,
					"name": "Path",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A collection of native device file paths to aid in the usage of file path based storage methods.",
						"text": "Concatenate a file path with your target file name when using `putFile` or `getFile`.\n\n```js\nfirebase.storage.Path;\n```\n"
					},
					"children": [
						{
							"id": 722,
							"name": "CachesDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the application specific cache directory on the filesystem.",
								"text": "The system will automatically delete files in this directory when disk space is needed elsewhere on the device, starting with the oldest files first.\n\n```js\nfirebase.storage.Path.CachesDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 229,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 723,
							"name": "DocumentDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the users Documents directory.",
								"text": "Use this directory to place documents that have been created by the user.\n\n```js\nfirebase.storage.Path.DocumentDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 240,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 726,
							"name": "ExternalDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the directory on the primary shared/external storage device.",
								"text": "Here your application can place persistent files it owns. These files are internal to the application, and not typically visible to the user as media.\n\nReturns null if no external storage directory found, e.g. removable media has been ejected by the user.\n\n```js\nfirebase.storage.Path.ExternalDirectory;\n```\n",
								"tags": [
									{
										"tag": "android",
										"text": "Android only - iOS returns null\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 277,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 727,
							"name": "ExternalStorageDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the primary shared/external storage directory.",
								"text": "Traditionally this is an SD card, but it may also be implemented as built-in storage on a device.\n\nReturns null if no external storage directory found, e.g. removable media has been ejected by the user.\n\n```js\nfirebase.storage.Path.ExternalStorageDirectory;\n```\n",
								"tags": [
									{
										"tag": "android",
										"text": "Android only - iOS returns null\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 292,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 725,
							"name": "LibraryDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the apps library/resources directory.",
								"text": "E.g. this can be used for things like documentation, support files, and configuration files and generic resources.\n\n```js\nfirebase.storage.Path.LibraryDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 262,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 721,
							"name": "MainBundle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the applications main bundle.",
								"text": "```js\nfirebase.storage.Path.MainBundle;\n```\n",
								"tags": [
									{
										"tag": "ios",
										"text": "iOS only\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 218,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 729,
							"name": "MoviesDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to a directory in which to place movies that are available to the user.",
								"text": "```js\nfirebase.storage.Path.MoviesDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 310,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 728,
							"name": "PicturesDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to a directory in which to place pictures that are available to the user.",
								"text": "```js\nfirebase.storage.Path.PicturesDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 301,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 724,
							"name": "TempDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to a temporary directory.",
								"text": "Use this directory to create temporary files. The system will automatically delete files in this directory when disk space is needed elsewhere on the device, starting with the oldest files first.\n\n```js\nfirebase.storage.Path.TempDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 251,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								722,
								723,
								726,
								727,
								725,
								721,
								729,
								728,
								724
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 208,
							"character": 23
						}
					]
				},
				{
					"id": 764,
					"name": "Reference",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a reference to a Google Cloud Storage object in React Native Firebase.",
						"text": "A reference can be used to upload and download storage objects, get/set storage object metadata, retrieve storage object download urls and delete storage objects.\n\n#### Example 1\n\nGet a reference to a specific storage path.\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\n```\n\n#### Example 2\n\nGet a reference to a specific storage path on another bucket in the same firebase project.\n\n```js\nconst ref = firebase.storage().refFromURL('gs://other-bucket/invertase/logo.png');\n```\n"
					},
					"children": [
						{
							"id": 765,
							"name": "bucket",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the bucket containing this reference's object."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 575,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 767,
							"name": "fullPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The full path of this object."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 583,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 768,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The short name of this object, which is the last component of the full path. For example,\nif fullPath is 'full/path/image.png', name is 'image.png'."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 588,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 766,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A reference pointing to the parent location of this reference, or null if this reference is the root."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 579,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Reference",
										"id": 764
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 769,
							"name": "root",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A reference to the root of this reference's bucket."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 592,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 764
							}
						},
						{
							"id": 770,
							"name": "storage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The storage service associated with this reference."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 596,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Module",
								"id": 855
							}
						},
						{
							"id": 773,
							"name": "child",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 774,
									"name": "child",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a reference to a relative path from this reference.",
										"text": "#### Example\n\n```js\nconst parent = firebase.storage().ref('invertase');\nconst ref = parent.child('logo.png');\n```\n"
									},
									"parameters": [
										{
											"id": 775,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The relative path from this reference. Leading, trailing, and consecutive slashes are removed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 764
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 622,
									"character": 9
								}
							]
						},
						{
							"id": 776,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 777,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes the object at this reference's location.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nawait ref.delete();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 634,
									"character": 10
								}
							]
						},
						{
							"id": 778,
							"name": "getDownloadURL",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 779,
									"name": "getDownloadURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches a long lived download URL for this object.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nconst url = await ref.getDownloadURL();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 646,
									"character": 18
								}
							]
						},
						{
							"id": 780,
							"name": "getMetadata",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 781,
									"name": "getMetadata",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches metadata for the object at this location, if one exists.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nconst metadata = await ref.getMetadata();\nconsole.log('Cache control: ', metadata.cacheControl);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "FullMetadata",
												"id": 745
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 659,
									"character": 15
								}
							]
						},
						{
							"id": 786,
							"name": "put",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 787,
									"name": "put",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Puts data onto the storage bucket.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/new-logo.png');\nconst task = ref.put(BLOB, {\n  cacheControl: 'no-store', // disable caching\n});\n```\n"
									},
									"parameters": [
										{
											"id": 788,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data to upload to the storage bucket at the reference location."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Blob"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "ArrayBuffer"
													}
												]
											}
										},
										{
											"id": 789,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 735
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 810
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 694,
									"character": 7
								}
							]
						},
						{
							"id": 782,
							"name": "putFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 783,
									"name": "putFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Puts a file from local disk onto the storage bucket.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/new-logo.png');\nconst path = `${firebase.storage.Path.DocumentDirectory}/new-logo.png`;\nconst task = ref.putFile(path, {\n  cacheControl: 'no-store', // disable caching\n});\n```\n"
									},
									"parameters": [
										{
											"id": 784,
											"name": "localFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The local file path to upload to the bucket at the reference location."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 785,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Any additional `SettableMetadata` for this task.\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 735
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 810
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 677,
									"character": 11
								}
							]
						},
						{
							"id": 790,
							"name": "putString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 791,
									"name": "putString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Puts a string on the storage bucket. Depending on the string type, set a {@link storage.StringFormat} type.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/new-logo.png');\nconst task = ref.putString('PEZvbyBCYXI+', firebase.storage.StringFormat.BASE64, {\n  cacheControl: 'no-store', // disable caching\n});\n```\n"
									},
									"parameters": [
										{
											"id": 792,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The string data, must match the format provided."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 793,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The format type of the string, e.g. a Base64 format string."
											},
											"type": {
												"type": "reference",
												"name": "StringFormat",
												"id": 707
											}
										},
										{
											"id": 794,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Any additional `SettableMetadata` for this task.\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 735
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 810
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 712,
									"character": 13
								}
							]
						},
						{
							"id": 771,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 772,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a gs:// URL for this object in the form `gs://<bucket>/<path>/<to>/<object>`.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nconsole.log('Full path: ', ref.toString()); // gs://invertase.io/invertase/logo.png\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 608,
									"character": 12
								}
							]
						},
						{
							"id": 795,
							"name": "updateMetadata",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 796,
									"name": "updateMetadata",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the metadata for this reference object on the storage bucket.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/nsfw-logo.png');\nconst updatedMetadata = await ref.updateMetadata({\n  customMetadata: {\n    'nsfw': 'true',\n  }\n});\n```\n"
									},
									"parameters": [
										{
											"id": 797,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A `SettableMetadata` instance to update.\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 735
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "FullMetadata",
												"id": 745
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 730,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								765,
								767,
								768,
								766,
								769,
								770
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								773,
								776,
								778,
								780,
								786,
								782,
								790,
								771,
								795
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 571,
							"character": 28
						}
					]
				},
				{
					"id": 735,
					"name": "SettableMetadata",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An interface representing all the metadata properties that can be set.",
						"text": "This is used in updateMetadata, put, putString & putFile.\n"
					},
					"children": [
						{
							"id": 736,
							"name": "cacheControl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Cache-Control' HTTP header that will be set on the storage object when it's requested.",
								"text": "#### Example 1\n\nTo turn off caching, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'no-store',\n}\n```\n\n#### Example 2\n\nTo aggressively cache an object, e.g. static assets, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'public, max-age=31536000',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 399,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 737,
							"name": "contentDisposition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Disposition' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 406,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 738,
							"name": "contentEncoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Encoding' HTTP header that will be used on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 413,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 739,
							"name": "contentLanguage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Language' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 420,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 740,
							"name": "contentType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Type' HTTP header that will be set on the object when it's requested.",
								"text": "This is used to indicate the media type (or MIME type) of the object. When uploading a file\nFirebase Cloud Storage for React Native will attempt to automatically detect this if `contentType`\nis not already set, if it fails to detect a media type it will default to `application/octet-stream`.\n\nFor `DATA_URL` string formats uploaded via `putString` this will also be automatically extracted if available.\n\n#### Example\n\nSetting the content type as JSON, e.g. for when uploading a JSON string via `putString`.\n\n```js\n{\n  contentType: 'application/json',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 443,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 741,
							"name": "customMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Additional user-defined custom metadata for this storage object.",
								"text": "String values only are supported for custom metadata property values.\n\n#### Example\n\nAdding a user controlled NSFW meta data field.\n\n```js\n{\n  customMetadata: {\n    'nsfw': 'true'\n  },\n}\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 461,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 742,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 743,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 744,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "storage/lib/index.d.ts",
													"line": 461,
													"character": 20
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								736,
								737,
								738,
								739,
								740,
								741
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 373,
							"character": 35
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "FullMetadata",
							"id": 745
						}
					]
				},
				{
					"id": 730,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Cloud Storage statics.",
						"text": "#### Example\n\n```js\nfirebase.storage;\n```\n"
					},
					"children": [
						{
							"id": 734,
							"name": "Path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A collection of native device file paths to aid in the usage of file path based storage methods.",
								"text": "#### Example\n\n```js\nfirebase.storage.Path;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 365,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 720
							}
						},
						{
							"id": 731,
							"name": "StringFormat",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Possible string formats used for uploading via `StorageReference.putString()`",
								"text": "#### Example\n\n```js\nfirebase.storage.StringFormat;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 332,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "StringFormat",
								"id": 707
							}
						},
						{
							"id": 733,
							"name": "TaskEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An event to subscribe to that is triggered on a Upload or Download task.",
								"text": "#### Example\n\n```js\nfirebase.storage.TaskEvent;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 354,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TaskEvent",
								"id": 712
							}
						},
						{
							"id": 732,
							"name": "TaskState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A collection of properties that indicates the current tasks state.",
								"text": "#### Example\n\n```js\nfirebase.storage.TaskState;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 343,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TaskState",
								"id": 714
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								734,
								731,
								733,
								732
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 322,
							"character": 26
						}
					]
				},
				{
					"id": 707,
					"name": "StringFormat",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Possible string formats used for uploading via `StorageReference.putString()`",
						"text": "```js\nfirebase.storage.StringFormat;\n```\n"
					},
					"children": [
						{
							"id": 709,
							"name": "BASE64",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Base64 string format.",
								"text": "Learn more about Base64 [on the Mozilla Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding)\n\n#### Usage\n\n```js\nfirebase.storage.StringFormat.BASE64;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = 'PEZvbyBCYXI+';\n```\n\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 105,
									"character": 10
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "base64"
							}
						},
						{
							"id": 710,
							"name": "BASE64URL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Base64Url string format.",
								"text": "#### Usage\n\n```js\nfirebase.storage.StringFormat.BASE64URL;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = 'PEZvbyBCYXI-';\n```\n\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 123,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "base64url"
							}
						},
						{
							"id": 711,
							"name": "DATA_URL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Data URL string format.",
								"text": "#### Usage\n\n```js\nfirebase.storage.StringFormat.DATA_URL;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = 'data:text/plain;base64,PEZvbyBCYXI+';\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 140,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "data_url"
							}
						},
						{
							"id": 708,
							"name": "RAW",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Raw string format.",
								"text": "#### Usage\n\n```js\nfirebase.storage.StringFormat.RAW;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = '<Foo Bar>';\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 85,
									"character": 7
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "raw"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								709,
								710,
								711,
								708
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 69,
							"character": 31
						}
					]
				},
				{
					"id": 810,
					"name": "Task",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Storage Task used for Uploading or Downloading files.",
						"text": "#### Example 1\n\nGet a Upload Storage task to upload a string:\n\n```js\nconst string = '{ \"foo\": 1 }';\nconst task = firebase\n .storage()\n .ref('/foo/bar.json')\n .putString(string);\n```\n\n#### Example 2\n\nGet a Download Storage task to download a file:\n\n```js\nconst string = '{ \"foo\": 1 }';\nconst downloadTo = `${firebase.storage.Path.DocumentDirectory}/bar.json`;\n\nconst task = firebase\n .storage()\n .ref('/foo/bar.json')\n .getFile(downloadTo);\n```\n"
					},
					"children": [
						{
							"id": 815,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 816,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancel the current Download or Upload task.",
										"text": "#### Example\n\nCancel a task inside a state changed listener:\n\n```js\ntask.on('state_changed', taskSnapshot => {\n  console.log('Cancelling my task!');\n  task.cancel();\n});\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 861,
									"character": 10
								}
							]
						},
						{
							"id": 841,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 842,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 843,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 844,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 845,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 846,
																	"name": "a",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "NativeFirebaseError"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "storage/lib/index.d.ts",
															"line": 907,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 907,
									"character": 9
								}
							]
						},
						{
							"id": 817,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 818,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Task event handler called when state has changed on the task.",
										"text": "#### Example\n\n```js\nconst task = firebase\n .storage()\n .ref('/foo/bar.json')\n .getFile(downloadTo);\n\ntask.on('state_changed', (taskSnapshot) => {\n  console.log(taskSnapshot.state);\n})\n.then(() => {]\n  console.log('Task complete');\n})\n.catch((error) => {\n  console.error(error.message);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 819,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event name to handle, always `state_changed`."
											},
											"type": {
												"type": "stringLiteral",
												"value": "state_changed"
											}
										},
										{
											"id": 820,
											"name": "nextOrObserver",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional event observer function."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "TaskSnapshotObserver",
														"id": 798
													},
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 821,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 822,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 823,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "TaskSnapshot",
																				"id": 847
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 892,
																	"character": 52
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 824,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional JavaScript error handler."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 825,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 826,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 827,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NativeFirebaseError"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 893,
																	"character": 13
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 828,
											"name": "complete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional complete handler function.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 829,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 830,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 894,
																	"character": 16
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 890,
									"character": 6
								}
							]
						},
						{
							"id": 811,
							"name": "pause",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 812,
									"name": "pause",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Pause the current Download or Upload task.",
										"text": "#### Example\n\nPause a running task inside a state changed listener:\n\n```js\ntask.on('state_changed', taskSnapshot => {\n  if (taskSnapshot.state === firebase.storage.TaskState.RUNNING) {\n    console.log('Pausing my task!');\n    task.pause();\n  }\n});\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 823,
									"character": 9
								}
							]
						},
						{
							"id": 813,
							"name": "resume",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 814,
									"name": "resume",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resume the current Download or Upload task.",
										"text": "#### Example\n\nResume a previously paused task inside a state changed listener:\n\n```js\ntask.on('state_changed', taskSnapshot => {\n  // ... pause me ...\n  if (taskSnapshot.state === firebase.storage.TaskState.PAUSED) {\n    console.log('Resuming my task!');\n    task.resume();\n  }\n});\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 843,
									"character": 10
								}
							]
						},
						{
							"id": 831,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 832,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 833,
											"name": "onFulfilled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 834,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 835,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 836,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "TaskSnapshot",
																				"id": 847
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 903,
																	"character": 19
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 837,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 838,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 839,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 840,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NativeFirebaseError"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 904,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 902,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								815,
								841,
								817,
								811,
								813,
								831
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 805,
							"character": 23
						}
					]
				},
				{
					"id": 712,
					"name": "TaskEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An event to subscribe to that is triggered on a Upload or Download task.",
						"text": "Event subscription is created via `StorageTask.on()`.\n\n```js\nfirebase.storage.TaskEvent;\n```\n"
					},
					"children": [
						{
							"id": 713,
							"name": "STATE_CHANGED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An event that indicates that the tasks state has changed.",
								"text": "```js\nfirebase.storage.TaskEvent.STATE_CHANGED;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 160,
									"character": 17
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "state_changed"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								713
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 152,
							"character": 28
						}
					]
				},
				{
					"id": 847,
					"name": "TaskSnapshot",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A TaskSnapshot provides information about a storage tasks state.",
						"text": "#### Example 1\n\n```js\nfirebase\n  .storage()\n  .ref('/foo/bar.json')\n  .putString(JSON.stringify({ foo: 'bar' }))\n  .then((taskSnapshot) => {\n    if (taskSnapshot.state === firebase.storage.TaskState.SUCCESS) {\n      console.log('Total bytes uploaded: ', taskSnapshot.totalBytes);\n    }\n  });\n```\n\n#### Example 2\n\n```js\nconst task = firebase\n  .storage()\n  .ref('/foo/bar.json')\n  .putString(JSON.stringify({ foo: 'bar' }));\n\ntask.on('state_changed', taskSnapshot => {\n  if (taskSnapshot.state === firebase.storage.TaskState.PAUSED) {\n    console.log('Resuming my task!');\n    task.resume();\n  }\n});\n```\n"
					},
					"children": [
						{
							"id": 848,
							"name": "bytesTransferred",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of bytes currently transferred."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 947,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 854,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If the {@link storage.TaskSnapshot#state} is `error`, returns a JavaScript error of the\ncurrent task snapshot."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 978,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "NativeFirebaseError",
								"id": 893
							}
						},
						{
							"id": 849,
							"name": "metadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The metadata of the tasks via a {@link storage.FullMetadata} interface."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 952,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "FullMetadata",
								"id": 745
							}
						},
						{
							"id": 850,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The {@link storage.Reference} of the task."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 957,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 764
							}
						},
						{
							"id": 851,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current state of the task snapshot."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 962,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "cancelled"
									},
									{
										"type": "stringLiteral",
										"value": "error"
									},
									{
										"type": "stringLiteral",
										"value": "paused"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "success"
									}
								]
							}
						},
						{
							"id": 852,
							"name": "task",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent {@link storage.Task} of this snapshot."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 967,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Task",
								"id": 810
							}
						},
						{
							"id": 853,
							"name": "totalBytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total amount of bytes for this task."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 972,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								848,
								854,
								849,
								850,
								851,
								852,
								853
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 943,
							"character": 31
						}
					]
				},
				{
					"id": 798,
					"name": "TaskSnapshotObserver",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The snapshot observer returned from a {@link storage.Task#on} listener.",
						"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref(...);\nconst task = ref.put(...)\n\ntask.on('state_changed', {\n  next(taskSnapshot) {\n    console.log(taskSnapshot.state);\n  },\n  error(error) {\n    console.error(error.message);\n  },\n  complete() {\n    console.log('Task complete');\n  },\n})\n```\n"
					},
					"children": [
						{
							"id": 807,
							"name": "complete",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the task has completed successfully."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 773,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 808,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 809,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 773,
											"character": 13
										}
									]
								}
							}
						},
						{
							"id": 803,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the task errors."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 768,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 804,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"comment": {
										"text": "A JavaScript error.\n"
									},
									"signatures": [
										{
											"id": 805,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"text": "A JavaScript error.\n"
											},
											"parameters": [
												{
													"id": 806,
													"name": "error",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "NativeFirebaseError"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 768,
											"character": 10
										}
									]
								}
							}
						},
						{
							"id": 799,
							"name": "next",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the task state changes.",
								"tags": [
									{
										"tag": "param",
										"text": "A `TaskSnapshot` for the event.\n",
										"param": "taskSnapshot"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 761,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 800,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 801,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 802,
													"name": "taskSnapshot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TaskSnapshot",
														"id": 847
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 761,
											"character": 9
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								807,
								803,
								799
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 755,
							"character": 39
						}
					]
				},
				{
					"id": 714,
					"name": "TaskState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A collection of properties that indicates the current tasks state.",
						"text": "An event subscription is created via `StorageTask.on()`.\n\n```js\nfirebase.storage.TaskEvent;\n```\n"
					},
					"children": [
						{
							"id": 715,
							"name": "CANCELLED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task has been cancelled by the user."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 176,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "cancelled"
							}
						},
						{
							"id": 716,
							"name": "ERROR",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An Error occurred, see TaskSnapshot.error for details."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 181,
									"character": 9
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "error"
							}
						},
						{
							"id": 717,
							"name": "PAUSED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task has been paused. Resume the task via `StorageTask.resume()`."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 186,
									"character": 10
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "paused"
							}
						},
						{
							"id": 718,
							"name": "RUNNING",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task is running. Pause the task via `StorageTask.pause()`"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 191,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "running"
							}
						},
						{
							"id": 719,
							"name": "SUCCESS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task has completed successfully."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 196,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "success"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								715,
								716,
								717,
								718,
								719
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 172,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						855
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						745,
						720,
						764,
						735,
						730,
						707,
						810,
						712,
						847,
						798,
						714
					]
				}
			],
			"sources": [
				{
					"fileName": "storage/lib/index.d.ts",
					"line": 61,
					"character": 24
				}
			]
		},
		{
			"id": 883,
			"name": "Utils",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "React Native Firebase Utilities package.",
				"text": "#### Example 1\n\nAccess the firebase export from the `utils` package:\n\n```js\nimport { firebase } from '@react-native-firebase/utils';\n\n// firebase.utils().X\n```\n\n#### Example 2\n\nUsing the default export from the `utils` package:\n\n```js\nimport utils from '@react-native-firebase/utils';\n\n// utils().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/utils';\n\n// firebase.utils().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "utils\n"
					}
				]
			},
			"children": [
				{
					"id": 885,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The React Native Firebase Utils service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Utils service for the default app:\n\n```js\nconst defaultAppUtils = firebase.utils();\n```\n"
					},
					"children": [
						{
							"id": 887,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "analytics/node_modules/@react-native-firebase/app-types/index.d.ts",
									"line": 179,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ReactNativeFirebaseModule.app"
							}
						},
						{
							"id": 886,
							"name": "isRunningInTestLab",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns true if this app is running inside a Firebase Test Lab environment. Always returns false on iOS.",
								"tags": [
									{
										"tag": "android",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/lib/index.d.ts",
									"line": 82,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								887,
								886
							]
						}
					],
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 76,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ReactNativeFirebaseModule"
						}
					]
				},
				{
					"id": 884,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 61,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						885
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						884
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/lib/index.d.ts",
					"line": 60,
					"character": 22
				}
			]
		},
		{
			"id": 924,
			"name": "ReactNativeFirebaseModule",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 925,
					"name": "app",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 179,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseApp",
						"id": 906
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						925
					]
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 178,
					"character": 38
				}
			]
		},
		{
			"id": 906,
			"name": "FirebaseApp",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 907,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The name (identifier) for this App. '[DEFAULT]' is the default App."
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 124,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 908,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The (read-only) configuration options from the app initialization."
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 129,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseOptions",
						"id": 926
					}
				},
				{
					"id": 909,
					"name": "delete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 910,
							"name": "delete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Make this app unusable and free up resources."
							},
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 134,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						907,
						908
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						909
					]
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 120,
					"character": 28
				}
			]
		},
		{
			"id": 902,
			"name": "FirebaseAppConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 904,
					"name": "automaticDataCollectionEnabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 111,
							"character": 32
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 905,
					"name": "automaticResourceManagement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If set to true it indicates that Firebase should close database connections\nautomatically when the app is in the background. Disabled by default."
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 117,
							"character": 29
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 903,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The Firebase App name, defaults to [DEFAULT] if none provided."
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 106,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						904,
						905,
						903
					]
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 102,
					"character": 34
				}
			]
		},
		{
			"id": 893,
			"name": "NativeFirebaseError",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 901,
					"name": "Error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "D:/Code/react-native-firebase/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 974,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "ErrorConstructor"
					}
				},
				{
					"id": 894,
					"name": "code",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Firebase error code, e.g. `auth/invalid-email`"
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 22,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 895,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Firebase error message"
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 27,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"name": "Error.message"
					}
				},
				{
					"id": 899,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "D:/Code/react-native-firebase/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 963,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Error.name"
					}
				},
				{
					"id": 896,
					"name": "namespace",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The firebase module namespace that this error originated from, e.g. 'analytics'"
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 32,
							"character": 20
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 897,
					"name": "nativeErrorCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The native sdks returned error code, different per platform"
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 37,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 898,
					"name": "nativeErrorMessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The native sdks returned error message, different per platform"
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 42,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 900,
					"name": "stack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "D:/Code/react-native-firebase/node_modules/typescript/lib/lib.es5.d.ts",
							"line": 965,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "Error.stack"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Error.stack"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						901,
						894,
						895,
						899,
						896,
						897,
						898,
						900
					]
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 18,
					"character": 36
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Error"
				}
			]
		},
		{
			"id": 911,
			"name": "ReactNativeFirebaseNamespace",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 923,
					"name": "SDK_VERSION",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The current React Native Firebase version."
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 175,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 922,
					"name": "apps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A (read-only) array of all the initialized Apps."
					},
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 170,
							"character": 6
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "FirebaseApp",
							"id": 906
						}
					}
				},
				{
					"id": 919,
					"name": "app",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 920,
							"name": "app",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieve an instance of a FirebaseApp.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```js\nconst app = firebase.app('foo');\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 921,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "The optional name of the app to return ('[DEFAULT]' if omitted)\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp",
								"id": 906
							}
						}
					],
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 165,
							"character": 5
						}
					]
				},
				{
					"id": 912,
					"name": "initializeApp",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 913,
							"name": "initializeApp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create (and initialize) a FirebaseApp."
							},
							"parameters": [
								{
									"id": 914,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Options to configure the services used in the App."
									},
									"type": {
										"type": "reference",
										"name": "FirebaseOptions",
										"id": 926
									}
								},
								{
									"id": 915,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "The optional config for your firebase app\n"
									},
									"type": {
										"type": "reference",
										"name": "FirebaseAppConfig",
										"id": 902
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp",
								"id": 906
							}
						},
						{
							"id": 916,
							"name": "initializeApp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create (and initialize) a FirebaseApp."
							},
							"parameters": [
								{
									"id": 917,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Options to configure the services used in the App."
									},
									"type": {
										"type": "reference",
										"name": "FirebaseOptions",
										"id": 926
									}
								},
								{
									"id": 918,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "The optional name of the app to initialize ('[DEFAULT]' if\nomitted)\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp",
								"id": 906
							}
						}
					],
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 144,
							"character": 15
						},
						{
							"fileName": "app-types/index.d.ts",
							"line": 153,
							"character": 15
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						923,
						922
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						919,
						912
					]
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 137,
					"character": 45
				}
			]
		},
		{
			"id": 926,
			"name": "FirebaseOptions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 45,
					"character": 27
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 927,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"indexSignature": [
						{
							"id": 938,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 939,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"children": [
						{
							"id": 936,
							"name": "androidClientId",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "iOS only - The Android client ID used in Google AppInvite when an iOS app has its Android version, for\nexample \"12345.apps.googleusercontent.com\"."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 93,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 929,
							"name": "apiKey",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "An API key used for authenticating requests from your app, e.g.\n\"AIzaSyDdVgKwhZl0sTTTLZ7iTmt1r3N2cJLnaDk\", used to identify your app to Google servers."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 55,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 928,
							"name": "appId",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"comment": {
								"shortText": "The Google App ID that is used to uniquely identify an instance of an app."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 49,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 935,
							"name": "clientId",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "iOS only - The OAuth2 client ID for iOS application used to authenticate Google users, for example\n\"12345.apps.googleusercontent.com\", used for signing in with Google."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 87,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 930,
							"name": "databaseURL",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The database root URL, e.g. \"http://abc-xyz-123.firebaseio.com\"."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 60,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 937,
							"name": "deepLinkURLScheme",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "iOS only - The URL scheme used to set up Durable Deep Link service."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 98,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 932,
							"name": "gaTrackingId",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The tracking ID for Google Analytics, e.g. \"UA-12345678-1\", used to configure Google Analytics."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 70,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 934,
							"name": "messagingSenderId",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The Project Number from the Google Developer's console, for example \"012345678901\", used to\nconfigure Google Cloud Messaging."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 81,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 931,
							"name": "projectId",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"comment": {
								"shortText": "The Project ID from the Firebase console, for example \"abc-xyz-123\"."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 65,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 933,
							"name": "storageBucket",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The Google Cloud Storage bucket name, e.g. \"abc-xyz-123.storage.firebase.com\"."
							},
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 75,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								936,
								929,
								928,
								935,
								930,
								937,
								932,
								934,
								931,
								933
							]
						}
					],
					"sources": [
						{
							"fileName": "app-types/index.d.ts",
							"line": 45,
							"character": 29
						}
					]
				}
			}
		},
		{
			"id": 959,
			"name": "ReactNativeFirebaseModuleAndStatics",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 960,
					"name": "M",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 961,
					"name": "S",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 246,
					"character": 47
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 962,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 963,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "typeParameter",
										"name": "M"
									}
								}
							],
							"children": [
								{
									"id": 964,
									"name": "SDK_VERSION",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"comment": {
										"shortText": "This React Native Firebase module version."
									},
									"sources": [
										{
											"fileName": "app-types/index.d.ts",
											"line": 252,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										964
									]
								}
							],
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 246,
									"character": 60
								}
							]
						}
					},
					{
						"type": "typeParameter",
						"name": "S"
					}
				]
			}
		},
		{
			"id": 965,
			"name": "ReactNativeFirebaseModuleAndStaticsWithApp",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 966,
					"name": "M",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				},
				{
					"id": 967,
					"name": "S",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"sources": [
				{
					"fileName": "app-types/index.d.ts",
					"line": 255,
					"character": 54
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 968,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 969,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 970,
											"name": "app",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FirebaseApp",
												"id": 47
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "M"
									}
								}
							],
							"children": [
								{
									"id": 971,
									"name": "SDK_VERSION",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"comment": {
										"shortText": "This React Native Firebase module version."
									},
									"sources": [
										{
											"fileName": "app-types/index.d.ts",
											"line": 261,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										971
									]
								}
							],
							"sources": [
								{
									"fileName": "app-types/index.d.ts",
									"line": 255,
									"character": 67
								}
							]
						}
					},
					{
						"type": "typeParameter",
						"name": "S"
					}
				]
			}
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				40,
				50,
				44,
				333,
				387,
				429,
				448,
				459,
				508,
				532,
				599,
				610,
				699,
				875,
				888,
				1,
				940,
				59,
				340,
				394,
				436,
				455,
				466,
				516,
				539,
				606,
				617,
				706,
				883
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				924
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				906,
				902,
				893,
				911
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				926,
				959,
				965
			]
		}
	]
}