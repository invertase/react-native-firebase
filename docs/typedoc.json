{
	"id": 0,
	"name": "@react-native-firebase/analytics",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 40,
			"name": "\"@react-native-firebase/analytics\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 42,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 222,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 41,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 221,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 43,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 224,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						42,
						41,
						43
					]
				}
			],
			"sources": [
				{
					"fileName": "analytics/lib/index.d.ts",
					"line": 217,
					"character": 49
				}
			]
		},
		{
			"id": 44,
			"name": "\"@react-native-firebase/app\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "Attach namespace to `firebase.` and `FirebaseApp.`."
			},
			"children": [
				{
					"id": 45,
					"name": "ReactNativeFirebase",
					"kind": 2,
					"kindString": "Module",
					"flags": {},
					"children": [
						{
							"id": 48,
							"name": "FirebaseApp",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 49,
									"name": "analytics",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 50,
											"name": "analytics",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 3
											}
										}
									],
									"sources": [
										{
											"fileName": "analytics/lib/index.d.ts",
											"line": 239,
											"character": 15
										}
									]
								},
								{
									"id": 396,
									"name": "auth",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 397,
											"name": "auth",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 305
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 1586,
											"character": 10
										}
									]
								},
								{
									"id": 453,
									"name": "config",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 454,
											"name": "config",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 422
											}
										}
									],
									"sources": [
										{
											"fileName": "config/lib/index.d.ts",
											"line": 446,
											"character": 12
										}
									]
								},
								{
									"id": 495,
									"name": "crashlytics",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 496,
											"name": "crashlytics",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 457
											}
										}
									],
									"sources": [
										{
											"fileName": "crashlytics/lib/index.d.ts",
											"line": 250,
											"character": 17
										}
									]
								},
								{
									"id": 814,
									"name": "database",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 815,
											"name": "database",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 816,
													"name": "databaseUrl",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 785
											}
										}
									],
									"sources": [
										{
											"fileName": "database/lib/index.d.ts",
											"line": 1239,
											"character": 14
										}
									]
								},
								{
									"id": 835,
									"name": "fiam",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 836,
											"name": "fiam",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 820
											}
										}
									],
									"sources": [
										{
											"fileName": "fiam/lib/index.d.ts",
											"line": 157,
											"character": 10
										}
									]
								},
								{
									"id": 1179,
									"name": "firestore",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1180,
											"name": "firestore",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1147
											}
										}
									],
									"sources": [
										{
											"fileName": "firestore/lib/index.d.ts",
											"line": 1777,
											"character": 15
										}
									]
								},
								{
									"id": 1229,
									"name": "functions",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1230,
											"name": "functions",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1231,
													"name": "region",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1214
											}
										}
									],
									"sources": [
										{
											"fileName": "functions/lib/index.d.ts",
											"line": 361,
											"character": 15
										}
									]
								},
								{
									"id": 1253,
									"name": "iid",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1254,
											"name": "iid",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1234
											}
										}
									],
									"sources": [
										{
											"fileName": "iid/lib/index.d.ts",
											"line": 154,
											"character": 9
										}
									]
								},
								{
									"id": 1269,
									"name": "indexing",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1270,
											"name": "indexing",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1257
											}
										}
									],
									"sources": [
										{
											"fileName": "indexing/lib/index.d.ts",
											"line": 115,
											"character": 14
										}
									]
								},
								{
									"id": 1336,
									"name": "invites",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1337,
											"name": "invites",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1313
											}
										}
									],
									"sources": [
										{
											"fileName": "invites/lib/index.d.ts",
											"line": 429,
											"character": 13
										}
									]
								},
								{
									"id": 1454,
									"name": "links",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1455,
											"name": "links",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1424
											}
										}
									],
									"sources": [
										{
											"fileName": "links/lib/index.d.ts",
											"line": 568,
											"character": 11
										}
									]
								},
								{
									"id": 1567,
									"name": "messaging",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1568,
											"name": "messaging",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1493
											}
										}
									],
									"sources": [
										{
											"fileName": "messaging/lib/index.d.ts",
											"line": 680,
											"character": 15
										}
									]
								},
								{
									"id": 1612,
									"name": "mlKitLanguage",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 1613,
											"name": "mlKitLanguage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1594
											}
										}
									],
									"sources": [
										{
											"fileName": "ml-natural-language/lib/index.d.ts",
											"line": 281,
											"character": 19
										}
									]
								},
								{
									"id": 2029,
									"name": "mlKitVision",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2030,
											"name": "mlKitVision",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 1964
											}
										}
									],
									"sources": [
										{
											"fileName": "ml-vision/lib/index.d.ts",
											"line": 1265,
											"character": 17
										}
									]
								},
								{
									"id": 2123,
									"name": "perf",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2124,
											"name": "perf",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 2101
											}
										}
									],
									"sources": [
										{
											"fileName": "perf/lib/index.d.ts",
											"line": 462,
											"character": 10
										}
									]
								},
								{
									"id": 2303,
									"name": "storage",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2304,
											"name": "storage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2305,
													"name": "bucket",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 2278
											}
										}
									],
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 1151,
											"character": 13
										}
									]
								},
								{
									"id": 2316,
									"name": "utils",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2317,
											"name": "utils",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Module",
												"id": 2308
											}
										}
									],
									"sources": [
										{
											"fileName": "utils/lib/index.d.ts",
											"line": 112,
											"character": 11
										}
									]
								}
							],
							"groups": [
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										49,
										396,
										453,
										495,
										814,
										835,
										1179,
										1229,
										1253,
										1269,
										1336,
										1454,
										1567,
										1612,
										2029,
										2123,
										2303,
										2316
									]
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 238,
									"character": 25
								},
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1585,
									"character": 25
								},
								{
									"fileName": "config/lib/index.d.ts",
									"line": 445,
									"character": 25
								},
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 249,
									"character": 25
								},
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1238,
									"character": 25
								},
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 156,
									"character": 25
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1776,
									"character": 25
								},
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 360,
									"character": 25
								},
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 153,
									"character": 25
								},
								{
									"fileName": "indexing/lib/index.d.ts",
									"line": 114,
									"character": 25
								},
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 428,
									"character": 25
								},
								{
									"fileName": "links/lib/index.d.ts",
									"line": 567,
									"character": 25
								},
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 679,
									"character": 25
								},
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 280,
									"character": 25
								},
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1264,
									"character": 25
								},
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 461,
									"character": 25
								},
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1150,
									"character": 25
								},
								{
									"fileName": "utils/lib/index.d.ts",
									"line": 111,
									"character": 25
								}
							]
						},
						{
							"id": 51,
							"name": "FirebaseConfig",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 52,
									"name": "analytics_auto_collection_enabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Disable or enable auto collection of analytics data.",
										"text": "This is useful for opt-in-first data flows, for example when dealing with GDPR compliance.\nThis can be overridden in JavaScript.\n\n#### Example\n\n```json\n// <project-root>/firebase.json\n{\n  \"react-native\": {\n    \"analytics_auto_collection_enabled\": false\n  }\n}\n```\n\n```js\n// Re-enable analytics data collection, e.g. once user has granted permission:\nawait firebase.analytics().setAnalyticsCollectionEnabled(true);\n```\n"
									},
									"sources": [
										{
											"fileName": "analytics/lib/index.d.ts",
											"line": 265,
											"character": 39
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 817,
									"name": "database_persistence_enabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Set whether database persistence is enabled or disabled.",
										"text": "This can be overridden in JavaScript, e.g. when requesting permission or on a condition.\n\n#### Example\n\n```json\n// <project-root>/firebase.json\n{\n  \"react-native\": {\n    \"database_persistence_enabled\": false\n  }\n}\n```\n\n```js\n// Re-enable database persistence\nawait firebase.database().setPersistenceEnabled(true);\n```\n"
									},
									"sources": [
										{
											"fileName": "database/lib/index.d.ts",
											"line": 1264,
											"character": 34
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 837,
									"name": "fiam_auto_collection_enabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Disable or enable auto collection & receiving of in-app messages and data collection.",
										"text": "This is useful for opt-in-first data flows, for example when dealing with GDPR compliance.\nThis can be overridden in JavaScript.\n\n#### Example\n\n```json\n// <project-root>/firebase.json\n{\n  \"react-native\": {\n    \"fiam_auto_collection_enabled\": false\n  }\n}\n```\n\n```js\n// Re-enable in-app messaging, e.g. once user has granted permission:\nawait firebase.perf().setAutomaticDataCollectionEnabled(true);\n```\n"
									},
									"sources": [
										{
											"fileName": "fiam/lib/index.d.ts",
											"line": 183,
											"character": 34
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1570,
									"name": "messaging_android_headless_task_timeout",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "messaging/lib/index.d.ts",
											"line": 685,
											"character": 45
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1569,
									"name": "messaging_auto_init_enabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "messaging/lib/index.d.ts",
											"line": 684,
											"character": 33
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1614,
									"name": "ml_natural_language_language_id_model",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-natural-language/lib/index.d.ts",
											"line": 285,
											"character": 43
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1615,
									"name": "ml_natural_language_smart_reply_model",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-natural-language/lib/index.d.ts",
											"line": 286,
											"character": 43
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2033,
									"name": "ml_vision_barcode_model",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-vision/lib/index.d.ts",
											"line": 1271,
											"character": 29
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2031,
									"name": "ml_vision_face_model",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-vision/lib/index.d.ts",
											"line": 1269,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2035,
									"name": "ml_vision_image_label_model",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-vision/lib/index.d.ts",
											"line": 1273,
											"character": 33
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2034,
									"name": "ml_vision_label_model",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-vision/lib/index.d.ts",
											"line": 1272,
											"character": 27
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2032,
									"name": "ml_vision_ocr_model",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-vision/lib/index.d.ts",
											"line": 1270,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2125,
									"name": "perf_auto_collection_enabled",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Disable or enable auto collection of performance monitoring data collection.",
										"text": "This is useful for opt-in-first data flows, for example when dealing with GDPR compliance.\nThis can be overridden in JavaScript.\n\n#### Example\n\n```json\n// <project-root>/firebase.json\n{\n  \"react-native\": {\n    \"perf_auto_collection_enabled\": false\n  }\n}\n```\n\n```js\n// Re-enable performance monitoring data collection, e.g. once user has granted permission:\nawait firebase.perf().setPerformanceCollectionEnabled(true);\n```\n"
									},
									"sources": [
										{
											"fileName": "perf/lib/index.d.ts",
											"line": 487,
											"character": 34
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										52,
										817,
										837,
										1570,
										1569,
										1614,
										1615,
										2033,
										2031,
										2035,
										2034,
										2032,
										2125
									]
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 242,
									"character": 28
								},
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1242,
									"character": 28
								},
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 160,
									"character": 28
								},
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 683,
									"character": 28
								},
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 284,
									"character": 28
								},
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1268,
									"character": 28
								},
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 464,
									"character": 28
								}
							]
						},
						{
							"id": 46,
							"name": "Module",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 47,
									"name": "analytics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "analytics/lib/index.d.ts",
											"line": 235,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 3
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 2
											}
										]
									}
								},
								{
									"id": 395,
									"name": "auth",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 1583,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 305
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 148
											}
										]
									}
								},
								{
									"id": 452,
									"name": "config",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "config/lib/index.d.ts",
											"line": 443,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 422
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 408
											}
										]
									}
								},
								{
									"id": 494,
									"name": "crashlytics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "crashlytics/lib/index.d.ts",
											"line": 247,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 457
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 456
											}
										]
									}
								},
								{
									"id": 813,
									"name": "database",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "database/lib/index.d.ts",
											"line": 1235,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 785
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 500
											}
										]
									}
								},
								{
									"id": 834,
									"name": "fiam",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "fiam/lib/index.d.ts",
											"line": 153,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 820
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 819
											}
										]
									}
								},
								{
									"id": 1178,
									"name": "firestore",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "firestore/lib/index.d.ts",
											"line": 1774,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1147
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1137
											}
										]
									}
								},
								{
									"id": 1228,
									"name": "functions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "functions/lib/index.d.ts",
											"line": 358,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1214
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1212
											}
										]
									}
								},
								{
									"id": 1252,
									"name": "iid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "iid/lib/index.d.ts",
											"line": 151,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1234
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1233
											}
										]
									}
								},
								{
									"id": 1268,
									"name": "indexing",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "indexing/lib/index.d.ts",
											"line": 112,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1257
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1256
											}
										]
									}
								},
								{
									"id": 1335,
									"name": "invites",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "invites/lib/index.d.ts",
											"line": 426,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1313
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1272
											}
										]
									}
								},
								{
									"id": 1453,
									"name": "links",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "links/lib/index.d.ts",
											"line": 565,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1424
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1422
											}
										]
									}
								},
								{
									"id": 1566,
									"name": "messaging",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "messaging/lib/index.d.ts",
											"line": 676,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1493
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1457
											}
										]
									}
								},
								{
									"id": 1611,
									"name": "mlKitLanguage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-natural-language/lib/index.d.ts",
											"line": 277,
											"character": 19
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1594
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1572
											}
										]
									}
								},
								{
									"id": 2028,
									"name": "mlKitVision",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "ml-vision/lib/index.d.ts",
											"line": 1261,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 1964
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 1747
											}
										]
									}
								},
								{
									"id": 2122,
									"name": "perf",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "perf/lib/index.d.ts",
											"line": 459,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 2101
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 2100
											}
										]
									}
								},
								{
									"id": 2302,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 1148,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStaticsAndApp",
										"id": 109,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 2278
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 2150
											}
										]
									}
								},
								{
									"id": 2315,
									"name": "utils",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Utils provides a collection of utilities to aid in using Firebase\nand related services inside React Native, e.g. Test Lab helpers\nand Google Play Services version helpers."
									},
									"sources": [
										{
											"fileName": "utils/lib/index.d.ts",
											"line": 108,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseModuleWithStatics",
										"id": 103,
										"typeArguments": [
											{
												"type": "reference",
												"name": "Module",
												"id": 2308
											},
											{
												"type": "reference",
												"name": "Statics",
												"id": 2307
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										47,
										395,
										452,
										494,
										813,
										834,
										1178,
										1228,
										1252,
										1268,
										1335,
										1453,
										1566,
										1611,
										2028,
										2122,
										2302,
										2315
									]
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 234,
									"character": 20
								},
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1582,
									"character": 20
								},
								{
									"fileName": "config/lib/index.d.ts",
									"line": 442,
									"character": 20
								},
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 246,
									"character": 20
								},
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1234,
									"character": 20
								},
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 152,
									"character": 20
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1773,
									"character": 20
								},
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 357,
									"character": 20
								},
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 150,
									"character": 20
								},
								{
									"fileName": "indexing/lib/index.d.ts",
									"line": 111,
									"character": 20
								},
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 425,
									"character": 20
								},
								{
									"fileName": "links/lib/index.d.ts",
									"line": 564,
									"character": 20
								},
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 675,
									"character": 20
								},
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 276,
									"character": 20
								},
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1260,
									"character": 20
								},
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 458,
									"character": 20
								},
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1147,
									"character": 20
								},
								{
									"fileName": "utils/lib/index.d.ts",
									"line": 102,
									"character": 20
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								48,
								51,
								46
							]
						}
					],
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 232,
							"character": 31
						},
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1580,
							"character": 31
						},
						{
							"fileName": "config/lib/index.d.ts",
							"line": 440,
							"character": 31
						},
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 244,
							"character": 31
						},
						{
							"fileName": "database/lib/index.d.ts",
							"line": 1232,
							"character": 31
						},
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 150,
							"character": 31
						},
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1771,
							"character": 31
						},
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 355,
							"character": 31
						},
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 148,
							"character": 31
						},
						{
							"fileName": "indexing/lib/index.d.ts",
							"line": 109,
							"character": 31
						},
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 423,
							"character": 31
						},
						{
							"fileName": "links/lib/index.d.ts",
							"line": 562,
							"character": 31
						},
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 673,
							"character": 31
						},
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 273,
							"character": 31
						},
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 1258,
							"character": 31
						},
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 456,
							"character": 31
						},
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1145,
							"character": 31
						},
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 99,
							"character": 31
						}
					]
				},
				{
					"id": 116,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 212,
							"character": 14
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "Module"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						45
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						116
					]
				}
			],
			"sources": [
				{
					"fileName": "analytics/lib/index.d.ts",
					"line": 231,
					"character": 43
				},
				{
					"fileName": "app/lib/index.d.ts",
					"line": 211,
					"character": 43
				},
				{
					"fileName": "auth/lib/index.d.ts",
					"line": 1579,
					"character": 43
				},
				{
					"fileName": "config/lib/index.d.ts",
					"line": 439,
					"character": 43
				},
				{
					"fileName": "crashlytics/lib/index.d.ts",
					"line": 243,
					"character": 43
				},
				{
					"fileName": "database/lib/index.d.ts",
					"line": 1231,
					"character": 43
				},
				{
					"fileName": "fiam/lib/index.d.ts",
					"line": 149,
					"character": 43
				},
				{
					"fileName": "firestore/lib/index.d.ts",
					"line": 1770,
					"character": 43
				},
				{
					"fileName": "functions/lib/index.d.ts",
					"line": 354,
					"character": 43
				},
				{
					"fileName": "iid/lib/index.d.ts",
					"line": 147,
					"character": 43
				},
				{
					"fileName": "indexing/lib/index.d.ts",
					"line": 108,
					"character": 43
				},
				{
					"fileName": "invites/lib/index.d.ts",
					"line": 422,
					"character": 43
				},
				{
					"fileName": "links/lib/index.d.ts",
					"line": 561,
					"character": 43
				},
				{
					"fileName": "messaging/lib/index.d.ts",
					"line": 672,
					"character": 43
				},
				{
					"fileName": "ml-natural-language/lib/index.d.ts",
					"line": 272,
					"character": 43
				},
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1257,
					"character": 43
				},
				{
					"fileName": "perf/lib/index.d.ts",
					"line": 455,
					"character": 43
				},
				{
					"fileName": "storage/lib/index.d.ts",
					"line": 1144,
					"character": 43
				},
				{
					"fileName": "utils/lib/index.d.ts",
					"line": 98,
					"character": 43
				}
			]
		},
		{
			"id": 391,
			"name": "\"@react-native-firebase/auth\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 393,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1570,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 392,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1569,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 394,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1572,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						393,
						392,
						394
					]
				}
			],
			"sources": [
				{
					"fileName": "auth/lib/index.d.ts",
					"line": 1565,
					"character": 44
				}
			]
		},
		{
			"id": 448,
			"name": "\"@react-native-firebase/config\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 450,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 430,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 449,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 429,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 451,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 432,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						450,
						449,
						451
					]
				}
			],
			"sources": [
				{
					"fileName": "config/lib/index.d.ts",
					"line": 425,
					"character": 46
				}
			]
		},
		{
			"id": 490,
			"name": "\"@react-native-firebase/crashlytics\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 492,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 234,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 491,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 233,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 493,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 236,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						492,
						491,
						493
					]
				}
			],
			"sources": [
				{
					"fileName": "crashlytics/lib/index.d.ts",
					"line": 229,
					"character": 51
				}
			]
		},
		{
			"id": 809,
			"name": "\"@react-native-firebase/database\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 811,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 1222,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 810,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 1221,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 812,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 1224,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						811,
						810,
						812
					]
				}
			],
			"sources": [
				{
					"fileName": "database/lib/index.d.ts",
					"line": 1217,
					"character": 48
				}
			]
		},
		{
			"id": 830,
			"name": "\"@react-native-firebase/fiam\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 832,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 140,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 831,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 139,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 833,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 142,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						832,
						831,
						833
					]
				}
			],
			"sources": [
				{
					"fileName": "fiam/lib/index.d.ts",
					"line": 135,
					"character": 44
				}
			]
		},
		{
			"id": 1174,
			"name": "\"@react-native-firebase/firestore\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1176,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1761,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1175,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1760,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1177,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1763,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1176,
						1175,
						1177
					]
				}
			],
			"sources": [
				{
					"fileName": "firestore/lib/index.d.ts",
					"line": 1756,
					"character": 49
				}
			]
		},
		{
			"id": 1223,
			"name": "\"@react-native-firebase/functions\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1224,
					"name": "HttpsErrorCode",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 342,
							"character": 29
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "HttpsErrorCode"
							}
						]
					}
				},
				{
					"id": 1226,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 345,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1225,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 344,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1227,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 347,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1224,
						1226,
						1225,
						1227
					]
				}
			],
			"sources": [
				{
					"fileName": "functions/lib/index.d.ts",
					"line": 337,
					"character": 49
				}
			]
		},
		{
			"id": 1248,
			"name": "\"@react-native-firebase/iid\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1250,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 138,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1249,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 137,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1251,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 140,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1250,
						1249,
						1251
					]
				}
			],
			"sources": [
				{
					"fileName": "iid/lib/index.d.ts",
					"line": 133,
					"character": 43
				}
			]
		},
		{
			"id": 1264,
			"name": "\"@react-native-firebase/indexing\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1266,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "indexing/lib/index.d.ts",
							"line": 99,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1265,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "indexing/lib/index.d.ts",
							"line": 98,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1267,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "indexing/lib/index.d.ts",
							"line": 101,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1266,
						1265,
						1267
					]
				}
			],
			"sources": [
				{
					"fileName": "indexing/lib/index.d.ts",
					"line": 94,
					"character": 48
				}
			]
		},
		{
			"id": 1331,
			"name": "\"@react-native-firebase/invites\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1333,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 413,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1332,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 412,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1334,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 415,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1333,
						1332,
						1334
					]
				}
			],
			"sources": [
				{
					"fileName": "invites/lib/index.d.ts",
					"line": 408,
					"character": 47
				}
			]
		},
		{
			"id": 1449,
			"name": "\"@react-native-firebase/links\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1451,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 552,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1450,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 551,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1452,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 554,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1451,
						1450,
						1452
					]
				}
			],
			"sources": [
				{
					"fileName": "links/lib/index.d.ts",
					"line": 547,
					"character": 45
				}
			]
		},
		{
			"id": 1562,
			"name": "\"@react-native-firebase/messaging\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1564,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 663,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1563,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 662,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1565,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 665,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1564,
						1563,
						1565
					]
				}
			],
			"sources": [
				{
					"fileName": "messaging/lib/index.d.ts",
					"line": 658,
					"character": 49
				}
			]
		},
		{
			"id": 1607,
			"name": "\"@react-native-firebase/ml-natural-language\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1609,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 263,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 1608,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 262,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 1610,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 265,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1609,
						1608,
						1610
					]
				}
			],
			"sources": [
				{
					"fileName": "ml-natural-language/lib/index.d.ts",
					"line": 258,
					"character": 59
				}
			]
		},
		{
			"id": 2024,
			"name": "\"@react-native-firebase/ml-vision\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2026,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 1248,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 2025,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 1247,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 2027,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 1250,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2026,
						2025,
						2027
					]
				}
			],
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1243,
					"character": 49
				}
			]
		},
		{
			"id": 2118,
			"name": "\"@react-native-firebase/perf\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2120,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 446,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 2119,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 445,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 2121,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 448,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2120,
						2119,
						2121
					]
				}
			],
			"sources": [
				{
					"fileName": "perf/lib/index.d.ts",
					"line": 441,
					"character": 44
				}
			]
		},
		{
			"id": 2298,
			"name": "\"@react-native-firebase/storage\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2300,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1135,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 2299,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1134,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 2301,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1137,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStaticsAndApp",
						"id": 109,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2300,
						2299,
						2301
					]
				}
			],
			"sources": [
				{
					"fileName": "storage/lib/index.d.ts",
					"line": 1130,
					"character": 47
				}
			]
		},
		{
			"id": 2311,
			"name": "\"@react-native-firebase/utils\"",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2313,
					"name": "firebase",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 89,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Module"
					},
					"defaultValue": " firebaseNamedExport"
				},
				{
					"id": 2312,
					"name": "firebaseNamedExport",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 88,
							"character": 27
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "__type"
							},
							{
								"type": "reference",
								"name": "ReactNativeFirebaseModule"
							}
						]
					}
				},
				{
					"id": 2314,
					"name": "module",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 91,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "FirebaseModuleWithStatics",
						"id": 103,
						"typeArguments": [
							{
								"type": "reference",
								"name": "Module"
							},
							{
								"type": "reference",
								"name": "Statics"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2313,
						2312,
						2314
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/lib/index.d.ts",
					"line": 84,
					"character": 45
				}
			]
		},
		{
			"id": 1,
			"name": "Analytics",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Analytics package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `analytics` package:\n\n```js\nimport { firebase } from '@react-native-firebase/analytics';\n\n// firebase.analytics().X\n```\n\n#### Example 2\n\nUsing the default export from the `analytics` package:\n\n```js\nimport analytics from '@react-native-firebase/analytics';\n\n// analytics().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/analytics';\n\n// firebase.analytics().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "analytics\n"
					}
				]
			},
			"children": [
				{
					"id": 3,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Analytics service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Analytics service for the default app:\n\n```js\nconst defaultAppAnalytics = firebase.analytics();\n```\n"
					},
					"children": [
						{
							"id": 39,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 4,
							"name": "logEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 5,
									"name": "logEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Log a custom event with optional params.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().logEvent('product_view', {\n  id: '1234',\n});\n```\n\n> 100 characters is the maximum length for param key names.\n"
									},
									"parameters": [
										{
											"id": 6,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Event name must not conflict with any Reserved Events."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 7,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Parameters to be sent and displayed with the event.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 8,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 9,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 10,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "analytics/lib/index.d.ts",
															"line": 92,
															"character": 34
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 92,
									"character": 12
								}
							]
						},
						{
							"id": 37,
							"name": "resetAnalyticsData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 38,
									"name": "resetAnalyticsData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all analytics data for this instance from the device and resets the app instance ID.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().resetAnalyticsData();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 213,
									"character": 22
								}
							]
						},
						{
							"id": 11,
							"name": "setAnalyticsCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 12,
									"name": "setAnalyticsCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If true, allows the device to collect analytical data and send it to\nFirebase. Useful for GDPR.",
										"text": "#### Example\n\n```js\n// Disable collection\nawait firebase.analytics().setAnalyticsCollectionEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 13,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A boolean value representing whether Analytics collection is enabled or disabled. Analytics collection is enabled by default.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 107,
									"character": 33
								}
							]
						},
						{
							"id": 14,
							"name": "setCurrentScreen",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 15,
									"name": "setCurrentScreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the current screen name.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().setCurrentScreen('ProductScreen', 'ProductScreen');\n```\n\n> Whilst screenClassOverride is optional, it is recommended it is\nalways sent as your current class name. For example on Android it will always\nshow as 'MainActivity' if you do not specify it.\n"
									},
									"parameters": [
										{
											"id": 16,
											"name": "screenName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A screen name, e.g. Product."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 17,
											"name": "screenClassOverride",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "On Android, React Native runs in a single activity called\n'MainActivity'. Setting this parameter overrides the default name shown on logs.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 126,
									"character": 20
								}
							]
						},
						{
							"id": 18,
							"name": "setMinimumSessionDuration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 19,
									"name": "setMinimumSessionDuration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the minimum engagement time required before starting a session.",
										"text": "#### Example\n\n```js\n// 20 seconds\nawait firebase.analytics().setMinimumSessionDuration(20000);\n```\n"
									},
									"parameters": [
										{
											"id": 20,
											"name": "milliseconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The default value is 10000 (10 seconds).\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 140,
									"character": 29
								}
							]
						},
						{
							"id": 21,
							"name": "setSessionTimeoutDuration",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 22,
									"name": "setSessionTimeoutDuration",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the duration of inactivity that terminates the current session.",
										"text": "#### Example\n\n```js\n// 20 minutes\nawait firebase.analytics().setMinimumSessionDuration(900000);\n```\n"
									},
									"parameters": [
										{
											"id": 23,
											"name": "milliseconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The default value is 1800000 (30 minutes).\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 154,
									"character": 29
								}
							]
						},
						{
							"id": 24,
							"name": "setUserId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 25,
									"name": "setUserId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gives a user a unique identification.",
										"text": "#### Example\n\n```js\n// Set User\nawait firebase.analytics().setUserId('123456789');\n// Remove User\nawait firebase.analytics().setUserId(null);\n```\n"
									},
									"parameters": [
										{
											"id": 26,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set to null to remove a previously assigned id from analytics\nevents\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 171,
									"character": 13
								}
							]
						},
						{
							"id": 31,
							"name": "setUserProperties",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 32,
									"name": "setUserProperties",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets multiple key/value pair of data on the current user.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().setUserProperties({\n  account_type: 'gold',\n  account_name: 'Gold Badge',\n});\n```\n",
										"tags": [
											{
												"tag": "react-native-firebase",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 33,
											"name": "properties",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set a property value to null to remove it.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 34,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 35,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 36,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "null"
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "analytics/lib/index.d.ts",
															"line": 202,
															"character": 33
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 202,
									"character": 21
								}
							]
						},
						{
							"id": 27,
							"name": "setUserProperty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 28,
									"name": "setUserProperty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a key/value pair of data on the current user.",
										"text": "#### Example\n\n```js\nawait firebase.analytics().setUserProperty('account_type', 'gold');\n```\n"
									},
									"parameters": [
										{
											"id": 29,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A user property identifier."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 30,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Set to null to remove a previously assigned id from analytics events.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "analytics/lib/index.d.ts",
									"line": 185,
									"character": 19
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								39
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								4,
								37,
								11,
								14,
								18,
								21,
								24,
								31,
								27
							]
						}
					],
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 75,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 2,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "analytics/lib/index.d.ts",
							"line": 60,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "analytics/lib/index.d.ts",
					"line": 57,
					"character": 26
				}
			]
		},
		{
			"id": 117,
			"name": "Auth",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Authentication package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `auth` package:\n\n```js\nimport { firebase } from '@react-native-firebase/auth';\n\n// firebase.auth().X\n```\n\n#### Example 2\n\nUsing the default export from the `auth` package:\n\n```js\nimport auth from '@react-native-firebase/auth';\n\n// auth().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/auth';\n\n// firebase.auth().X\n```\nTODO @salakar @ehesp missing auth providers (PhoneAuthProvider, Facebook etc)\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "auth\n"
					}
				]
			},
			"children": [
				{
					"id": 305,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Authentication service is available for the default app or a given app.",
						"text": "#### Example 1\n\nGet the auth instance for the **default app**:\n\n```js\nconst authForDefaultApp = firebase.auth();\n```\n\n#### Example 2\n\nGet the auth instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst authForOtherApp = firebase.auth(otherApp);\n```\n\nTODO @salakar missing updateCurrentUser\n"
					},
					"children": [
						{
							"id": 386,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 310,
							"name": "settings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the current `AuthSettings`."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1161,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthSettings",
								"id": 252
							}
						},
						{
							"id": 311,
							"name": "currentUser",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the currently signed-in user (or null if no user signed in). See the User interface documentation for detailed usage.",
								"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser;\n```\n\n> It is recommended to use {@link auth#onAuthStateChanged} to track whether the user is currently signed in.\n"
							},
							"getSignature": [
								{
									"id": 312,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the currently signed-in user (or null if no user signed in). See the User interface documentation for detailed usage.",
										"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser;\n```\n\n> It is recommended to use {@link auth#onAuthStateChanged} to track whether the user is currently signed in.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "User",
												"id": 258
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1174,
									"character": 19
								}
							]
						},
						{
							"id": 306,
							"name": "languageCode",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the current language code.\nSets the language code.",
								"text": "#### Example\n\n```js\nconst language = firebase.auth().languageCode;\n```\n\n#### Example\n\n```js\n// Set language to French\nfirebase.auth().languageCode = 'fr';\n```\n"
							},
							"getSignature": [
								{
									"id": 307,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the current language code.",
										"text": "#### Example\n\n```js\nconst language = firebase.auth().languageCode;\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"setSignature": [
								{
									"id": 308,
									"name": "__set",
									"kind": 1048576,
									"kindString": "Set signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the language code.",
										"text": "#### Example\n\n```js\n// Set language to French\nfirebase.auth().languageCode = 'fr';\n```\n"
									},
									"parameters": [
										{
											"id": 309,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An ISO language code.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1142,
									"character": 20
								},
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1156,
									"character": 20
								}
							]
						},
						{
							"id": 374,
							"name": "applyActionCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 375,
									"name": "applyActionCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Applies a verification code sent to the user by email or other out-of-band mechanism.",
										"text": "#### Example\n\n```js\nawait firebase.auth().applyActionCode('ABCD');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the action code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the action code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given action code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the action code. This may have happened if the user was deleted between when the action code was issued and when this method was called."
											}
										]
									},
									"parameters": [
										{
											"id": 376,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A verification code sent to the user.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1507,
									"character": 19
								}
							]
						},
						{
							"id": 377,
							"name": "checkActionCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 378,
									"name": "checkActionCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks a verification code sent to the user by email or other out-of-band mechanism.",
										"text": "#### Example\n\n```js\nconst actionCodeInfo = await firebase.auth().checkActionCode('ABCD');\nconsole.log('Action code operation: ', actionCodeInfo.operation);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the action code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the action code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given action code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the action code. This may have happened if the user was deleted between when the action code was issued and when this method was called."
											}
										]
									},
									"parameters": [
										{
											"id": 379,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A verification code sent to the user.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ActionCodeInfo",
												"id": 200
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1525,
									"character": 19
								}
							]
						},
						{
							"id": 370,
							"name": "confirmPasswordReset",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 371,
									"name": "confirmPasswordReset",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Completes the password reset process with the confirmation code and new password, via\n{@link auth#sendPasswordResetEmail}.",
										"text": "#### Example\n\n```js\nawait firebase.auth().confirmPasswordReset('ABCD', '1234567');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the password reset code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the password reset code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given password reset code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the password reset code. This may have happened if the user was deleted between when the code was issued and when this method was called."
											},
											{
												"tag": "error",
												"text": "auth/weak-password Thrown if the new password is not strong enough."
											}
										]
									},
									"parameters": [
										{
											"id": 372,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code from the password reset email."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 373,
											"name": "newPassword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1490,
									"character": 24
								}
							]
						},
						{
							"id": 341,
							"name": "createUserWithEmailAndPassword",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 342,
									"name": "createUserWithEmailAndPassword",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new user with an email and password.",
										"text": "This method also signs the user in once the account has been created.\n\n#### Example\n\n```js\nconst userCredential = await firebase.auth().createUserWithEmailAndPassword('joe.bloggs@example.com', '123456');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/email-already-in-use Thrown if there already exists an account with the given email address."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if email/password accounts are not enabled. Enable email/password accounts in the Firebase Console, under the Auth tab."
											},
											{
												"tag": "error",
												"text": "auth/weak-password Thrown if the password is not strong enough."
											}
										]
									},
									"parameters": [
										{
											"id": 343,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 344,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1337,
									"character": 34
								}
							]
						},
						{
							"id": 380,
							"name": "fetchSignInMethodsForEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 381,
									"name": "fetchSignInMethodsForEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a list of authentication methods that can be used to sign in a given user (identified by its main email address).",
										"text": "#### Example\n\n```js\nconst methods = await firebase.auth().fetchSignInMethodsForEmail('joe.bloggs@example.com');\n\nmethods.forEach((method) => {\n  console.log(method);\n});\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 382,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1543,
									"character": 30
								}
							]
						},
						{
							"id": 363,
							"name": "isSignInWithEmailLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 364,
									"name": "isSignInWithEmailLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether the user signed in with a given email link.",
										"text": "#### Example\n\n```js\nconst signedInWithLink = firebase.auth().isSignInWithEmailLink(link);\n```\n"
									},
									"parameters": [
										{
											"id": 365,
											"name": "emailLink",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The email link to check whether the user signed in with it.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1453,
									"character": 25
								}
							]
						},
						{
							"id": 313,
							"name": "onAuthStateChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 314,
									"name": "onAuthStateChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen for changes in the users auth state (logging in and out).\nThis method returns a unsubscribe function to stop listening to events.\nAlways ensure you unsubscribe from the listener when no longer needed to prevent updates to components no longer in use.",
										"text": "#### Example\n\n```js\nconst unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n  if (user) {\n    // Signed in\n  } else {\n    // Signed out\n  }\n});\n\n// Unsubscribe from further state changes\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 315,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener function which triggers when auth state changed (for example signing out).\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthListenerCallback",
												"id": 387
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 316,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 317,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "auth/lib/index.d.ts",
													"line": 1198,
													"character": 55
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1198,
									"character": 22
								}
							]
						},
						{
							"id": 318,
							"name": "onIdTokenChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 319,
									"name": "onIdTokenChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen for changes in id token.\nThis method returns a unsubscribe function to stop listening to events.\nAlways ensure you unsubscribe from the listener when no longer needed to prevent updates to components no longer in use.",
										"text": "#### Example\n\n```js\nconst unsubscribe = firebase.auth().onIdTokenChanged((user) => {\n  if (user) {\n    // User is signed in or token was refreshed.\n  }\n});\n\n// Unsubscribe from further state changes\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 320,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener function which triggers when the users ID token changes.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthListenerCallback",
												"id": 387
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 321,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 322,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "auth/lib/index.d.ts",
													"line": 1220,
													"character": 53
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1220,
									"character": 20
								}
							]
						},
						{
							"id": 323,
							"name": "onUserChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 324,
									"name": "onUserChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a listener to observe changes to the User object. This is a superset of everything from\n{@link auth#onAuthStateChanged}, {@link auth#onIdTokenChanged} and user changes. The goal of this\nmethod is to provide easier listening to all user changes, such as when credentials are\nlinked and unlinked, without manually having to call {@link auth.User#reload}.",
										"text": "#### Example\n\n```js\nconst unsubscribe = firebase.auth().onUserChanged((user) => {\n  if (user) {\n    // User is signed in or token was refreshed.\n  }\n});\n\n// Unsubscribe from further state changes\nunsubscribe();\n```\n\n> This is an experimental feature and is only part of React Native Firebase.\n",
										"tags": [
											{
												"tag": "react-native-firebase",
												"text": ""
											}
										]
									},
									"parameters": [
										{
											"id": 325,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A listener function which triggers when the users data changes.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthListenerCallback",
												"id": 387
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 326,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 327,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "auth/lib/index.d.ts",
													"line": 1246,
													"character": 50
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1246,
									"character": 17
								}
							]
						},
						{
							"id": 355,
							"name": "sendPasswordResetEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 356,
									"name": "sendPasswordResetEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a password reset email to the given email address.\nUnlike the web SDK, the email will contain a password reset link rather than a code.",
										"text": "#### Example\n\n```js\nawait firebase.auth().sendPasswordResetEmail('joe.bloggs@example.com');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/missing-android-pkg-name An Android package name must be provided if the Android app is required to be installed."
											},
											{
												"tag": "error",
												"text": "auth/missing-continue-uri A continue URL must be provided in the request."
											},
											{
												"tag": "error",
												"text": "auth/missing-ios-bundle-id An iOS Bundle ID must be provided if an App Store ID is provided."
											},
											{
												"tag": "error",
												"text": "auth/invalid-continue-uri The continue URL provided in the request is invalid."
											},
											{
												"tag": "error",
												"text": "auth/unauthorized-continue-uri The domain of the continue URL is not whitelisted. Whitelist the domain in the Firebase console."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the email address."
											}
										]
									},
									"parameters": [
										{
											"id": 357,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 358,
											"name": "actionCodeSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Additional settings to be set before sending the reset email.\n"
											},
											"type": {
												"type": "reference",
												"name": "ActionCodeSettings",
												"id": 205
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1419,
									"character": 26
								}
							]
						},
						{
							"id": 359,
							"name": "sendSignInLinkToEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 360,
									"name": "sendSignInLinkToEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a sign in link to the user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().sendSignInLinkToEmail('joe.bloggs@example.com');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/argument-error Thrown if handleCodeInApp is false."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/missing-android-pkg-name An Android package name must be provided if the Android app is required to be installed."
											},
											{
												"tag": "error",
												"text": "auth/missing-continue-uri A continue URL must be provided in the request."
											},
											{
												"tag": "error",
												"text": "auth/missing-ios-bundle-id An iOS Bundle ID must be provided if an App Store ID is provided."
											},
											{
												"tag": "error",
												"text": "auth/invalid-continue-uri The continue URL provided in the request is invalid."
											},
											{
												"tag": "error",
												"text": "auth/unauthorized-continue-uri The domain of the continue URL is not whitelisted. Whitelist the domain in the Firebase console."
											}
										]
									},
									"parameters": [
										{
											"id": 361,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 362,
											"name": "actionCodeSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The action code settings. The action code settings which provides Firebase with instructions on how to construct the email link. This includes the sign in completion URL or the deep link for mobile redirects, the mobile apps to use when the sign-in link is opened on an Android or iOS device. Mobile app redirects will only be applicable if the developer configures and accepts the Firebase Dynamic Links terms of condition. The Android package name and iOS bundle ID will be respected only if they are configured in the same Firebase Auth project used.\n"
											},
											"type": {
												"type": "reference",
												"name": "ActionCodeSettings",
												"id": 205
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1440,
									"character": 25
								}
							]
						},
						{
							"id": 330,
							"name": "signInAnonymously",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 331,
									"name": "signInAnonymously",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sign in a user anonymously. If the user has already signed in, that user will be returned.",
										"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInAnonymously();\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if anonymous accounts are not enabled. Enable anonymous accounts in the Firebase Console, under the Auth tab.\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1273,
									"character": 21
								}
							]
						},
						{
							"id": 352,
							"name": "signInWithCredential",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 353,
									"name": "signInWithCredential",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs the user in with a generated credential.",
										"text": "#### Example\n\n```js\n// Generate a Firebase credential\nconst credential = firebase.auth.FacebookAuthProvider.credential('access token from Facebook');\n// Sign the user in with the credential\nconst userCredential = await firebase.auth().signInWithCredential(credential);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/account-exists-with-different-credential Thrown if there already exists an account with the email address asserted by the credential."
											},
											{
												"tag": "error",
												"text": "auth/invalid-credential Thrown if the credential is malformed or has expired."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if the type of account corresponding to the credential is not enabled. Enable the account type in the Firebase Console, under the Auth tab."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given credential has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if signing in with a credential from firebase.auth.EmailAuthProvider.credential and there is no user corresponding to the given email."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if signing in with a credential from firebase.auth.EmailAuthProvider.credential and the password is invalid for the given email, or if the account corresponding to the email does not have a password set."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the credential is a firebase.auth.PhoneAuthProvider.credential and the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the credential is a firebase.auth.PhoneAuthProvider.credential and the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 354,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A generated `AuthCredential`, for example from social auth.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 118
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1397,
									"character": 24
								}
							]
						},
						{
							"id": 349,
							"name": "signInWithCustomToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 350,
									"name": "signInWithCustomToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs a user in with a custom token.",
										"text": "#### Example\n\n```js\n// Create a custom token via the Firebase Admin SDK.\nconst token = await firebase.auth().createCustomToken(uid, customClaims);\n...\n// Use the token on the device to sign in.\nconst userCredential = await firebase.auth().signInWithCustomToken(token);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/custom-token-mismatch Thrown if the custom token is for a different Firebase App."
											},
											{
												"tag": "error",
												"text": "auth/invalid-custom-token Thrown if the custom token format is incorrect."
											}
										]
									},
									"parameters": [
										{
											"id": 351,
											"name": "customToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A custom token generated from the Firebase Admin SDK.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1373,
									"character": 25
								}
							]
						},
						{
							"id": 345,
							"name": "signInWithEmailAndPassword",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 346,
									"name": "signInWithEmailAndPassword",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs a user in with an email and password.",
										"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInWithEmailAndPassword('joe.bloggs@example.com', '123456');\n````",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given email has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the given email."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if the password is invalid for the given email, or the account corresponding to the email does not have a password set."
											}
										]
									},
									"parameters": [
										{
											"id": 347,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email address."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 348,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1354,
									"character": 30
								}
							]
						},
						{
							"id": 366,
							"name": "signInWithEmailLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 367,
									"name": "signInWithEmailLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs the user in with an email link.",
										"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInWithEmailLink('joe.bloggs@example.com', link);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if OTP in email link expires."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email address is not valid."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given email has been disabled."
											}
										]
									},
									"parameters": [
										{
											"id": 368,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users email to sign in with."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 369,
											"name": "emailLink",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An email link.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1470,
									"character": 23
								}
							]
						},
						{
							"id": 332,
							"name": "signInWithPhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 333,
									"name": "signInWithPhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs in the user using their phone number.",
										"text": "#### Example\n\n```js\n// Force a new message to be sent\nconst result = await firebase.auth().signInWithPhoneNumber('#4423456789', true);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-phone-number Thrown if the phone number has an invalid format."
											},
											{
												"tag": "error",
												"text": "auth/missing-phone-number Thrown if the phone number is missing."
											},
											{
												"tag": "error",
												"text": "auth/quota-exceeded Thrown if the SMS quota for the Firebase project has been exceeded."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given phone number has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if you have not enabled the provider in the Firebase Console. Go to the Firebase Console for your project, in the Auth section and the Sign in Method tab and configure the provider."
											}
										]
									},
									"parameters": [
										{
											"id": 334,
											"name": "phoneNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The devices phone number."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 335,
											"name": "forceResend",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Forces a new message to be sent if it was already recently sent.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ConfirmationResult",
												"id": 188
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1293,
									"character": 25
								}
							]
						},
						{
							"id": 328,
							"name": "signOut",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 329,
									"name": "signOut",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Signs the user out.",
										"text": "Triggers the {@link auth#onAuthStateChanged} listener.\n\n#### Example\n\n```js\nawait firebase.auth().currentUser.signOut();\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1260,
									"character": 11
								}
							]
						},
						{
							"id": 383,
							"name": "verifyPasswordResetCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 384,
									"name": "verifyPasswordResetCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks a password reset code sent to the user by email or other out-of-band mechanism.\nTODO salakar: confirm return behavior (Returns the user's email address if valid.)",
										"text": "#### Example\n\n```js\nawait firebase.auth().verifyPasswordResetCode('ABCD');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/expired-action-code Thrown if the password reset code has expired."
											},
											{
												"tag": "error",
												"text": "auth/invalid-action-code Thrown if the password reset code is invalid. This can happen if the code is malformed or has already been used."
											},
											{
												"tag": "error",
												"text": "auth/user-disabled Thrown if the user corresponding to the given password reset code has been disabled."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if there is no user corresponding to the password reset code. This may have happened if the user was deleted between when the code was issued and when this method was called."
											}
										]
									},
									"parameters": [
										{
											"id": 385,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A password reset code.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1561,
									"character": 27
								}
							]
						},
						{
							"id": 336,
							"name": "verifyPhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 337,
									"name": "verifyPhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a PhoneAuthListener to listen to phone verification events,\non the final completion event a PhoneAuthCredential can be generated for\nauthentication purposes.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789', )\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('Snapshot state: ', phoneAuthSnapshot.state);\n });\n```\n"
									},
									"parameters": [
										{
											"id": 338,
											"name": "phoneNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The user's phone number in E.164 format (e.g. +16505550101)."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 339,
											"name": "autoVerifyTimeoutOrForceResend",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If a number, sets in seconds how to to wait until auto verification times out. If boolean, sets the `forceResend` parameter."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 340,
											"name": "forceResend",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If true, resend the verification message even if it was recently sent.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PhoneAuthListener",
										"id": 220
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1313,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								386,
								310
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								311,
								306
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								374,
								377,
								370,
								341,
								380,
								363,
								313,
								318,
								323,
								355,
								359,
								330,
								352,
								349,
								345,
								366,
								332,
								328,
								383,
								336
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 1132,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 200,
					"name": "ActionCodeInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The interface returned from a {@link auth#checkActionCode} call.",
						"text": "#### Example\n\n```js\nconst actionCodeInfo = await firebase.auth().checkActionCode('ABCD');\nconsole.log('Action code operation: ', actionCodeInfo.operation);\n```\n"
					},
					"children": [
						{
							"id": 201,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Additional action code data."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 535,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ActionCodeInfoData",
								"id": 197
							}
						},
						{
							"id": 202,
							"name": "operation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The operation from where the action originated."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 539,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "PASSWORD_RESET"
									},
									{
										"type": "stringLiteral",
										"value": "VERIFY_EMAIL"
									},
									{
										"type": "stringLiteral",
										"value": "RECOVER_EMAIL"
									},
									{
										"type": "stringLiteral",
										"value": "EMAIL_SIGNIN"
									},
									{
										"type": "stringLiteral",
										"value": "ERROR"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								201,
								202
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 531,
							"character": 33
						}
					]
				},
				{
					"id": 197,
					"name": "ActionCodeInfoData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Additional data returned from a {@link auth#checkActionCode} call.",
						"text": "#### Example\n\n```js\nconst actionCodeInfo = await firebase.auth().checkActionCode('ABCD');\n\nconsole.log('Action code email: ', actionCodeInfo.data.email);\nconsole.log('Action code from email: ', actionCodeInfo.data.fromEmail);\n```\n"
					},
					"children": [
						{
							"id": 198,
							"name": "email",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 517,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 199,
							"name": "fromEmail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 518,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								198,
								199
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 516,
							"character": 37
						}
					]
				},
				{
					"id": 205,
					"name": "ActionCodeSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options to be sent with requests such as {@link auth.User#sendEmailVerification}.",
						"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n handleCodeInApp: true,\n url: 'app/email-verification',\n});\n```\n"
					},
					"children": [
						{
							"id": 206,
							"name": "android",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Android specific settings."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 579,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "ActionCodeSettingsAndroid",
								"id": 193
							}
						},
						{
							"id": 207,
							"name": "handleCodeInApp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether the code should be handled by the app."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 583,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 208,
							"name": "iOS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "iOS specific settings."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 587,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "ActionCodeSettingsIos",
								"id": 203
							}
						},
						{
							"id": 209,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sets the URL for the action."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 591,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								206,
								207,
								208,
								209
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 575,
							"character": 37
						}
					]
				},
				{
					"id": 193,
					"name": "ActionCodeSettingsAndroid",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Android specific options which can be attached to the {@link auth.ActionCodeSettings} object\nto be sent with requests such as {@link auth.User#sendEmailVerification}.",
						"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n android: {\n   installApp: true,\n   packageName: 'com.awesome.app',\n },\n});\n```\n"
					},
					"children": [
						{
							"id": 195,
							"name": "installApp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The preference for whether to attempt to install the app if it is not present."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 497,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 196,
							"name": "minimumVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The minimum Android app version."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 501,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 194,
							"name": "packageName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Android Package Name."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 493,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								195,
								196,
								194
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 489,
							"character": 44
						}
					]
				},
				{
					"id": 203,
					"name": "ActionCodeSettingsIos",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "iOS specific options which can be attached to the {@link auth.ActionCodeSettings} object\nto be sent with requests such as {@link auth.User#sendEmailVerification}.",
						"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n iOS: {\n   bundleId: '123456',\n },\n});\n```\n"
					},
					"children": [
						{
							"id": 204,
							"name": "bundleId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An iOS build ID."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 560,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								204
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 556,
							"character": 40
						}
					]
				},
				{
					"id": 157,
					"name": "AdditionalUserInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A structure containing additional user information from a federated identity provider via {@link auth.UserCredential}.",
						"text": "#### Example\n\n```js\nconst userCredential = await firebase.auth().signInAnonymously();\nconsole.log('Additional user info: ', userCredential.additionalUserInfo);\n```\n",
						"tags": [
							{
								"tag": "error",
								"text": "auth/operation-not-allowed Thrown if anonymous accounts are not enabled. Enable anonymous accounts in the Firebase Console, under the Auth tab.\n"
							}
						]
					},
					"children": [
						{
							"id": 158,
							"name": "isNewUser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns whether the user is new or existing."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 278,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 159,
							"name": "profile",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns a Object containing IDP-specific user data if the provider is one of Facebook,\nGitHub, Google, Twitter, Microsoft, or Yahoo."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 283,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Object"
							}
						},
						{
							"id": 160,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the provider ID for specifying which provider the information in `profile` is for."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 287,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 161,
							"name": "username",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the username if the provider is GitHub or Twitter."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 291,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								158,
								159,
								160,
								161
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 274,
							"character": 37
						}
					]
				},
				{
					"id": 118,
					"name": "AuthCredential",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface that represents the credentials returned by an auth provider. Implementations specify the details\nabout each auth provider's credential requirements.",
						"text": "TODO Missing; signInMethod, toJSON, fromJSON\n\n#### Example\n\n```js\nconst provider = firebase.auth.EmailAuthProvider;\nconst authCredential = provider.credential('foo@bar.com', '123456');\n\nawait firebase.auth().linkWithCredential(authCredential);\n```\n"
					},
					"children": [
						{
							"id": 119,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The authentication provider ID for the credential. For example, 'facebook.com', or 'google.com'."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 80,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 121,
							"name": "secret",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 82,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 120,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 81,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								119,
								121,
								120
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 76,
							"character": 33
						}
					]
				},
				{
					"id": 122,
					"name": "AuthProvider",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface that represents an auth provider. Implemented by other providers."
					},
					"children": [
						{
							"id": 123,
							"name": "PROVIDER_ID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The provider ID of the provider."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 92,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 124,
							"name": "credential",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new `AuthCredential`.",
								"tags": [
									{
										"tag": "returns",
										"text": "."
									},
									{
										"tag": "param",
										"text": "A provider token.",
										"param": "token"
									},
									{
										"tag": "param",
										"text": "A provider secret.\n",
										"param": "secret"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 100,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 125,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 126,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 127,
													"name": "token",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 128,
													"name": "secret",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 118
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 100,
											"character": 15
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								123,
								124
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 88,
							"character": 31
						}
					]
				},
				{
					"id": 252,
					"name": "AuthSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface for module auth settings.",
						"text": "#### Example\n\n```js\nconst settings = firebase.auth().settings;\nconsole.log(settings.appVerificationDisabledForTesting);\n```\n"
					},
					"children": [
						{
							"id": 253,
							"name": "appVerificationDisabledForTesting",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "iOS only flag to determine whether app verification should be disabled for testing or not.",
								"tags": [
									{
										"tag": "platform",
										"text": "iOS"
									},
									{
										"tag": "param",
										"text": "Boolean value representing whether app verification should be disabled for testing.\n",
										"param": "disabled"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 786,
									"character": 37
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 254,
							"name": "setAutoRetrievedSmsCodeForPhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 255,
									"name": "setAutoRetrievedSmsCodeForPhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The phone number and SMS code here must have been configured in the\nFirebase Console (Authentication > Sign In Method > Phone).",
										"text": "Calling this method a second time will overwrite the previously passed parameters.\nOnly one number can be configured at a given time.\n\n#### Example\n\n```js\nawait firebase.auth().settings.setAutoRetrievedSmsCodeForPhoneNumber('+4423456789', 'ABCDE');\n```\n",
										"tags": [
											{
												"tag": "platform",
												"text": "Android"
											}
										]
									},
									"parameters": [
										{
											"id": 256,
											"name": "phoneNumber",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users phone number."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 257,
											"name": "smsCode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The pre-set SMS code.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 805,
									"character": 41
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								253
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								254
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 779,
							"character": 31
						}
					]
				},
				{
					"id": 188,
					"name": "ConfirmationResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A result from a {@link auth#signInWithPhoneNumber} call.",
						"text": "#### Example\n\n```js\n// Force a new message to be sent\nconst result = await firebase.auth().signInWithPhoneNumber('#4423456789');\nconst user = await result.confirm('12345');\n```\n"
					},
					"children": [
						{
							"id": 189,
							"name": "verificationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The phone number authentication operation's verification ID. This can be used along with\nthe verification code to initialize a phone auth credential."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 465,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 190,
							"name": "confirm",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 191,
									"name": "confirm",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Finishes the sign in flow. Validates a code that was sent to the users device."
									},
									"parameters": [
										{
											"id": 192,
											"name": "verificationCode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The code sent to the users device from Firebase.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "User",
														"id": 258
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 471,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								189
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								190
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 460,
							"character": 37
						}
					]
				},
				{
					"id": 129,
					"name": "EmailAuthProvider",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Email and password auth provider implementation."
					},
					"children": [
						{
							"id": 131,
							"name": "EMAIL_LINK_SIGN_IN_METHOD",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This corresponds to the sign-in method identifier as returned in {@link auth#fetchSignInMethodsForEmail}.",
								"text": "#### Example\n\n```js\nconst signInMethods = await firebase.auth().fetchSignInMethodsForEmail('...');\nif (signInMethods.indexOf(firebase.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD) != -1) {\n  // User can sign in with email/link\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 123,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 132,
							"name": "EMAIL_PASSWORD_SIGN_IN_METHOD",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This corresponds to the sign-in method identifier as returned in {@link auth#fetchSignInMethodsForEmail}.",
								"text": "#### Example\n\n```js\nconst signInMethods = await firebase.auth().fetchSignInMethodsForEmail('...');\nif (signInMethods.indexOf(firebase.auth.EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD) != -1) {\n  // User can sign in with email/password\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 136,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 130,
							"name": "PROVIDER_ID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The provider ID. Always returns `password`."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 110,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 133,
							"name": "credential",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the auth provider credential.",
								"text": "#### Example\n\n```js\nconst authCredential = firebase.auth.EmailAuthProvider.credential('joe.bloggs@example.com', '123456');\n```\n",
								"tags": [
									{
										"tag": "returns",
										"text": ""
									},
									{
										"tag": "param",
										"text": "Users email address.",
										"param": "email"
									},
									{
										"tag": "param",
										"text": "User account password.\n",
										"param": "password"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 150,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 134,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 135,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 136,
													"name": "email",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 137,
													"name": "password",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 118
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 150,
											"character": 15
										}
									]
								}
							}
						},
						{
							"id": 138,
							"name": "credentialWithLink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Initialize an `EmailAuthProvider` credential using an email and an email link after a sign in with email link operation.",
								"text": "#### Example\n\n```js\nconst authCredential = firebase.auth.EmailAuthProvider.credentialWithLink('joe.bloggs@example.com', 'https://myexample.com/invite');\n```\n",
								"tags": [
									{
										"tag": "param",
										"text": "Users email address.",
										"param": "email"
									},
									{
										"tag": "param",
										"text": "Sign-in email link.\n",
										"param": "emailLink"
									}
								]
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 163,
									"character": 22
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 139,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 140,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 141,
													"name": "email",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 142,
													"name": "emailLink",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 118
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 163,
											"character": 23
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								131,
								132,
								130,
								133,
								138
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 106,
							"character": 36
						}
					]
				},
				{
					"id": 175,
					"name": "IdTokenResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface representing ID token result obtained from {@link auth.User#getIdTokenResult}.\nIt contains the ID token JWT string and other helper properties for getting different data\nassociated with the token as well as all the decoded payload claims.",
						"text": "TODO @salakar validate timestamp types\n\n#### Example\n\n```js\nconst idTokenResult = await firebase.auth().currentUser.getIdTokenResult();\nconsole.log('User JWT: ', idTokenResult.token);\n```\n"
					},
					"children": [
						{
							"id": 177,
							"name": "authTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The authentication time formatted as a UTC string. This is the time the user authenticated\n(signed in) and not the time the token was refreshed."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 401,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 181,
							"name": "claims",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The entire payload claims of the ID token including the standard reserved claims as well as\nthe custom claims."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 419,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 182,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 183,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 184,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "auth/lib/index.d.ts",
											"line": 419,
											"character": 11
										}
									]
								}
							}
						},
						{
							"id": 179,
							"name": "expirationTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ID token expiration time formatted as a UTC string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 409,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 178,
							"name": "issuedAtTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ID token issued at time formatted as a UTC string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 405,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 180,
							"name": "signInProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The sign-in provider through which the ID token was obtained (anonymous, custom,\nphone, password, etc). Note, this does not map to provider IDs."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 414,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 176,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Firebase Auth ID token JWT string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 396,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								177,
								181,
								179,
								178,
								180,
								176
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 392,
							"character": 32
						}
					]
				},
				{
					"id": 215,
					"name": "PhoneAuthError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A custom error in the event verifying a phone number failed.",
						"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('Snapshot state: ', phoneAuthSnapshot.state);\n }, (phoneAuthError) => {\n   console.error('Error: ', phoneAuthError.message);\n });\n```\n"
					},
					"children": [
						{
							"id": 216,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The code the verification failed with."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 667,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 218,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "JavaScript error message."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 675,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 219,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "JavaScript error stack trace."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 679,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 217,
							"name": "verificationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The verification ID which failed."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 671,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								216,
								218,
								219,
								217
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 663,
							"character": 33
						}
					]
				},
				{
					"id": 220,
					"name": "PhoneAuthListener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The listener function returned from a {@link auth#verifyPhoneNumber} call."
					},
					"children": [
						{
							"id": 246,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 247,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A promise handler called once the `on` listener flow has rejected.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   return Promise.reject(\n     new Error('Code not sent!')\n   );\n })\n .catch((error) => {\n   console.error(error.message);\n });\n```\n\n> Used when no `onRejected` handler is passed to the `then`.\n"
									},
									"parameters": [
										{
											"id": 248,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Rejected promise handler.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 249,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 250,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 251,
																	"name": "a",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "NativeFirebaseError"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "auth/lib/index.d.ts",
															"line": 766,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 766,
									"character": 9
								}
							]
						},
						{
							"id": 221,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 222,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The phone auth state listener. See {@link auth.PhoneAuthState} for different event state types.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('State: ', phoneAuthSnapshot.state);\n }, (error) => {\n   console.error(error);\n }, (phoneAuthSnapshot) => {\n   console.log('Success');\n });\n```\n"
									},
									"parameters": [
										{
											"id": 223,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event to subscribe to. Currently only `state_changed` is available."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 224,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The required observer function. Returns a new phone auth snapshot on each event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 225,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 226,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 227,
																	"name": "snapshot",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "PhoneAuthSnapshot",
																		"id": 210
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													],
													"sources": [
														{
															"fileName": "auth/lib/index.d.ts",
															"line": 709,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 228,
											"name": "errorCb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional error handler function. This is not required if the `error` snapshot state is being handled in the `observer`."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 229,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 230,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 231,
																			"name": "error",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "PhoneAuthError",
																				"id": 215
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 232,
											"name": "successCb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional success handler function. This is not required if the `sent` or `verified` snapshot state is being handled in the `observer`.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 233,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 234,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 235,
																			"name": "snapshot",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "PhoneAuthSnapshot",
																				"id": 210
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PhoneAuthListener",
										"id": 220
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 707,
									"character": 6
								}
							]
						},
						{
							"id": 236,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 237,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A promise handler called once the `on` listener flow has succeeded or rejected.",
										"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   if (phoneAuthSnapshot.state === firebase.auth.PhoneAuthState.CODE_SENT) {\n     return Promise.resolve();\n   } else {\n     return Promise.reject(\n       new Error('Code not sent!')\n     );\n   }\n })\n .then((phoneAuthSnapshot) => {\n   console.log(phoneAuthSnapshot.state);\n }, (error) => {\n   console.error(error.message);\n });\n```\n"
									},
									"parameters": [
										{
											"id": 238,
											"name": "onFulfilled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Resolved promise handler."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 239,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 240,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 241,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "PhoneAuthSnapshot",
																				"id": 210
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "auth/lib/index.d.ts",
																	"line": 741,
																	"character": 19
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 242,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Rejected promise handler.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 243,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 244,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 245,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NativeFirebaseError"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "auth/lib/index.d.ts",
																	"line": 742,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 740,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								246,
								221,
								236
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 685,
							"character": 36
						}
					]
				},
				{
					"id": 210,
					"name": "PhoneAuthSnapshot",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A snapshot interface of the current phone auth state.",
						"text": "#### Example\n\n```js\nfirebase.auth().verifyPhoneNumber('+4423456789')\n .on('state_changed', (phoneAuthSnapshot) => {\n   console.log('Snapshot state: ', phoneAuthSnapshot.state);\n });\n```\n"
					},
					"children": [
						{
							"id": 213,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The verification code. Will only be available if auto verification has taken place."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 642,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 214,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A native JavaScript error if an error occurs."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 646,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "NativeFirebaseError"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 211,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current phone auth verification state.",
								"text": "- `sent`: On iOS, this is the final event received. Once sent, show a visible input box asking the user to enter the verification code.\n- `timeout`: Auto verification has timed out. Show a visible input box asking the user to enter the verification code.\n- `verified`: The verification code has automatically been verified by the Android device. The snapshot contains the verification ID & code to create a credential.\n- `error`: An error occurred. Handle or allow the promise to reject.\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 634,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "sent"
									},
									{
										"type": "stringLiteral",
										"value": "timeout"
									},
									{
										"type": "stringLiteral",
										"value": "verified"
									},
									{
										"type": "stringLiteral",
										"value": "error"
									}
								]
							}
						},
						{
							"id": 212,
							"name": "verificationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The verification ID to build a `PhoneAuthProvider` credential."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 638,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								213,
								214,
								211,
								212
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 625,
							"character": 36
						}
					]
				},
				{
					"id": 143,
					"name": "PhoneAuthState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"children": [
						{
							"id": 146,
							"name": "AUTO_VERIFIED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 172,
									"character": 17
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "verified"
							}
						},
						{
							"id": 145,
							"name": "AUTO_VERIFY_TIMEOUT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 171,
									"character": 23
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "timeout"
							}
						},
						{
							"id": 144,
							"name": "CODE_SENT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 170,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "sent"
							}
						},
						{
							"id": 147,
							"name": "ERROR",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 173,
									"character": 9
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "error"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								146,
								145,
								144,
								147
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 169,
							"character": 33
						}
					]
				},
				{
					"id": 148,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "firebase.auth.X"
					},
					"children": [
						{
							"id": 149,
							"name": "EmailAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Email and password auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.EmailAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 189,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "EmailAuthProvider",
								"id": 129
							}
						},
						{
							"id": 154,
							"name": "FacebookAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Facebook auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.FacebookAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 239,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 122
							}
						},
						{
							"id": 152,
							"name": "GithubAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Github auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.GithubAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 219,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 122
							}
						},
						{
							"id": 151,
							"name": "GoogleAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Google auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.GoogleAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 209,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 122
							}
						},
						{
							"id": 155,
							"name": "OAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Custom OAuth auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.OAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 249,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 122
							}
						},
						{
							"id": 150,
							"name": "PhoneAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Phone auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.PhoneAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 199,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 122
							}
						},
						{
							"id": 156,
							"name": "PhoneAuthState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A PhoneAuthState interface.",
								"text": "#### Example\n\n```js\nfirebase.auth.PhoneAuthState;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 259,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "PhoneAuthState",
								"id": 143
							}
						},
						{
							"id": 153,
							"name": "TwitterAuthProvider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Twitter auth provider implementation.",
								"text": "#### Example\n\n```js\nfirebase.auth.TwitterAuthProvider;\n```\n"
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 229,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "AuthProvider",
								"id": 122
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								149,
								154,
								152,
								151,
								155,
								150,
								156,
								153
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 179,
							"character": 26
						}
					]
				},
				{
					"id": 185,
					"name": "UpdateProfile",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Request used to update user profile information.",
						"text": "#### Example\n\n```js\nconst update = {\n  displayName: 'Alias',\n  photoURL: 'https://my-cdn.com/assets/user/123.png',\n};\n\nawait firebase.auth().currentUser.updateProfile(update);\n```\n"
					},
					"children": [
						{
							"id": 186,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional display name for the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 442,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 187,
							"name": "photoURL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional photo URL for the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 446,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								186,
								187
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 438,
							"character": 32
						}
					]
				},
				{
					"id": 258,
					"name": "User",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a user's profile information in your Firebase project's user database. It also\ncontains helper methods to change or retrieve profile information, as well as to manage that user's authentication state.",
						"text": "#### Example 1\n\nSubscribing to the users authentication state.\n\n```js\nfirebase.auth().onAuthStateChanged((user) => {\n  if (user) {\n    console.log('User email: ', user.email');\n  }\n});\n```\n\n#### Example 2\n\n```js\nconst user = firebase.auth().currentUser;\n\nif (user) {\n console.log('User email: ', user.email');\n}\n```\n"
					},
					"children": [
						{
							"id": 259,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The user's display name (if available)."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 838,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 260,
							"name": "email",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "- The user's email address (if available)."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 842,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 261,
							"name": "emailVerified",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "- True if the user's email address has been verified."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 846,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 262,
							"name": "isAnonymous",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns true if the user is anonymous; that is, the user account was created with\n{@link auth#signInAnonymously} and has not been linked to another account\nwith {@link auth#linkWithCredential}."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 852,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 263,
							"name": "metadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the {@link auth.UserMetadata} associated with this user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 857,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "UserMetadata",
								"id": 165
							}
						},
						{
							"id": 264,
							"name": "phoneNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the phone number of the user, as stored in the Firebase project's user database,\nor null if none exists. This can be updated at any time by calling {@link auth.User#updatePhoneNumber}."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 863,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 265,
							"name": "photoURL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL of the user's profile picture (if available)."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 868,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 266,
							"name": "providerData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Additional provider-specific information about the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 873,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "UserInfo",
									"id": 168
								}
							}
						},
						{
							"id": 267,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " The authentication provider ID for the current user.\n For example, 'facebook.com', or 'google.com'."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 879,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 268,
							"name": "uid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " - The user's unique ID."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 884,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 269,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 270,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Delete the current user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.delete();\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/requires-recent-login Thrown if the user's last sign-in time does not meet the security threshold. Use `auth.User#reauthenticateWithCredential` to resolve. This does not apply if the user is anonymous.\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 897,
									"character": 10
								}
							]
						},
						{
							"id": 271,
							"name": "getIdToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 272,
									"name": "getIdToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the users authentication token.",
										"text": "#### Example\n\n```js\n// Force a token refresh\nconst idToken = await firebase.auth().currentUser.getIdToken(true);\n```\n"
									},
									"parameters": [
										{
											"id": 273,
											"name": "forceRefresh",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A boolean value which forces Firebase to refresh the token.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 911,
									"character": 14
								}
							]
						},
						{
							"id": 274,
							"name": "getIdTokenResult",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 275,
									"name": "getIdTokenResult",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a firebase.auth.IdTokenResult object which contains the ID token JWT string and\nother helper properties for getting different data associated with the token as well as\nall the decoded payload claims.",
										"text": "#### Example\n\n```js\n// Force a token refresh\nconst idTokenResult = await firebase.auth().currentUser.getIdTokenResult(true);\n```\n"
									},
									"parameters": [
										{
											"id": 276,
											"name": "forceRefresh",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "boolean Force refresh regardless of token expiration.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "IdTokenResult",
												"id": 175
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 927,
									"character": 20
								}
							]
						},
						{
							"id": 277,
							"name": "linkWithCredential",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 278,
									"name": "linkWithCredential",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Link the user with a 3rd party credential provider.",
										"text": "#### Example\n\n```js\nconst facebookCredential = firebase.auth.FacebookAuthProvider.credential('access token from Facebook');\nconst userCredential = await firebase.auth().currentUser.linkWithCredential(facebookCredential);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/provider-already-linked Thrown if the provider has already been linked to the user. This error is thrown even if this is not the same provider's account that is currently linked to the user."
											},
											{
												"tag": "error",
												"text": "auth/invalid-credential Thrown if the provider's credential is not valid. This can happen if it has already expired when calling link, or if it used invalid token(s). See the Firebase documentation for your provider, and make sure you pass in the correct parameters to the credential method."
											},
											{
												"tag": "error",
												"text": "auth/credential-already-in-use Thrown if the account corresponding to the credential already exists among your users, or is already linked to a Firebase User."
											},
											{
												"tag": "error",
												"text": "auth/email-already-in-use Thrown if the email corresponding to the credential already exists among your users."
											},
											{
												"tag": "error",
												"text": "auth/operation-not-allowed Thrown if you have not enabled the provider in the Firebase Console. Go to the Firebase Console for your project, in the Auth section and the Sign in Method tab and configure the provider."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email used in a auth.EmailAuthProvider.credential is invalid."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if the password used in a auth.EmailAuthProvider.credential is not correct or when the user associated with the email does not have a password."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 279,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A created {@link auth.AuthCredential}.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 118
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 950,
									"character": 22
								}
							]
						},
						{
							"id": 280,
							"name": "reauthenticateWithCredential",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 281,
									"name": "reauthenticateWithCredential",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Re-authenticate a user with a third-party authentication provider.",
										"text": "#### Example\n\n```js\nconst facebookCredential = firebase.auth.FacebookAuthProvider.credential('access token from Facebook');\nconst userCredential = await firebase.auth().currentUser.reauthenticateWithCredential(facebookCredential);\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/user-mismatch Thrown if the credential given does not correspond to the user."
											},
											{
												"tag": "error",
												"text": "auth/user-not-found Thrown if the credential given does not correspond to any existing user."
											},
											{
												"tag": "error",
												"text": "auth/invalid-credential Thrown if the provider's credential is not valid. This can happen if it has already expired when calling link, or if it used invalid token(s). See the Firebase documentation for your provider, and make sure you pass in the correct parameters to the credential method."
											},
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email used in a auth.EmailAuthProvider.credential is invalid."
											},
											{
												"tag": "error",
												"text": "auth/wrong-password Thrown if the password used in a auth.EmailAuthProvider.credential is not correct or when the user associated with the email does not have a password."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the credential is a auth.PhoneAuthProvider.credential and the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 282,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A created {@link auth.AuthCredential}.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 118
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "UserCredential",
												"id": 162
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 971,
									"character": 32
								}
							]
						},
						{
							"id": 283,
							"name": "reload",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 284,
									"name": "reload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the current user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.reload();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 982,
									"character": 10
								}
							]
						},
						{
							"id": 285,
							"name": "sendEmailVerification",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 286,
									"name": "sendEmailVerification",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a verification email to a user.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.sendEmailVerification({\n  handleCodeInApp: true,\n});\n```\n\n> This will Promise reject if the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/missing-android-pkg-name An Android package name must be provided if the Android app is required to be installed."
											},
											{
												"tag": "error",
												"text": "auth/missing-continue-uri A continue URL must be provided in the request."
											},
											{
												"tag": "error",
												"text": "auth/missing-ios-bundle-id An iOS bundle ID must be provided if an App Store ID is provided."
											},
											{
												"tag": "error",
												"text": "auth/invalid-continue-uri The continue URL provided in the request is invalid."
											},
											{
												"tag": "error",
												"text": "auth/unauthorized-continue-uri The domain of the continue URL is not whitelisted. Whitelist the domain in the Firebase console."
											}
										]
									},
									"parameters": [
										{
											"id": 287,
											"name": "actionCodeSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Any optional additional settings to be set before sending the verification email.\n"
											},
											"type": {
												"type": "reference",
												"name": "ActionCodeSettings",
												"id": 205
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1004,
									"character": 25
								}
							]
						},
						{
							"id": 288,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 289,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a JSON-serializable representation of this object.",
										"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser.toJSON();\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1015,
									"character": 10
								}
							]
						},
						{
							"id": 290,
							"name": "unlink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 291,
									"name": "unlink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unlinks a provider from a user account.",
										"text": "#### Example\n\n```js\nconst user = await firebase.auth().currentUser.unlink('facebook.com');\n```\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/no-such-provider Thrown if the user does not have this provider linked or when the provider ID given does not exist."
											}
										]
									},
									"parameters": [
										{
											"id": 292,
											"name": "providerId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "User",
												"id": 258
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1029,
									"character": 10
								}
							]
						},
						{
							"id": 293,
							"name": "updateEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 294,
									"name": "updateEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the user's email address.",
										"text": "See Firebase docs for more information on security & email validation.\n\n#### Example\n\n```js\nawait firebase.auth().currentUser.updateEmail('joe.bloggs@new-email.com');\n```\n\n> This will Promise reject if the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-email Thrown if the email used is invalid."
											},
											{
												"tag": "error",
												"text": "auth/email-already-in-use Thrown if the email is already used by another user."
											},
											{
												"tag": "error",
												"text": "auth/requires-recent-login Thrown if the user's last sign-in time does not meet the security threshold."
											}
										]
									},
									"parameters": [
										{
											"id": 295,
											"name": "email",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users new email address.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1049,
									"character": 15
								}
							]
						},
						{
							"id": 296,
							"name": "updatePassword",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 297,
									"name": "updatePassword",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the users password.",
										"text": "Important: this is a security sensitive operation that requires the user to have recently signed in.\nIf this requirement isn't met, ask the user to authenticate again and then call firebase.User#reauthenticate.\n\n#### Example\n\n```js\nawait firebase.auth().currentUser.updatePassword('654321');\n```\n\n> This will Promise reject is the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/weak-password Thrown if the password is not strong enough."
											},
											{
												"tag": "error",
												"text": "auth/requires-recent-login Thrown if the user's last sign-in time does not meet the security threshold."
											}
										]
									},
									"parameters": [
										{
											"id": 298,
											"name": "password",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The users new password.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1069,
									"character": 18
								}
							]
						},
						{
							"id": 299,
							"name": "updatePhoneNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 300,
									"name": "updatePhoneNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the user's phone number.",
										"text": "See Firebase docs for more information on security & email validation.\n\n#### Example\n\n```js\nconst snapshot = await firebase.auth().verifyPhoneNumber('+4423456789')\n .on(...); // See PhoneAuthListener - wait for successful verification\n\nconst credential = firebase.auth.PhoneAuthProvider.credential(snapshot.verificationId, snapshot.code);\n\n// Update user with new verified phone number\nawait firebase.auth().currentUser.updatePhoneNumber(credential);\n```\n\n> This will Promise reject is the user is anonymous.\n",
										"tags": [
											{
												"tag": "error",
												"text": "auth/invalid-verification-code Thrown if the verification code of the credential is not valid."
											},
											{
												"tag": "error",
												"text": "auth/invalid-verification-id Thrown if the verification ID of the credential is not valid."
											}
										]
									},
									"parameters": [
										{
											"id": 301,
											"name": "credential",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A created `PhoneAuthCredential`.\n"
											},
											"type": {
												"type": "reference",
												"name": "AuthCredential",
												"id": 118
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1094,
									"character": 21
								}
							]
						},
						{
							"id": 302,
							"name": "updateProfile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 303,
									"name": "updateProfile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates a user's profile data.",
										"text": "#### Example\n\n```js\nawait firebase.auth().currentUser.updateProfile({\n  displayName: 'Alias',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 304,
											"name": "updates",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "UpdateProfile",
												"id": 185
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 1107,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								259,
								260,
								261,
								262,
								263,
								264,
								265,
								266,
								267,
								268
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								269,
								271,
								274,
								277,
								280,
								283,
								285,
								288,
								290,
								293,
								296,
								299,
								302
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 834,
							"character": 23
						}
					]
				},
				{
					"id": 162,
					"name": "UserCredential",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A structure containing a User, an AuthCredential, the operationType, and any additional user\ninformation that was returned from the identity provider. operationType could be 'signIn' for\na sign-in operation, 'link' for a linking operation and 'reauthenticate' for a reauthentication operation.",
						"text": "TODO @salakar; missing credential, operationType\n"
					},
					"children": [
						{
							"id": 163,
							"name": "additionalUserInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Any additional user information assigned to the user."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 305,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AdditionalUserInfo",
								"id": 157
							}
						},
						{
							"id": 164,
							"name": "user",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the {@link auth.User} interface of this credential."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 309,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "User",
								"id": 258
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								163,
								164
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 301,
							"character": 33
						}
					]
				},
				{
					"id": 168,
					"name": "UserInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a collection of standard profile information for a user. Can be used to expose\nprofile information returned by an identity provider, such as Google Sign-In or Facebook Login.",
						"text": "TODO @salakar: isEmailVerified\n\n#### Example\n\n```js\nconst user = firebase.auth().currentUser;\n\nuser.providerData.forEach((userInfo) => {\n  console.log('User info for provider: ', userInfo);\n});\n```\n"
					},
					"children": [
						{
							"id": 169,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the user's display name, if available."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 355,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 170,
							"name": "email",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the email address corresponding to the user's account in the specified provider, if available."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 359,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 171,
							"name": "phoneNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The phone number normalized based on the E.164 standard (e.g. +16505550101) for the current user. This is null if the user has no phone credential linked to the account."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 363,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 172,
							"name": "photoURL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns a url to the user's profile picture, if available."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 367,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 173,
							"name": "providerId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the unique identifier of the provider type that this instance corresponds to."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 371,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 174,
							"name": "uid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a user identifier as specified by the authentication provider."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 375,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								169,
								170,
								171,
								172,
								173,
								174
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 351,
							"character": 27
						}
					]
				},
				{
					"id": 165,
					"name": "UserMetadata",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Holds the user metadata for the current {@link auth.User}.",
						"text": "#### Example\n\n```js\nconst user = firebase.auth().currentUser;\nconsole.log('User metadata: ', user.metadata);\n```\n"
					},
					"children": [
						{
							"id": 166,
							"name": "creationTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the timestamp at which this account was created as dictated by the server clock\nas an ISO Date string."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 327,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 167,
							"name": "lastSignInTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Returns the last signin timestamp as dictated by the server clock as an ISO Date string.\nThis is only accurate up to a granularity of 2 minutes for consecutive sign-in attempts."
							},
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 332,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								166,
								167
							]
						}
					],
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 322,
							"character": 31
						}
					]
				},
				{
					"id": 387,
					"name": "AuthListenerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An auth listener callback function for {@link auth#onAuthStateChanged}.",
						"text": "#### Example\n\n```js\nfunction listener(user) {\n  if (user) {\n    // Signed in\n  } else {\n    // Signed out\n  }\n}\n\nfirebase.auth().onAuthStateChanged(listener);\n```\n"
					},
					"sources": [
						{
							"fileName": "auth/lib/index.d.ts",
							"line": 611,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 388,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 389,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 390,
											"name": "user",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "User",
														"id": 258
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "auth/lib/index.d.ts",
									"line": 611,
									"character": 36
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						305
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						200,
						197,
						205,
						193,
						203,
						157,
						118,
						122,
						252,
						188,
						129,
						175,
						215,
						220,
						210,
						143,
						148,
						185,
						258,
						162,
						168,
						165
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						387
					]
				}
			],
			"sources": [
				{
					"fileName": "auth/lib/index.d.ts",
					"line": 57,
					"character": 21
				}
			]
		},
		{
			"id": 398,
			"name": "Config",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Remote Config package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `config` package:\n\n```js\nimport { firebase } from '@react-native-firebase/config';\n\n// firebase.config().X\n```\n\n#### Example 2\n\nUsing the default export from the `config` package:\n\n```js\nimport config from '@react-native-firebase/config';\n\n// config().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/config';\n\n// firebase.config().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "config\n"
					}
				]
			},
			"children": [
				{
					"id": 422,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Remote Config service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Remote Config service for the default app:\n\n```js\nconst defaultAppRemoteConfig = firebase.config();\n```\n"
					},
					"children": [
						{
							"id": 447,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 424,
							"name": "isDeveloperModeEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether developer mode is enabled. This is set manually via {@link config#setConfigSettings}"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 283,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 425,
							"name": "lastFetchStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The status of the latest Remote Config fetch action.",
								"text": "See the `LastFetchStatus` statics definition.\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 289,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "success"
									},
									{
										"type": "stringLiteral",
										"value": "failure"
									},
									{
										"type": "stringLiteral",
										"value": "no_fetch_yet"
									},
									{
										"type": "stringLiteral",
										"value": "throttled"
									}
								]
							}
						},
						{
							"id": 423,
							"name": "lastFetchTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of milliseconds since the last Remote Config fetch was performed."
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 279,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 426,
							"name": "activate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 427,
									"name": "activate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Moves fetched data to the apps active config.\nResolves with a boolean value of whether the fetched config was moved successfully.",
										"text": "#### Example\n\n```js\n// Fetch values\nawait firebase.config().fetch();\nconst activated = await firebase.config().activate();\n\nif (activated) {\n console.log('Fetched values successfully activated.');\n} else {\n  console.log('Fetched values failed to activate.');\n}\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 309,
									"character": 12
								}
							]
						},
						{
							"id": 428,
							"name": "fetch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 429,
									"name": "fetch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches the remote config data from Firebase, as defined in the dashboard. If duration is defined (seconds), data will be locally cached for this duration.",
										"text": "#### Example\n\n```js\n// Fetch and cache for 5 minutes\nawait firebase.config().fetch(300);\n```\n"
									},
									"parameters": [
										{
											"id": 430,
											"name": "expirationDurationSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Duration in seconds to cache the data for. To skip cache, use a duration of 0.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 323,
									"character": 9
								}
							]
						},
						{
							"id": 431,
							"name": "fetchAndActivate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 432,
									"name": "fetchAndActivate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches the remote config data from Firebase, as defined in the dashboard.",
										"text": "Once fetching is complete this method immediately calls activate and returns a boolean value of the activation status.\n\n#### Example\n\n```js\n// Fetch, cache for 5 minutes and activate\nconst activated = await firebase.config().fetchAndActivate();\n\nif (activated) {\n console.log('Fetched values successfully activated.');\n} else {\n  console.log('Fetched values failed to activate.');\n}\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 344,
									"character": 20
								}
							]
						},
						{
							"id": 433,
							"name": "getAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 434,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns all available config values.",
										"text": "#### Example\n\n```js\nconst values = firebase.config().getAll();\n\nObject.entries(values).forEach(($) => {\n  const [key, entry] = $;\n  console.log('Key: ', key);\n  console.log('Source: ', entry.source);\n  console.log('Value: ', entry.value);\n});\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "ConfigValues",
										"id": 414
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 363,
									"character": 10
								}
							]
						},
						{
							"id": 435,
							"name": "getValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 436,
									"name": "getValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a ConfigValue by key.",
										"text": "#### Example\n\n```js\nconst configValue = firebase.config().getValue('experiment');\nconsole.log('Source: ', configValue.source);\nconsole.log('Value: ', configValue.value);\n```\n"
									},
									"parameters": [
										{
											"id": 437,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A key used to retrieve a specific value.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ConfigValue",
										"id": 411
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 378,
									"character": 12
								}
							]
						},
						{
							"id": 438,
							"name": "setConfigSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 439,
									"name": "setConfigSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the Remote Config settings, specifically the `isDeveloperModeEnabled` flag.",
										"text": "#### Example\n\n```js\nawait firebase.config().setConfigSettings({\n  isDeveloperModeEnabled: __DEV__,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 440,
											"name": "configSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A ConfigSettingsWrite instance used to set Remote Config settings.\n"
											},
											"type": {
												"type": "reference",
												"name": "ConfigSettings",
												"id": 417
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 393,
									"character": 21
								}
							]
						},
						{
							"id": 441,
							"name": "setDefaults",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 442,
									"name": "setDefaults",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets default values for the app to use when accessing values.\nAny data fetched and activated will override any default values. Any values in the defaults but not on Firebase will be untouched.",
										"text": "#### Example\n\n```js\nawait firebase.config().setDefaults({\n  experiment_enabled: false,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 443,
											"name": "defaults",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A ConfigDefaults instance used to set default values.\n"
											},
											"type": {
												"type": "reference",
												"name": "ConfigDefaults",
												"id": 419
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 409,
									"character": 15
								}
							]
						},
						{
							"id": 444,
							"name": "setDefaultsFromResource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 445,
									"name": "setDefaultsFromResource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the default values from a resource file.\nOn iOS this is a plist file and on Android this is an XML defaultsMap file.",
										"text": "```js\n // TODO @ehesp\n```\n"
									},
									"parameters": [
										{
											"id": 446,
											"name": "resourceName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The plist/xml file name with no extension.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 421,
									"character": 27
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								447,
								424,
								425,
								423
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								426,
								428,
								431,
								433,
								435,
								438,
								441,
								444
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 275,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 419,
					"name": "ConfigDefaults",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing a Config Defaults object.",
						"text": "#### Example\n\n```js\nawait firebase.config().setDefaults({\n  experiment_enabled: false,\n});\n```\n"
					},
					"indexSignature": [
						{
							"id": 420,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "An Interface representing a Config Defaults object.",
								"text": "#### Example\n\n```js\nawait firebase.config().setDefaults({\n  experiment_enabled: false,\n});\n```\n"
							},
							"parameters": [
								{
									"id": 421,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 258,
							"character": 33
						}
					]
				},
				{
					"id": 417,
					"name": "ConfigSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing settable config settings.",
						"text": "#### Example\n\nThe example below makes use of the React Native `__DEV__` global JavaScript variable which\nis exposed.\n\n```js\nawait firebase.config().setConfigSettings({\n  isDeveloperModeEnabled: __DEV__,\n});\n```\n"
					},
					"children": [
						{
							"id": 418,
							"name": "isDeveloperModeEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If enabled, default behaviour such as caching is disabled for a better debugging\nexperience."
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 244,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								418
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 239,
							"character": 33
						}
					]
				},
				{
					"id": 411,
					"name": "ConfigValue",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing a Remote Config value."
					},
					"children": [
						{
							"id": 412,
							"name": "source",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Where the value was retrieved from.",
								"text": "- `remote`:  If the value was retrieved from the server.\n- `default`: If the value was set as a default value.\n- `static`: If no value was found and a static default value was returned instead.\n\nSee the `ValueSource` statics definition.\n\n#### Example\n\n```js\nconst configValue = firebase.config().getValue('beta_enabled');\nconsole.log('Value source: ', configValue.source);\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 197,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "remote"
									},
									{
										"type": "stringLiteral",
										"value": "default"
									},
									{
										"type": "stringLiteral",
										"value": "static"
									}
								]
							}
						},
						{
							"id": 413,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The returned value.",
								"text": "#### Example\n\n```js\nconst configValue = firebase.config().getValue('beta_enabled');\nconsole.log('Value: ', configValue.value);\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 209,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								412,
								413
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 180,
							"character": 30
						}
					]
				},
				{
					"id": 414,
					"name": "ConfigValues",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An Interface representing multiple Config Values.",
						"text": "#### Example\n\n```js\nconst values = firebase.config().getAll();\n```\n"
					},
					"indexSignature": [
						{
							"id": 415,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "An Interface representing multiple Config Values.",
								"text": "#### Example\n\n```js\nconst values = firebase.config().getAll();\n```\n"
							},
							"parameters": [
								{
									"id": 416,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ConfigValue",
								"id": 411
							}
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 221,
							"character": 31
						}
					]
				},
				{
					"id": 399,
					"name": "LastFetchStatus",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A pseudo-enum for usage with ConfigSettingsRead.lastFetchStatus to determine the last fetch status.",
						"text": "#### Example\n\n```js\nfirebase.config.LastFetchStatus;\n```\n"
					},
					"children": [
						{
							"id": 401,
							"name": "FAILURE",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A value indicating that the last fetch failed.",
								"text": "```js\nfirebase.config.LastFetchStatus.FAILURE;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 85,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "failure"
							}
						},
						{
							"id": 403,
							"name": "NO_FETCH_YET",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A value indicating that no fetches have occurred yet.",
								"text": "This usually means you've not called fetch yet.\n\n```js\nfirebase.config.LastFetchStatus.NO_FETCH_YET;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 107,
									"character": 16
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "no_fetch_yet"
							}
						},
						{
							"id": 400,
							"name": "SUCCESS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A value indicating that the last fetch was successful.",
								"text": "```js\nfirebase.config.LastFetchStatus.SUCCESS;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 76,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "success"
							}
						},
						{
							"id": 402,
							"name": "THROTTLED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A value indicating that the last fetch was throttled.",
								"text": "This usually occurs when calling fetch often with a low expiration duration.\n\n```js\nfirebase.config.LastFetchStatus.THROTTLED;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 96,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "throttled"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								401,
								403,
								400,
								402
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 68,
							"character": 34
						}
					]
				},
				{
					"id": 408,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Firebase Remote Config statics.",
						"text": "```js\nfirebase.config;\n```\n"
					},
					"children": [
						{
							"id": 410,
							"name": "LastFetchStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A pseudo-enum for usage with `firebase.config().lastFetchStatus` to determine the last fetch status.",
								"text": "#### Example\n\n```js\nfirebase.config.LastFetchStatus;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 174,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "LastFetchStatus",
								"id": 399
							}
						},
						{
							"id": 409,
							"name": "ValueSource",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A pseudo-enum for usage with ConfigValue.source to determine the value source.",
								"text": "#### Example\n\n```js\nfirebase.config.ValueSource;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 163,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "ValueSource",
								"id": 404
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								410,
								409
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 153,
							"character": 26
						}
					]
				},
				{
					"id": 404,
					"name": "ValueSource",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A pseudo-enum for usage with ConfigValue.source to determine the value source.",
						"text": "#### Example\n\n```js\nfirebase.config.ValueSource;\n```\n"
					},
					"children": [
						{
							"id": 406,
							"name": "DEFAULT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If the value was set as a default value.",
								"text": "```js\nfirebase.config.ValueSource.DEFAULT;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 135,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "default"
							}
						},
						{
							"id": 405,
							"name": "REMOTE",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If the value was retrieved from the server.",
								"text": "```js\nfirebase.config.ValueSource.REMOTE;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 127,
									"character": 10
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "remote"
							}
						},
						{
							"id": 407,
							"name": "STATIC",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "If no value was found and a static default value was returned instead.",
								"text": "```js\nfirebase.config.ValueSource.STATIC;\n```\n"
							},
							"sources": [
								{
									"fileName": "config/lib/index.d.ts",
									"line": 143,
									"character": 10
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "static"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								406,
								405,
								407
							]
						}
					],
					"sources": [
						{
							"fileName": "config/lib/index.d.ts",
							"line": 119,
							"character": 30
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						422
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						419,
						417,
						411,
						414,
						399,
						408,
						404
					]
				}
			],
			"sources": [
				{
					"fileName": "config/lib/index.d.ts",
					"line": 56,
					"character": 23
				}
			]
		},
		{
			"id": 455,
			"name": "Crashlytics",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Crashlytics package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `crashlytics` package:\n\n```js\nimport { firebase } from '@react-native-firebase/crashlytics';\n\n// firebase.crashlytics().X\n```\n\n#### Example 2\n\nUsing the default export from the `crashlytics` package:\n\n```js\nimport crashlytics from '@react-native-firebase/crashlytics';\n\n// crashlytics().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/crashlytics';\n\n// firebase.crashlytics().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "crashlytics\n"
					}
				]
			},
			"children": [
				{
					"id": 457,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Crashlytics service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Crashlytics service for the default app:\n\n```js\nconst defaultAppCrashlytics = firebase.crashlytics();\n```\n"
					},
					"children": [
						{
							"id": 489,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 458,
							"name": "isCrashlyticsCollectionEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether Crashlytics reporting is enabled.",
								"text": "#### Example\n\n```js\nconst isEnabled = firebase.crashlytics().isCrashlyticsCollectionEnabled;\n```\n\n"
							},
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 85,
									"character": 34
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						},
						{
							"id": 459,
							"name": "crash",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 460,
									"name": "crash",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cause your app to crash for testing purposes.",
										"text": "#### Example\n\n```js\nfirebase.crashlytics().crash();\n```\n\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 97,
									"character": 9
								}
							]
						},
						{
							"id": 461,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 462,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Log a message that will appear in any subsequent Crash or Non-fatal error reports.",
										"text": "#### Example\n\n```js\nfirebase.crashlytics().logEvent('Testing a crash');\nfirebase.crashlytics().crash();\n```\n"
									},
									"parameters": [
										{
											"id": 463,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 111,
									"character": 7
								}
							]
						},
						{
							"id": 464,
							"name": "recordError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 465,
									"name": "recordError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Record a JavaScript Error.",
										"text": "The JavaScript stack trace is converted into a mock native iOS or Android exception before submission.\n\n#### Example\n\n```js\nfirebase.crashlytics().recordError(\n new Error('An error was caught')\n);\n```\n"
									},
									"parameters": [
										{
											"id": 466,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Expects an instance of Error; e.g. classes that extend Error will also be supported.\n"
											},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 128,
									"character": 15
								}
							]
						},
						{
							"id": 476,
							"name": "setAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 477,
									"name": "setAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a string value to be associated with the given attribute name which will be visible in the Firebase Crashlytics console.",
										"text": "#### Example\n\n```js\nawait firebase.crashlytics().setAttribute('role', 'admin');\n```\n"
									},
									"parameters": [
										{
											"id": 478,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the attribute to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 479,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string value for the given attribute.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 193,
									"character": 16
								}
							]
						},
						{
							"id": 480,
							"name": "setAttributes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 481,
									"name": "setAttributes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Like `setAttribute` but for multiple attributes.",
										"text": "#### Example\n\n```js\nawait firebase.crashlytics().setAttributes({\n  role: 'admin',\n  followers: '13',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 482,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object of key/value attribute name and values.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 483,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 484,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 485,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "crashlytics/lib/index.d.ts",
															"line": 209,
															"character": 29
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 209,
									"character": 17
								}
							]
						},
						{
							"id": 486,
							"name": "setCrashlyticsCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 487,
									"name": "setCrashlyticsCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enable/disable Crashlytics reporting.",
										"text": "Use this for opt-in first user data collection flows combined with `firebase.json` settings to disable auto collection.\n\n#### Example\n\n```js\n// Disable crash reporting\nawait firebase.crashlytics().setCrashlyticsCollectionEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 488,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A boolean value representing whether to enable Crashlytics error collection.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 225,
									"character": 35
								}
							]
						},
						{
							"id": 473,
							"name": "setUserEmail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 474,
									"name": "setUserEmail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optionally specify a user email which will be visible in the Firebase Crashlytics console.",
										"text": "If you choose to collect contact information it is strongly recommend that you disclose this in your apps privacy policy.\n\n#### Example\n\n```js\nfirebase.crashlytics().setUserEmail('user@gmail.com');\n```\n"
									},
									"parameters": [
										{
											"id": 475,
											"name": "userEmail",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A users email address.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 179,
									"character": 16
								}
							]
						},
						{
							"id": 467,
							"name": "setUserId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 468,
									"name": "setUserId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Specify a user identifier which will be visible in the Firebase Crashlytics console.",
										"text": "It is recommended for privacy purposes that this value be a value that's meaningless to a third-party\nobserver; such as an arbitrary string that ties an end-user to a record in your system e.g. a database record id.\n\n#### Example\n\n```js\n// Custom user id\nawait firebase.crashlytics().setUserId('123456789');\n// Firebase auth uid\nawait firebase.crashlytics().setUserId(\n firebase.auth().currentUser.uid\n);\n```\n"
									},
									"parameters": [
										{
											"id": 469,
											"name": "userId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An arbitrary string that ties an end-user to a record in your system e.g. a database record id.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 149,
									"character": 13
								}
							]
						},
						{
							"id": 470,
							"name": "setUserName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 471,
									"name": "setUserName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Optionally specify a user name which will be visible in the Firebase Crashlytics console.",
										"text": "If you choose to collect contact information it is strongly recommend that you disclose this in your apps privacy policy.\n\n#### Example\n\n```js\nawait firebase.crashlytics().setUserName('Alias');\n```\n"
									},
									"parameters": [
										{
											"id": 472,
											"name": "userName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A string representing an end-user's name or app username\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "crashlytics/lib/index.d.ts",
									"line": 164,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								489,
								458
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								459,
								461,
								464,
								476,
								480,
								486,
								473,
								467,
								470
							]
						}
					],
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 74,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 456,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "crashlytics/lib/index.d.ts",
							"line": 59,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						457
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						456
					]
				}
			],
			"sources": [
				{
					"fileName": "crashlytics/lib/index.d.ts",
					"line": 56,
					"character": 28
				}
			]
		},
		{
			"id": 497,
			"name": "Database",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Database package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `database` package:\n\n```js\nimport { firebase } from '@react-native-firebase/database';\n\n// firebase.database().X\n```\n\n#### Example 2\n\nUsing the default export from the `database` package:\n\n```js\nimport database from '@react-native-firebase/database';\n\n// database().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/database';\n\n// firebase.database().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "database\n"
					}
				]
			},
			"children": [
				{
					"id": 785,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Database service is available for the default app or a given app.",
						"text": "#### Example 1\n\nGet the database instance for the **default app**:\n\n```js\nconst databaseForDefaultApp = firebase.database();\n```\n\n#### Example 2\n\nGet the database instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst databaseForOtherApp = firebase.database(otherApp);\n```\n\n"
					},
					"children": [
						{
							"id": 807,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 786,
							"name": "getServerTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 787,
									"name": "getServerTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the current Firebase Database server time as a JavaScript Date object."
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1072,
									"character": 17
								}
							]
						},
						{
							"id": 796,
							"name": "goOffline",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 797,
									"name": "goOffline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disconnects from the server (all Database operations will be completed offline).",
										"text": "The client automatically maintains a persistent connection to the Database server, which\nwill remain active indefinitely and reconnect when disconnected. However, the `goOffline()` and\n`goOnline()` methods may be used to control the client connection in cases where a persistent\nconnection is undesirable.\n\nWhile offline, the client will no longer receive data updates from the Database. However,\nall Database operations performed locally will continue to immediately fire events, allowing\nyour application to continue behaving normally. Additionally, each operation performed locally\nwill automatically be queued and retried upon reconnection to the Database server.\n\nTo reconnect to the Database and begin receiving remote events, see `goOnline()`.\n\n#### Example\n\n```js\nawait firebase.database().goOnline();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1146,
									"character": 13
								}
							]
						},
						{
							"id": 794,
							"name": "goOnline",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 795,
									"name": "goOnline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reconnects to the server and synchronizes the offline Database state with the server state.",
										"text": "This method should be used after disabling the active connection with `goOffline()`. Once\nreconnected, the client will transmit the proper data and fire the appropriate events so that\nyour client \"catches up\" automatically.\n\n#### Example\n\n```js\nawait firebase.database().goOnline();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1123,
									"character": 12
								}
							]
						},
						{
							"id": 788,
							"name": "ref",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 789,
									"name": "ref",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a `Reference` representing the location in the Database corresponding to the provided path.\nIf no path is provided, the Reference will point to the root of the Database.",
										"text": "#### Example\n\n```js\n// Get a reference to the root of the Database\nconst rootRef = firebase.database().ref();\n\n// Get a reference to the /users/ada node\nconst adaRef = firebase.database().ref(\"users/ada\");\n```\n"
									},
									"parameters": [
										{
											"id": 790,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional path representing the location the returned `Reference` will point. If not provided, the returned `Reference` will point to the root of the Database.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 505
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1090,
									"character": 7
								}
							]
						},
						{
							"id": 791,
							"name": "refFromURL",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 792,
									"name": "refFromURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a `Reference` representing the location in the Database corresponding to the provided Firebase URL.",
										"text": "An exception is thrown if the URL is not a valid Firebase Database URL or it has a different domain than the current Database instance.\n\nNote that all query parameters (orderBy, limitToLast, etc.) are ignored and are not applied to the returned Reference.\n\n#### Example\n\n```js\n// Get a reference to the root of the Database\nconst rootRef = firebase.database().ref(\"https://<DATABASE_NAME>.firebaseio.com\");\n```\n"
									},
									"parameters": [
										{
											"id": 793,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The Firebase URL at which the returned Reference will point.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 505
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1108,
									"character": 14
								}
							]
						},
						{
							"id": 801,
							"name": "setLoggingEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 802,
									"name": "setLoggingEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the native logging level for the database module. By default,\nonly warnings and errors are logged natively. Setting this to true will log all\ndatabase events.",
										"text": "> Ensure logging is disabled for production apps, as excessive logging can cause performance issues.\n\n#### Example\n\n```js\n// Set debug logging if developing\nif (__DEV__) {\n  firebase.database().setLoggingEnabled(true);\n}\n```\n"
									},
									"parameters": [
										{
											"id": 803,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Whether debug logging is enabled.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1188,
									"character": 21
								}
							]
						},
						{
							"id": 804,
							"name": "setPersistenceCacheSizeBytes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 805,
									"name": "setPersistenceCacheSizeBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "By default Firebase Database will use up to 10MB of disk space to cache data. If the cache grows beyond this size,\nFirebase Database will start removing data that hasn't been recently used. If you find that your application\ncaches too little or too much data, call this method to change the cache size. This method must be called before\ncreating your first Database reference and only needs to be called once per application.",
										"text": "Note that the specified cache size is only an approximation and the size on disk may temporarily exceed it at times.\nCache sizes smaller than 1 MB or greater than 100 MB are not supported.\n\n#### Example\n\n```js\nfirebase.database().setPersistenceEnabled(true);\nfirebase.database().setPersistenceCacheSizeBytes(2000000); // 2MB\n\nasync function bootstrap() {\n  // Bootstrapping application\n  const snapshot = await firebase.database().ref('settings').once('value');\n}\n```\n"
									},
									"parameters": [
										{
											"id": 806,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new size of the cache in bytes.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1213,
									"character": 32
								}
							]
						},
						{
							"id": 798,
							"name": "setPersistenceEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 799,
									"name": "setPersistenceEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets whether persistence is enabled for all database calls across all app\ninstances.",
										"text": "> Ensure this is called before any database calls are performed, otherwise\npersistence will only come into effect when the app is next started.\n\n#### Example\n\n```js\nfirebase.database().setPersistenceEnabled(true);\n\nasync function bootstrap() {\n  // Bootstrapping application\n  const snapshot = await firebase.database().ref('settings').once('value');\n}\n```\n"
									},
									"parameters": [
										{
											"id": 800,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Whether persistence is enabled for the Database service.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1168,
									"character": 25
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								807
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								786,
								796,
								794,
								788,
								791,
								801,
								804,
								798
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 1068,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 759,
					"name": "DataSnapshot",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `DataSnapshot` contains data from a Database location.",
						"text": "Any time you read data from the Database, you receive the data as a `DataSnapshot`. A `DataSnapshot`\nis passed to the event callbacks you attach with `on()` or `once()`. You can extract the contents\nof the snapshot as a JavaScript object by calling the val() method. Alternatively, you can traverse\ninto the snapshot by calling `child()` to return child snapshots (which you could then call `val()` on).\n"
					},
					"children": [
						{
							"id": 760,
							"name": "key",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The key (last part of the path) of the location of this `DataSnapshot`.",
								"text": "The last token in a Database location is considered its key. For example, \"ada\" is the key\nfor the /users/ada/ node. Accessing the key on any `DataSnapshot` will return the key for the\nlocation that generated it. However, accessing the key on the root URL of a Database will return `null`.\n"
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 910,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 761,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Reference for the location that generated this `DataSnapshot`."
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 915,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 505
							}
						},
						{
							"id": 762,
							"name": "child",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 763,
									"name": "child",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets another `DataSnapshot` for the location at the specified relative path.",
										"text": "Passing a relative path to the `child()` method of a DataSnapshot returns another `DataSnapshot`\nfor the location at the specified relative path. The relative path can either be a simple child\nname (for example, \"ada\") or a deeper, slash-separated path (for example, \"ada/name/first\").\nIf the child location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot` whose value\nis `null`) is returned.\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users/ada').once('value');\nsnapshot.child('name').val(); // {first:\"Ada\",last:\"Lovelace\"}\nsnapshot.child('name/first').val(); // \"Ada\"\nsnapshot.child('name/foo').val(); // null\n```\n"
									},
									"parameters": [
										{
											"id": 764,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A relative path to the location of child data.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataSnapshot",
										"id": 759
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 937,
									"character": 9
								}
							]
						},
						{
							"id": 765,
							"name": "exists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 766,
									"name": "exists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `DataSnapshot` contains any data. It is slightly more efficient than using snapshot.val() !== null.",
										"text": "#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users/ada').once('value');\nsnapshot.exists(); // true\nsnapshot.child('name/foo').exists(); // false\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 950,
									"character": 10
								}
							]
						},
						{
							"id": 767,
							"name": "exportVal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 768,
									"name": "exportVal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Exports the entire contents of the DataSnapshot as a JavaScript object.",
										"text": "The `exportVal()` method is similar to val(), except priority information is included (if available),\nmaking it suitable for backing up your data.\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users/ada').once('value');\nconst data = snapshot.exportVal();\nconsole.log(data['.value']); // { ... }\nconsole.log(data['.priority']); // null\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 967,
									"character": 13
								}
							]
						},
						{
							"id": 769,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 770,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enumerates the top-level children in the `DataSnapshot`.",
										"text": "Because of the way JavaScript objects work, the ordering of data in the JavaScript object\nreturned by `val()` is not guaranteed to match the ordering on the server nor the ordering\nof `child_added` events. That is where `forEach()` comes in handy. It guarantees the children of\na DataSnapshot will be iterated in their query order.\n\nIf no explicit `orderBy*()` method is used, results are returned ordered by key (unless priorities are used, in which case, results are returned by priority).\n"
									},
									"parameters": [
										{
											"id": 771,
											"name": "action",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that will be called for each child DataSnapshot. The callback can return true to cancel further enumeration.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 981,
									"character": 11
								}
							]
						},
						{
							"id": 772,
							"name": "getPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 773,
									"name": "getPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the priority value of the data in this DataSnapshot."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 986,
									"character": 15
								}
							]
						},
						{
							"id": 774,
							"name": "hasChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 775,
									"name": "hasChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if the specified child path has (non-null) data.",
										"text": "#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users/ada').once('value');\nconsole.log(snapshot.hasChild('name')); // true\nconsole.log(snapshot.hasChild('foo')); // false\n```\n"
									},
									"parameters": [
										{
											"id": 776,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A relative path to the location of a potential child.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1001,
									"character": 12
								}
							]
						},
						{
							"id": 777,
							"name": "hasChildren",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 778,
									"name": "hasChildren",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not the `DataSnapshot` has any non-null child properties.",
										"text": "You can use `hasChildren()` to determine if a `DataSnapshot` has any children. If it does, you\ncan enumerate them using `forEach()`. If it doesn't, then either this snapshot contains a primitive\nvalue (which can be retrieved with `val()`) or it is empty (in which case, `val()` will return null).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users').once('value');\nconsole.log(snapshot.hasChildren()); // true\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1017,
									"character": 15
								}
							]
						},
						{
							"id": 779,
							"name": "numChildren",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 780,
									"name": "numChildren",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the number of child properties of this DataSnapshot."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1022,
									"character": 15
								}
							]
						},
						{
							"id": 781,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 782,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a JSON-serializable representation of this object."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "object"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1027,
									"character": 10
								}
							]
						},
						{
							"id": 783,
							"name": "val",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 784,
									"name": "val",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extracts a JavaScript value from a `DataSnapshot`.",
										"text": "Depending on the data in a DataSnapshot, the `val()` method may return a scalar type (string,\nnumber, or boolean), an array, or an object. It may also return null, indicating that the\n`DataSnapshot` is empty (contains no data).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users/ada/last').once('value');\nsnapshot.val(); // \"Lovelace\"\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 1043,
									"character": 7
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								760,
								761
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								762,
								765,
								767,
								769,
								772,
								774,
								777,
								779,
								781,
								783
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 902,
							"character": 31
						}
					]
				},
				{
					"id": 739,
					"name": "OnDisconnect",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The `onDisconnect` class allows you to write or clear data when your client disconnects from the Database server.\nThese updates occur whether your client disconnects cleanly or not, so you can rely on them to clean up data\neven if a connection is dropped or a client crashes.",
						"text": "The onDisconnect class is most commonly used to manage presence in applications where it is\nuseful to detect how many clients are connected and when other clients disconnect.\n\nTo avoid problems when a connection is dropped before the requests can be transferred to the Database\nserver, these functions should be called before writing any data.\n\nNote that `onDisconnect` operations are only triggered once. If you want an operation to occur each time a\ndisconnect occurs, you'll need to re-establish the `onDisconnect` operations each time you reconnect.\n"
					},
					"children": [
						{
							"id": 740,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 741,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancels all previously queued `onDisconnect()` set or update events for this location and all children.",
										"text": "If a write has been queued for this location via a `set()` or `update()` at a parent location,\nthe write at this location will be canceled, though writes to sibling locations will still occur.\n\n#### Example\n\n```js\nconst ref = firebase.database().ref('onlineState');\nawait ref.onDisconnect().set(false);\n// Sometime later...\nawait ref.onDisconnect().cancel();\n```\n"
									},
									"parameters": [
										{
											"id": 742,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback function that will be called when synchronization to the server has completed. The callback will be passed a single parameter: null for success, or an Error object indicating a failure.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 813,
									"character": 10
								}
							]
						},
						{
							"id": 743,
							"name": "remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 744,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Ensures the data at this location is deleted when the client is disconnected (due to closing the browser, navigating to a new page, or network issues)."
									},
									"parameters": [
										{
											"id": 745,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback function that will be called when synchronization to the server has completed. The callback will be passed a single parameter: null for success, or an Error object indicating a failure.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 820,
									"character": 10
								}
							]
						},
						{
							"id": 746,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 747,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Ensures the data at this location is set to the specified value when the client is disconnected\n(due to closing the app, navigating to a new view, or network issues).",
										"text": "`set()` is especially useful for implementing \"presence\" systems, where a value should be changed\nor cleared when a user disconnects so that they appear \"offline\" to other users.\n\nNote that `onDisconnect` operations are only triggered once. If you want an operation to occur each time a\ndisconnect occurs, you'll need to re-establish the `onDisconnect` operations each time.\n\n#### Example\n\n```js\nvar ref = firebase.database().ref('users/ada/status');\nawait ref.onDisconnect().set('I disconnected!');\n```\n"
									},
									"parameters": [
										{
											"id": 748,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to be written to this location on disconnect (can be an object, array, string, number, boolean, or null)."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 749,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback function that will be called when synchronization to the Database server has completed. The callback will be passed a single parameter: null for success, or an Error object indicating a failure.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 842,
									"character": 7
								}
							]
						},
						{
							"id": 750,
							"name": "setWithPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 751,
									"name": "setWithPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Ensures the data at this location is set to the specified value and priority when the client is disconnected (due to closing the browser, navigating to a new page, or network issues)."
									},
									"parameters": [
										{
											"id": 752,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 753,
											"name": "priority",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The priority to set"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 754,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback function that will be called when synchronization to the Database server has completed. The callback will be passed a single parameter: null for success, or an Error object indicating a failure.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 851,
									"character": 19
								}
							]
						},
						{
							"id": 755,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 756,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes multiple values at this location when the client is disconnected (due to closing the browser, navigating to a new page, or network issues).",
										"text": "The `values` argument contains multiple property-value pairs that will be written to the Database together.\nEach child property can either be a simple property (for example, \"name\") or a relative path (for example,\n\"name/first\") from the current location to the data to update.\n\nAs opposed to the `set()` method, `update()` can be use to selectively update only the referenced\nproperties at the current location (instead of replacing all the child properties at the current location).\n\n#### Example\n\n```js\nvar ref = firebase.database().ref(\"users/ada\");\nref.update({\n  onlineState: true,\n  status: \"I'm online.\"\n});\nref.onDisconnect().update({\n  onlineState: false,\n  status: \"I'm offline.\"\n});\n```\n"
									},
									"parameters": [
										{
											"id": 757,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing multiple values."
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										},
										{
											"id": 758,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback function that will be called when synchronization to the server has completed. The callback will be passed a single parameter: null for success, or an Error object indicating a failure.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 884,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								740,
								743,
								746,
								750,
								755
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 795,
							"character": 31
						}
					]
				},
				{
					"id": 685,
					"name": "Query",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Query sorts and filters the data at a Database location so only a subset of the child data\nis included. This can be used to order a collection of data by some attribute (for example,\nheight of dinosaurs) as well as to restrict a large list of items (for example, chat messages)\ndown to a number suitable for synchronizing to the client. Queries are created by chaining\ntogether one or more of the filter methods defined here.",
						"text": "Just as with a `Reference`, you can receive data from a Query by using the on() method. You will\nonly receive events and `DataSnapshot`s for the subset of the data that matches your query.\n"
					},
					"children": [
						{
							"id": 686,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a Reference to the Query's location."
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 410,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 505
							}
						},
						{
							"id": 687,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 688,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Query with the specified ending point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe ending point is inclusive, so children with exactly the specified value will be included\nin the query. The optional key argument can be used to further limit the range of the query.\nIf it is specified, then children that have exactly the specified value must also have a key\nname less than or equal to the specified key.\n\nYou can read more about endAt() in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst ref = firebase.database().ref(\"users\");\nconst snapshot = await ref.orderByKey().endAt('Ada Lovelace').once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 689,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to end at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 690,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to end at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 435,
									"character": 9
								}
							]
						},
						{
							"id": 691,
							"name": "equalTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 692,
									"name": "equalTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Query with the specified ending point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe optional key argument can be used to further limit the range of the query. If it is\nspecified, then children that have exactly the specified value must also have exactly the\nspecified key as their key name. This can be used to filter result sets with many matches for the same value.\n\nYou can read more about equalTo() in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst ref = firebase.database().ref(\"users\");\nconst snapshot = await ref.orderByChild('age').equalTo(30).once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 693,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to match for. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 694,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to start at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 459,
									"character": 11
								}
							]
						},
						{
							"id": 695,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 696,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not the current and provided queries represent the same location, have the same query parameters.",
										"text": "Two Reference objects are equivalent if they represent the same location and are from the same instance of\n{@link app}.  Equivalent queries share the same sort order, limits, and starting and ending points.\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref('users').orderByKey().endAt('Ada Lovelace');\nconst ref2 = firebase.database().ref('users').orderByKey();\n\nconsole.log(ref1.isEqual(ref2)); // false\n```\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref('users').orderByKey().endAt('Ada Lovelace');\nconst ref2 = firebase.database().ref('users').endAt('Ada Lovelace').orderByKey();\n\nconsole.log(ref1.isEqual(ref2)); // true\n```\n"
									},
									"parameters": [
										{
											"id": 697,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The query to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "Query",
												"id": 685
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 487,
									"character": 11
								}
							]
						},
						{
							"id": 736,
							"name": "keepSynced",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 737,
									"name": "keepSynced",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "By calling `keepSynced(true)` on a location, the data for that location will automatically\nbe downloaded and kept in sync, even when no listeners are attached for that location.",
										"text": "#### Example\n\n```js\nconst ref = firebase.database().ref('users');\nawait ref.keepSynced(true);\n```\n"
									},
									"parameters": [
										{
											"id": 738,
											"name": "bool",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Pass `true` to keep this location synchronized, pass `false` to stop synchronization.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 778,
									"character": 14
								}
							]
						},
						{
							"id": 698,
							"name": "limitToFirst",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 699,
									"name": "limitToFirst",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` limited to the first specific number of children.",
										"text": "The `limitToFirst()` method is used to set a maximum number of children to be synced for a\ngiven callback. If we set a limit of 100, we will initially only receive up to 100 `child_added`\nevents. If we have fewer than 100 messages stored in our Database, a child_added event will\nfire for each message. However, if we have over 100 messages, we will only receive a `child_added`\nevent for the first 100 ordered messages. As items change, we will receive `child_removed` events\nfor each item that drops out of the active list so that the total number stays at 100.\n\nYou can read more about `limitToFirst()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst snapshot = firebase.database().ref('users').orderByKey().limitToFirst(2).once('value');\nconsole.log(snapshot.numChildren()); // 2\n```\n"
									},
									"parameters": [
										{
											"id": 700,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of nodes to include in this query.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 510,
									"character": 16
								}
							]
						},
						{
							"id": 701,
							"name": "limitToLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 702,
									"name": "limitToLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object limited to the last specific number of children.",
										"text": "The `limitToLast()` method is used to set a maximum number of children to be synced for a given\ncallback. If we set a limit of 100, we will initially only receive up to 100 `child_added` events.\nIf we have fewer than 100 messages stored in our Database, a `child_added` event will fire for\neach message. However, if we have over 100 messages, we will only receive a `child_added` event\nfor the last 100 ordered messages. As items change, we will receive `child_removed` events for\neach item that drops out of the active list so that the total number stays at 100.\n\nYou can read more about `limitToLast()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst snapshot = firebase.database().ref('users').orderByKey().limitToLast(2).once('value');\nconsole.log(snapshot.numChildren()); // 2\n```\n"
									},
									"parameters": [
										{
											"id": 703,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of nodes to include in this query.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 533,
									"character": 15
								}
							]
						},
						{
							"id": 704,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 705,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detaches a callback previously attached with `on()`.",
										"text": "Detach a callback previously attached with `on()`. Note that if `on()` was called multiple times\nwith the same eventType and callback, the callback will be called multiple times for each\nevent, and `off()` must be called multiple times to remove the callback. Calling `off()` on a parent\nlistener will not automatically remove listeners registered on child nodes, `off()` must also be\ncalled on any child listeners to remove the callback.\n\nIf a callback is not specified, all callbacks for the specified eventType will be removed.\nSimilarly, if no eventType is specified, all callbacks for the `Reference` will be removed.\n\n#### Example\n\n```js\nconst ref = firebase.database().ref('settings');\nconst onValueChange = function(snapshot) { ... };\nconst onChildAdded = function(snapshot) { ... };\n\nref.on('value', onValueChange);\nref.child('meta-data').on('child_added', onChildAdded);\n// Sometime later...\nref.off('value', onValueChange);\nref.child('meta-data').off('child_added', onChildAdded);\n```\n"
									},
									"parameters": [
										{
											"id": 706,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks for the Reference will be removed."
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 707,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The callback function that was passed to `on()` or `undefined` to remove all callbacks."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 708,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The context that was passed to `on()`.\n"
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 565,
									"character": 7
								}
							]
						},
						{
							"id": 709,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 710,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for data changes at a particular location.",
										"text": "This is the primary way to read data from a Database. Your callback will be triggered for the\ninitial data and again whenever the data changes. Use `off()` to stop receiving updates..\n\n**value** event\n\nThis event will trigger once with the initial data stored at this location, and then trigger\nagain each time the data changes. The `DataSnapshot` passed to the callback will be for the location\nat which on() was called. It won't trigger until the entire contents has been synchronized.\nIf the location has no data, it will be triggered with an empty `DataSnapshot`\n(`val()` will return `null`).\n\n**child_added** event\n\nThis event will be triggered once for each initial child at this location, and it will be\ntriggered again every time a new child is added. The `DataSnapshot` passed into the callback\nwill reflect the data for the relevant child. For ordering purposes, it is passed a second argument\nwhich is a string containing the key of the previous sibling child by sort order, or `null` if\nit is the first child.\n\n**child_removed** event\n\nThis event will be triggered once every time a child is removed. The `DataSnapshot` passed into\nthe callback will be the old data for the child that was removed. A child will get removed when either:\n- a client explicitly calls `remove()` on that child or one of its ancestors\n- a client calls `set(null)` on that child or one of its ancestors\n- that child has all of its children removed\n- there is a query in effect which now filters out the child (because it's sort order changed or the max limit was hit)\n\n**child_changed** event\n\nThis event will be triggered when the data stored in a child (or any of its descendants) changes.\nNote that a single `child_changed` event may represent multiple changes to the child. The\n`DataSnapshot` passed to the callback will contain the new child contents. For ordering purposes,\nthe callback is also passed a second argument which is a string containing the key of the previous\nsibling child by sort order, or `null` if it is the first child.\n\n**child_moved** event\n\nThis event will be triggered when a child's sort order changes such that its position relative\nto its siblings changes. The `DataSnapshot` passed to the callback will be for the data of the child\nthat has moved. It is also passed a second argument which is a string containing the key of the\nprevious sibling child by sort order, or `null` if it is the first child.\n"
									},
									"parameters": [
										{
											"id": 711,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\""
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 712,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot. For ordering purposes, \"child_added\", \"child_changed\", and \"child_moved\" will also be passed a string containing the key of the previous child, by sort order, or `null` if it is the first child."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 713,
											"name": "cancelCallbackOrContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 714,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If provided, this object will be used as `this` when calling your callback(s).\n\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Object"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 619,
									"character": 6
								}
							]
						},
						{
							"id": 715,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 716,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for exactly one event of the specified event type, and then stops listening.",
										"text": "This is equivalent to calling `on()`, and then calling `off()` inside the callback function. See `on()` for details on the event types.\n\n#### Example\n\n```js\n// Promise\nconst snapshot = await firebase.database().ref('users').once('value');\n// Callback\nfirebase.database().ref('users).once('value', (snapshot) => {\n  console.log(snapshot.val());\n});\n```\n"
									},
									"parameters": [
										{
											"id": 717,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\""
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 718,
											"name": "successCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot. For ordering purposes, \"child_added\", \"child_changed\", and \"child_moved\" will also be passed a string containing the key of the previous child by sort order, or `null` if it is the first child.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DataSnapshot",
												"id": 759
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 645,
									"character": 8
								}
							]
						},
						{
							"id": 719,
							"name": "orderByChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 720,
									"name": "orderByChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by the specified child key.",
										"text": "Queries can only order by one key at a time. Calling `orderByChild()` multiple times on the same query is an error.\n\nFirebase queries allow you to order your data by any child key on the fly. However, if you know in advance what\nyour indexes will be, you can define them via the [.indexOn](https://firebase.google.com/docs/database/security/indexing-data?authuser=0)\nrule in your Security Rules for better performance.\n\nYou can read more about orderByChild() in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users').orderByChild('age').once('value');\nsnapshot.forEach((snapshot) => {\n console.log('Users age:', snapshot.val().age);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 721,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The child path node to order by.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 669,
									"character": 16
								}
							]
						},
						{
							"id": 722,
							"name": "orderByKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 723,
									"name": "orderByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by key.",
										"text": "Sorts the results of a query by their (ascending) key values.\n\nYou can read more about `orderByKey()` in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users').orderByKey().once('value');\nsnapshot.forEach((snapshot) => {\n console.log('User:', snapshot.val());\n});\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 687,
									"character": 14
								}
							]
						},
						{
							"id": 724,
							"name": "orderByPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 725,
									"name": "orderByPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new Query object ordered by priority.",
										"text": "Applications need not use priority but can order collections by ordinary properties\n(see [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data)\nfor alternatives to priority).\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 696,
									"character": 19
								}
							]
						},
						{
							"id": 726,
							"name": "orderByValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 727,
									"name": "orderByValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by value.",
										"text": "If the children of a query are all scalar values (string, number, or boolean), you can order\nthe results by their (ascending) values.\n\nYou can read more about `orderByValue()` in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nawait firebase.database().ref('scores').orderByValue().once('value');\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 712,
									"character": 16
								}
							]
						},
						{
							"id": 728,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 729,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a `Query` with the specified starting point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe starting point is inclusive, so children with exactly the specified value will be included\nin the query. The optional key argument can be used to further limit the range of the query.\nIf it is specified, then children that have exactly the specified value must also have a key\nname greater than or equal to the specified key.\n\nYou can read more about `startAt()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nawait firebase.database().ref('users').orderByChild('age').startAt(21).once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 730,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to start at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 731,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to start at. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 736,
									"character": 11
								}
							]
						},
						{
							"id": 732,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 733,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a JSON-serializable representation of this object."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 741,
									"character": 10
								}
							]
						},
						{
							"id": 734,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 735,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the absolute URL for this location.",
										"text": "The `toString()` method returns a URL that is ready to be put into a browser, curl command, or\na `firebase.database().refFromURL()` call. Since all of those expect the URL to be url-encoded,\n`toString()` returns an encoded URL.\n\nAppend '.json' to the returned URL when typed into a browser to download JSON-formatted data.\nIf the location is secured (that is, not publicly readable), you will get a permission-denied error.\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref();\nconst ref2 = firebase.database().ref('users').orderByValue();\n\nref1.toString(); // https://sample-app.firebaseio.com/\nref2.toString(); // https://sample-app.firebaseio.com/users\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 763,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								686
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								687,
								691,
								695,
								736,
								698,
								701,
								704,
								709,
								715,
								719,
								722,
								724,
								726,
								728,
								732,
								734
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 406,
							"character": 24
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Reference",
							"id": 505
						}
					]
				},
				{
					"id": 505,
					"name": "Reference",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Reference represents a specific location in your Database and can be used for reading or\nwriting data to that Database location.",
						"text": "You can reference the root or child location in your Database by calling `firebase.database().ref()`\nor `firebase.database().ref(\"child/path\")`.\n"
					},
					"children": [
						{
							"id": 506,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent location of a Reference. The parent of a root Reference is `null`.",
								"text": "#### Example\n\n```js\nfirebase.database().ref().parent; // null\nfirebase.database().ref('users/dave').parent; // 'users' reference\n```\n"
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 123,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Reference",
										"id": 505
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 542,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a Reference to the Query's location."
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 410,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 505
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.ref",
								"id": 686
							}
						},
						{
							"id": 507,
							"name": "root",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The root Reference of the Database.",
								"text": "#### Example\n\n```js\nfirebase.database().ref().root; // '/' reference path\nfirebase.database().ref('users/ada').root; // '/' reference\n```\n"
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 505
							}
						},
						{
							"id": 508,
							"name": "child",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 509,
									"name": "child",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a Reference for the location at the specified relative path.",
										"text": "The relative path can either be a simple child name (for example, \"ada\") or a deeper\nslash-separated path (for example, \"ada/name/first\").\n\n#### Example\n\n```js\nconst usersRef = firebase.database().ref('users');\nconst adaRef = usersRef.child('ada/name/first'); // childRef path is 'users/ada/name/first'\n```\n"
									},
									"parameters": [
										{
											"id": 510,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A relative path from this location to the desired child location.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 505
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 152,
									"character": 9
								}
							]
						},
						{
							"id": 543,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 544,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Query with the specified ending point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe ending point is inclusive, so children with exactly the specified value will be included\nin the query. The optional key argument can be used to further limit the range of the query.\nIf it is specified, then children that have exactly the specified value must also have a key\nname less than or equal to the specified key.\n\nYou can read more about endAt() in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst ref = firebase.database().ref(\"users\");\nconst snapshot = await ref.orderByKey().endAt('Ada Lovelace').once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 545,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to end at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 546,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to end at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.endAt",
										"id": 687
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 435,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.endAt",
								"id": 687
							}
						},
						{
							"id": 547,
							"name": "equalTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 548,
									"name": "equalTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Query with the specified ending point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe optional key argument can be used to further limit the range of the query. If it is\nspecified, then children that have exactly the specified value must also have exactly the\nspecified key as their key name. This can be used to filter result sets with many matches for the same value.\n\nYou can read more about equalTo() in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst ref = firebase.database().ref(\"users\");\nconst snapshot = await ref.orderByChild('age').equalTo(30).once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 549,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to match for. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 550,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to start at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.equalTo",
										"id": 691
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 459,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.equalTo",
								"id": 691
							}
						},
						{
							"id": 551,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 552,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not the current and provided queries represent the same location, have the same query parameters.",
										"text": "Two Reference objects are equivalent if they represent the same location and are from the same instance of\n{@link app}.  Equivalent queries share the same sort order, limits, and starting and ending points.\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref('users').orderByKey().endAt('Ada Lovelace');\nconst ref2 = firebase.database().ref('users').orderByKey();\n\nconsole.log(ref1.isEqual(ref2)); // false\n```\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref('users').orderByKey().endAt('Ada Lovelace');\nconst ref2 = firebase.database().ref('users').endAt('Ada Lovelace').orderByKey();\n\nconsole.log(ref1.isEqual(ref2)); // true\n```\n"
									},
									"parameters": [
										{
											"id": 553,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The query to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "Query",
												"id": 685
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.isEqual",
										"id": 695
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 487,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.isEqual",
								"id": 695
							}
						},
						{
							"id": 592,
							"name": "keepSynced",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 593,
									"name": "keepSynced",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "By calling `keepSynced(true)` on a location, the data for that location will automatically\nbe downloaded and kept in sync, even when no listeners are attached for that location.",
										"text": "#### Example\n\n```js\nconst ref = firebase.database().ref('users');\nawait ref.keepSynced(true);\n```\n"
									},
									"parameters": [
										{
											"id": 594,
											"name": "bool",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Pass `true` to keep this location synchronized, pass `false` to stop synchronization.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.keepSynced",
										"id": 736
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 778,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.keepSynced",
								"id": 736
							}
						},
						{
							"id": 554,
							"name": "limitToFirst",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 555,
									"name": "limitToFirst",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` limited to the first specific number of children.",
										"text": "The `limitToFirst()` method is used to set a maximum number of children to be synced for a\ngiven callback. If we set a limit of 100, we will initially only receive up to 100 `child_added`\nevents. If we have fewer than 100 messages stored in our Database, a child_added event will\nfire for each message. However, if we have over 100 messages, we will only receive a `child_added`\nevent for the first 100 ordered messages. As items change, we will receive `child_removed` events\nfor each item that drops out of the active list so that the total number stays at 100.\n\nYou can read more about `limitToFirst()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst snapshot = firebase.database().ref('users').orderByKey().limitToFirst(2).once('value');\nconsole.log(snapshot.numChildren()); // 2\n```\n"
									},
									"parameters": [
										{
											"id": 556,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of nodes to include in this query.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.limitToFirst",
										"id": 698
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 510,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.limitToFirst",
								"id": 698
							}
						},
						{
							"id": 557,
							"name": "limitToLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 558,
									"name": "limitToLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object limited to the last specific number of children.",
										"text": "The `limitToLast()` method is used to set a maximum number of children to be synced for a given\ncallback. If we set a limit of 100, we will initially only receive up to 100 `child_added` events.\nIf we have fewer than 100 messages stored in our Database, a `child_added` event will fire for\neach message. However, if we have over 100 messages, we will only receive a `child_added` event\nfor the last 100 ordered messages. As items change, we will receive `child_removed` events for\neach item that drops out of the active list so that the total number stays at 100.\n\nYou can read more about `limitToLast()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst snapshot = firebase.database().ref('users').orderByKey().limitToLast(2).once('value');\nconsole.log(snapshot.numChildren()); // 2\n```\n"
									},
									"parameters": [
										{
											"id": 559,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of nodes to include in this query.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.limitToLast",
										"id": 701
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 533,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.limitToLast",
								"id": 701
							}
						},
						{
							"id": 560,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 561,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detaches a callback previously attached with `on()`.",
										"text": "Detach a callback previously attached with `on()`. Note that if `on()` was called multiple times\nwith the same eventType and callback, the callback will be called multiple times for each\nevent, and `off()` must be called multiple times to remove the callback. Calling `off()` on a parent\nlistener will not automatically remove listeners registered on child nodes, `off()` must also be\ncalled on any child listeners to remove the callback.\n\nIf a callback is not specified, all callbacks for the specified eventType will be removed.\nSimilarly, if no eventType is specified, all callbacks for the `Reference` will be removed.\n\n#### Example\n\n```js\nconst ref = firebase.database().ref('settings');\nconst onValueChange = function(snapshot) { ... };\nconst onChildAdded = function(snapshot) { ... };\n\nref.on('value', onValueChange);\nref.child('meta-data').on('child_added', onChildAdded);\n// Sometime later...\nref.off('value', onValueChange);\nref.child('meta-data').off('child_added', onChildAdded);\n```\n"
									},
									"parameters": [
										{
											"id": 562,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks for the Reference will be removed."
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 563,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The callback function that was passed to `on()` or `undefined` to remove all callbacks."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 564,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The context that was passed to `on()`.\n"
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.off",
										"id": 704
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 565,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.off",
								"id": 704
							}
						},
						{
							"id": 565,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 566,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for data changes at a particular location.",
										"text": "This is the primary way to read data from a Database. Your callback will be triggered for the\ninitial data and again whenever the data changes. Use `off()` to stop receiving updates..\n\n**value** event\n\nThis event will trigger once with the initial data stored at this location, and then trigger\nagain each time the data changes. The `DataSnapshot` passed to the callback will be for the location\nat which on() was called. It won't trigger until the entire contents has been synchronized.\nIf the location has no data, it will be triggered with an empty `DataSnapshot`\n(`val()` will return `null`).\n\n**child_added** event\n\nThis event will be triggered once for each initial child at this location, and it will be\ntriggered again every time a new child is added. The `DataSnapshot` passed into the callback\nwill reflect the data for the relevant child. For ordering purposes, it is passed a second argument\nwhich is a string containing the key of the previous sibling child by sort order, or `null` if\nit is the first child.\n\n**child_removed** event\n\nThis event will be triggered once every time a child is removed. The `DataSnapshot` passed into\nthe callback will be the old data for the child that was removed. A child will get removed when either:\n- a client explicitly calls `remove()` on that child or one of its ancestors\n- a client calls `set(null)` on that child or one of its ancestors\n- that child has all of its children removed\n- there is a query in effect which now filters out the child (because it's sort order changed or the max limit was hit)\n\n**child_changed** event\n\nThis event will be triggered when the data stored in a child (or any of its descendants) changes.\nNote that a single `child_changed` event may represent multiple changes to the child. The\n`DataSnapshot` passed to the callback will contain the new child contents. For ordering purposes,\nthe callback is also passed a second argument which is a string containing the key of the previous\nsibling child by sort order, or `null` if it is the first child.\n\n**child_moved** event\n\nThis event will be triggered when a child's sort order changes such that its position relative\nto its siblings changes. The `DataSnapshot` passed to the callback will be for the data of the child\nthat has moved. It is also passed a second argument which is a string containing the key of the\nprevious sibling child by sort order, or `null` if it is the first child.\n"
									},
									"parameters": [
										{
											"id": 567,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\""
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 568,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot. For ordering purposes, \"child_added\", \"child_changed\", and \"child_moved\" will also be passed a string containing the key of the previous child, by sort order, or `null` if it is the first child."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 569,
											"name": "cancelCallbackOrContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 570,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If provided, this object will be used as `this` when calling your callback(s).\n\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Object"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.on",
										"id": 709
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 619,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.on",
								"id": 709
							}
						},
						{
							"id": 540,
							"name": "onDisconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 541,
									"name": "onDisconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an {@link database.OnDisconnect} instance.",
										"text": "#### Example\n\n```js\nconst userDisconnectRef = firebase.database().ref('users/ada/isOnline).onDisconnect();\n// When going offline\nawait userDisconnectRef.update(false);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "OnDisconnect",
										"id": 739
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 391,
									"character": 16
								}
							]
						},
						{
							"id": 571,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 572,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for exactly one event of the specified event type, and then stops listening.",
										"text": "This is equivalent to calling `on()`, and then calling `off()` inside the callback function. See `on()` for details on the event types.\n\n#### Example\n\n```js\n// Promise\nconst snapshot = await firebase.database().ref('users').once('value');\n// Callback\nfirebase.database().ref('users).once('value', (snapshot) => {\n  console.log(snapshot.val());\n});\n```\n"
									},
									"parameters": [
										{
											"id": 573,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\""
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 574,
											"name": "successCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot. For ordering purposes, \"child_added\", \"child_changed\", and \"child_moved\" will also be passed a string containing the key of the previous child by sort order, or `null` if it is the first child.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DataSnapshot",
												"id": 759
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.once",
										"id": 715
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 645,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.once",
								"id": 715
							}
						},
						{
							"id": 575,
							"name": "orderByChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 576,
									"name": "orderByChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by the specified child key.",
										"text": "Queries can only order by one key at a time. Calling `orderByChild()` multiple times on the same query is an error.\n\nFirebase queries allow you to order your data by any child key on the fly. However, if you know in advance what\nyour indexes will be, you can define them via the [.indexOn](https://firebase.google.com/docs/database/security/indexing-data?authuser=0)\nrule in your Security Rules for better performance.\n\nYou can read more about orderByChild() in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users').orderByChild('age').once('value');\nsnapshot.forEach((snapshot) => {\n console.log('Users age:', snapshot.val().age);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 577,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The child path node to order by.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByChild",
										"id": 719
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 669,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByChild",
								"id": 719
							}
						},
						{
							"id": 578,
							"name": "orderByKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 579,
									"name": "orderByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by key.",
										"text": "Sorts the results of a query by their (ascending) key values.\n\nYou can read more about `orderByKey()` in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users').orderByKey().once('value');\nsnapshot.forEach((snapshot) => {\n console.log('User:', snapshot.val());\n});\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByKey",
										"id": 722
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 687,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByKey",
								"id": 722
							}
						},
						{
							"id": 580,
							"name": "orderByPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 581,
									"name": "orderByPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new Query object ordered by priority.",
										"text": "Applications need not use priority but can order collections by ordinary properties\n(see [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data)\nfor alternatives to priority).\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByPriority",
										"id": 724
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 696,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByPriority",
								"id": 724
							}
						},
						{
							"id": 582,
							"name": "orderByValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 583,
									"name": "orderByValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by value.",
										"text": "If the children of a query are all scalar values (string, number, or boolean), you can order\nthe results by their (ascending) values.\n\nYou can read more about `orderByValue()` in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nawait firebase.database().ref('scores').orderByValue().once('value');\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByValue",
										"id": 726
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 712,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByValue",
								"id": 726
							}
						},
						{
							"id": 536,
							"name": "push",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 537,
									"name": "push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new child location using a unique key and returns its `Reference`.",
										"text": "This is the most common pattern for adding data to a collection of items.\n\nIf you provide a value to `push()`, the value will be written to the generated location.\nIf you don't pass a value, nothing will be written to the Database and the child will\nremain empty (but you can use the `Reference` elsewhere).\n\nThe unique key generated by push() are ordered by the current time, so the resulting list\nof items will be chronologically sorted. The keys are also designed to be unguessable\n(they contain 72 random bits of entropy).\n\n#### Example\n\n// TODO\n"
									},
									"parameters": [
										{
											"id": 538,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional value to be written at the generated location."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 539,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ThenableReference",
										"id": 595
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 378,
									"character": 8
								}
							]
						},
						{
							"id": 528,
							"name": "remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 529,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the data at this Database location.",
										"text": "Any data at child locations will also be deleted.\n\nThe effect of the remove will be visible immediately and the corresponding event 'value' will be triggered.\nSynchronization of the remove to the Firebase servers will also be started, and the returned Promise will\nresolve when complete. If provided, the onComplete callback will be called asynchronously after synchronization\nhas finished.\n\n#### Example\n\n```js\nawait firebase.database().ref('users/ada/name')\n .remove(() => {\n   console.log('Operation Complete');\n });\n```\n"
									},
									"parameters": [
										{
											"id": 530,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 311,
									"character": 10
								}
							]
						},
						{
							"id": 511,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 512,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes data to this Database location.",
										"text": "This will overwrite any data at this location and all child locations.\n\nThe effect of the write will be visible immediately, and the corresponding events\n(\"value\", \"child_added\", etc.) will be triggered. Synchronization of the data to the\nFirebase servers will also be started, and the returned Promise will resolve when\ncomplete. If provided, the `onComplete` callback will be called asynchronously after\nsynchronization has finished.\n\nPassing `null` for the new value is equivalent to calling `remove();` namely, all data at\nthis location and all child locations will be deleted.\n\n`set()` will remove any priority stored at this location, so if priority is meant to be\npreserved, you need to use `setWithPriority()` instead.\n\nNote that modifying data with set() will cancel any pending transactions at that location,\nso extreme care should be taken if mixing set() and transaction() to modify the same data.\n\nA single set() will generate a single \"value\" event at the location where the set() was performed.\n\n#### Example - Setting values\n\n```js\nconst ref = firebase.database().ref('users');\n\n// Set a single node value\nawait ref.child('ada/name/first').set('Ada');\nawait ref.child('ada/name/last').set('Lovelace');\n\n// Set an object value in a single call\nawait ref.child('ada/name').set({\n  first: 'Ada',\n  last: 'Lovelace',\n});\n```\n\n#### Example - On complete listener\n\n```js\nconst ref = firebase.database().ref('users');\n\nawait ref.child('ada/first/name').set('Ada', (error) => {\n  if (error) console.error(error);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 513,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to be written (string, number, boolean, object, array, or null)."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 514,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 205,
									"character": 7
								}
							]
						},
						{
							"id": 519,
							"name": "setPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 520,
									"name": "setPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a priority for the data at this Database location. Setting null removes any priority at this location.",
										"text": "See {@link database.Query#orderByPriority} to learn how to use priority values in your query.\n\n#### Example\n\n```js\nawait firebase.database().ref('users/ada').setPriority(1, (error) => {\n  if (error) console.error(error);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 521,
											"name": "priority",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The priority value."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 522,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 263,
									"character": 15
								}
							]
						},
						{
							"id": 523,
							"name": "setWithPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 524,
									"name": "setWithPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes data the Database location. Like `set()` but also specifies the priority for that data.",
										"text": "#### Example\n\n```js\nawait firebase.database().ref('users/ada/name')\n .setWithPriority({\n   first: 'Ada',\n   last: 'Lovelace',\n }, 1, (error) => {\n   if (error) console.error(error);\n });\n```\n"
									},
									"parameters": [
										{
											"id": 525,
											"name": "newVal",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new value to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 526,
											"name": "newPriority",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new priority to set."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 527,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 284,
									"character": 19
								}
							]
						},
						{
							"id": 584,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 585,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a `Query` with the specified starting point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe starting point is inclusive, so children with exactly the specified value will be included\nin the query. The optional key argument can be used to further limit the range of the query.\nIf it is specified, then children that have exactly the specified value must also have a key\nname greater than or equal to the specified key.\n\nYou can read more about `startAt()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nawait firebase.database().ref('users').orderByChild('age').startAt(21).once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 586,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to start at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 587,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to start at. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.startAt",
										"id": 728
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 736,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.startAt",
								"id": 728
							}
						},
						{
							"id": 588,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 589,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a JSON-serializable representation of this object."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.toJSON",
										"id": 732
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 741,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.toJSON",
								"id": 732
							}
						},
						{
							"id": 590,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 591,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the absolute URL for this location.",
										"text": "The `toString()` method returns a URL that is ready to be put into a browser, curl command, or\na `firebase.database().refFromURL()` call. Since all of those expect the URL to be url-encoded,\n`toString()` returns an encoded URL.\n\nAppend '.json' to the returned URL when typed into a browser to download JSON-formatted data.\nIf the location is secured (that is, not publicly readable), you will get a permission-denied error.\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref();\nconst ref2 = firebase.database().ref('users').orderByValue();\n\nref1.toString(); // https://sample-app.firebaseio.com/\nref2.toString(); // https://sample-app.firebaseio.com/users\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.toString",
										"id": 734
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 763,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.toString",
								"id": 734
							}
						},
						{
							"id": 531,
							"name": "transaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 532,
									"name": "transaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Atomically modifies the data at this location.",
										"text": "Atomically modify the data at this location. Unlike a normal `set()`, which just overwrites\nthe data regardless of its previous value, `transaction()` is used to modify the existing\nvalue to a new value, ensuring there are no conflicts with other clients writing to the same\nlocation at the same time.\n\nTo accomplish this, you pass `transaction()` an update function which is used to transform the\ncurrent value into a new value. If another client writes to the location before your new\nvalue is successfully written, your update function will be called again with the new\ncurrent value, and the write will be retried. This will happen repeatedly until your write\nsucceeds without conflict or you abort the transaction by not returning a value from your\nupdate function.\n\nNote: Modifying data with `set()` will cancel any pending transactions at that location, so\nextreme care should be taken if mixing `set()` and `transaction()` to update the same data.\n\nNote: When using transactions with Security and Firebase Rules in place, be aware that a\nclient needs `.read` access in addition to `.write` access in order to perform a transaction.\nThis is because the client-side nature of transactions requires the client to read the data\nin order to transactionally update it.\n\n#### Example\n\n```js\nconst userRef = firebase.database().ref('users/ada/profileViews);\n\nuserRef.transaction((currentViews) => {\n  if (currentViews === null) return 1;\n  return currentViews + 1;\n});\n```\n"
									},
									"parameters": [
										{
											"id": 533,
											"name": "transactionUpdate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A developer-supplied function which will be passed the current data stored at this location (as a JavaScript object). The function should return the new value it would like written (as a JavaScript object). If undefined is returned (i.e. you return with no arguments) the transaction will be aborted and the data at this location will not be modified."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 534,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback function that will be called when the transaction completes. The callback is passed three arguments: a possibly-null Error, a boolean indicating whether the transaction was committed, and a DataSnapshot indicating the final result. If the transaction failed abnormally, the first argument will be an Error object indicating the failure cause. If the transaction finished normally, but no data was committed because no data was returned from transactionUpdate, then second argument will be false. If the transaction completed and committed data to Firebase, the second argument will be true. Regardless, the third argument will be a DataSnapshot containing the resulting data in this location."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 535,
											"name": "applyLocally",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "By default, events are raised each time the transaction update function runs. So if it is run multiple times, you may see intermediate states. You can set this to false to suppress these intermediate states and instead wait until the transaction has completed before events are raised.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TransactionResult",
												"id": 502
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 352,
									"character": 15
								}
							]
						},
						{
							"id": 515,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 516,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes multiple values to the Database at once.",
										"text": "The `values` argument contains multiple property-value pairs that will be written to the Database\ntogether. Each child property can either be a simple property (for example, \"name\") or a\nrelative path (for example, \"name/first\") from the current location to the data to update.\n\nAs opposed to the `set()` method, `update()` can be use to selectively update only the referenced\nproperties at the current location (instead of replacing all the child properties at the\ncurrent location).\n\nThe effect of the write will be visible immediately, and the corresponding events ('value',\n'child_added', etc.) will be triggered. Synchronization of the data to the Firebase servers\nwill also be started, and the returned Promise will resolve when complete. If provided, the\n`onComplete` callback will be called asynchronously after synchronization has finished.\n\nA single update() will generate a single \"value\" event at the location where the update()\nwas performed, regardless of how many children were modified.\n\nNote that modifying data with update() will cancel any pending transactions at that location,\nso extreme care should be taken if mixing update() and transaction() to modify the same data.\n\nPassing `null` to `update()` will remove the data at this location.\n\n#### Example\n\nModify the 'first' and 'last' properties, but leave other values unchanged at this location.\n\n```js\nawait firebase.database().ref('users/ada/name').update({\n  first: 'Ada',\n  last: 'Lovelace',\n})\n```\n"
									},
									"parameters": [
										{
											"id": 517,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing multiple values."
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										},
										{
											"id": 518,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 245,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								506,
								542,
								507
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								508,
								543,
								547,
								551,
								592,
								554,
								557,
								560,
								565,
								540,
								571,
								575,
								578,
								580,
								582,
								536,
								528,
								511,
								519,
								523,
								584,
								588,
								590,
								531,
								515
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 112,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Query",
							"id": 685
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "ThenableReference",
							"id": 595
						}
					]
				},
				{
					"id": 498,
					"name": "ServerValue",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The ServerValue interface provides access to Firebase server values."
					},
					"children": [
						{
							"id": 499,
							"name": "TIMESTAMP",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A placeholder value for auto-populating the current timestamp (time since the Unix epoch,\nin milliseconds) as determined by the Firebase servers.",
								"text": "#### Example\n\n```js\nfirebase.database().ref('sessions').push({\n  startedAt: firebase.database.ServerValue.TIMESTAMP,\n});\n```\n"
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								499
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 62,
							"character": 30
						}
					]
				},
				{
					"id": 500,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Realtime Database statics.",
						"text": "#### Example\n\n```js\nfirebase.database;\n```\n"
					},
					"children": [
						{
							"id": 501,
							"name": "ServerValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns server specific values, such as the server timestamp.",
								"text": "#### Example\n\n```js\nfirebase.database.ServerValue;\n```\n"
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 97,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "ServerValue",
								"id": 498
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								501
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 87,
							"character": 26
						}
					]
				},
				{
					"id": 595,
					"name": "ThenableReference",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 596,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent location of a Reference. The parent of a root Reference is `null`.",
								"text": "#### Example\n\n```js\nfirebase.database().ref().parent; // null\nfirebase.database().ref('users/dave').parent; // 'users' reference\n```\n"
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 123,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Reference",
										"id": 505
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.parent",
								"id": 506
							}
						},
						{
							"id": 632,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a Reference to the Query's location."
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 410,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 505
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.ref",
								"id": 686
							}
						},
						{
							"id": 597,
							"name": "root",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The root Reference of the Database.",
								"text": "#### Example\n\n```js\nfirebase.database().ref().root; // '/' reference path\nfirebase.database().ref('users/ada').root; // '/' reference\n```\n"
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 135,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 505
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.root",
								"id": 507
							}
						},
						{
							"id": 598,
							"name": "child",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 599,
									"name": "child",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a Reference for the location at the specified relative path.",
										"text": "The relative path can either be a simple child name (for example, \"ada\") or a deeper\nslash-separated path (for example, \"ada/name/first\").\n\n#### Example\n\n```js\nconst usersRef = firebase.database().ref('users');\nconst adaRef = usersRef.child('ada/name/first'); // childRef path is 'users/ada/name/first'\n```\n"
									},
									"parameters": [
										{
											"id": 600,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A relative path from this location to the desired child location.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 505
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.child",
										"id": 508
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 152,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.child",
								"id": 508
							}
						},
						{
							"id": 633,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 634,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Query with the specified ending point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe ending point is inclusive, so children with exactly the specified value will be included\nin the query. The optional key argument can be used to further limit the range of the query.\nIf it is specified, then children that have exactly the specified value must also have a key\nname less than or equal to the specified key.\n\nYou can read more about endAt() in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst ref = firebase.database().ref(\"users\");\nconst snapshot = await ref.orderByKey().endAt('Ada Lovelace').once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 635,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to end at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 636,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to end at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.endAt",
										"id": 687
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 435,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.endAt",
								"id": 687
							}
						},
						{
							"id": 637,
							"name": "equalTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 638,
									"name": "equalTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Query with the specified ending point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe optional key argument can be used to further limit the range of the query. If it is\nspecified, then children that have exactly the specified value must also have exactly the\nspecified key as their key name. This can be used to filter result sets with many matches for the same value.\n\nYou can read more about equalTo() in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst ref = firebase.database().ref(\"users\");\nconst snapshot = await ref.orderByChild('age').equalTo(30).once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 639,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to match for. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 640,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to start at, among the children with the previously specified priority. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.equalTo",
										"id": 691
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 459,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.equalTo",
								"id": 691
							}
						},
						{
							"id": 641,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 642,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns whether or not the current and provided queries represent the same location, have the same query parameters.",
										"text": "Two Reference objects are equivalent if they represent the same location and are from the same instance of\n{@link app}.  Equivalent queries share the same sort order, limits, and starting and ending points.\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref('users').orderByKey().endAt('Ada Lovelace');\nconst ref2 = firebase.database().ref('users').orderByKey();\n\nconsole.log(ref1.isEqual(ref2)); // false\n```\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref('users').orderByKey().endAt('Ada Lovelace');\nconst ref2 = firebase.database().ref('users').endAt('Ada Lovelace').orderByKey();\n\nconsole.log(ref1.isEqual(ref2)); // true\n```\n"
									},
									"parameters": [
										{
											"id": 643,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The query to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "Query",
												"id": 685
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.isEqual",
										"id": 695
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 487,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.isEqual",
								"id": 695
							}
						},
						{
							"id": 682,
							"name": "keepSynced",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 683,
									"name": "keepSynced",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "By calling `keepSynced(true)` on a location, the data for that location will automatically\nbe downloaded and kept in sync, even when no listeners are attached for that location.",
										"text": "#### Example\n\n```js\nconst ref = firebase.database().ref('users');\nawait ref.keepSynced(true);\n```\n"
									},
									"parameters": [
										{
											"id": 684,
											"name": "bool",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Pass `true` to keep this location synchronized, pass `false` to stop synchronization.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.keepSynced",
										"id": 736
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 778,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.keepSynced",
								"id": 736
							}
						},
						{
							"id": 644,
							"name": "limitToFirst",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 645,
									"name": "limitToFirst",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` limited to the first specific number of children.",
										"text": "The `limitToFirst()` method is used to set a maximum number of children to be synced for a\ngiven callback. If we set a limit of 100, we will initially only receive up to 100 `child_added`\nevents. If we have fewer than 100 messages stored in our Database, a child_added event will\nfire for each message. However, if we have over 100 messages, we will only receive a `child_added`\nevent for the first 100 ordered messages. As items change, we will receive `child_removed` events\nfor each item that drops out of the active list so that the total number stays at 100.\n\nYou can read more about `limitToFirst()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst snapshot = firebase.database().ref('users').orderByKey().limitToFirst(2).once('value');\nconsole.log(snapshot.numChildren()); // 2\n```\n"
									},
									"parameters": [
										{
											"id": 646,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of nodes to include in this query.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.limitToFirst",
										"id": 698
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 510,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.limitToFirst",
								"id": 698
							}
						},
						{
							"id": 647,
							"name": "limitToLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 648,
									"name": "limitToLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object limited to the last specific number of children.",
										"text": "The `limitToLast()` method is used to set a maximum number of children to be synced for a given\ncallback. If we set a limit of 100, we will initially only receive up to 100 `child_added` events.\nIf we have fewer than 100 messages stored in our Database, a `child_added` event will fire for\neach message. However, if we have over 100 messages, we will only receive a `child_added` event\nfor the last 100 ordered messages. As items change, we will receive `child_removed` events for\neach item that drops out of the active list so that the total number stays at 100.\n\nYou can read more about `limitToLast()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nconst snapshot = firebase.database().ref('users').orderByKey().limitToLast(2).once('value');\nconsole.log(snapshot.numChildren()); // 2\n```\n"
									},
									"parameters": [
										{
											"id": 649,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of nodes to include in this query.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.limitToLast",
										"id": 701
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 533,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.limitToLast",
								"id": 701
							}
						},
						{
							"id": 650,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 651,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detaches a callback previously attached with `on()`.",
										"text": "Detach a callback previously attached with `on()`. Note that if `on()` was called multiple times\nwith the same eventType and callback, the callback will be called multiple times for each\nevent, and `off()` must be called multiple times to remove the callback. Calling `off()` on a parent\nlistener will not automatically remove listeners registered on child nodes, `off()` must also be\ncalled on any child listeners to remove the callback.\n\nIf a callback is not specified, all callbacks for the specified eventType will be removed.\nSimilarly, if no eventType is specified, all callbacks for the `Reference` will be removed.\n\n#### Example\n\n```js\nconst ref = firebase.database().ref('settings');\nconst onValueChange = function(snapshot) { ... };\nconst onChildAdded = function(snapshot) { ... };\n\nref.on('value', onValueChange);\nref.child('meta-data').on('child_added', onChildAdded);\n// Sometime later...\nref.off('value', onValueChange);\nref.child('meta-data').off('child_added', onChildAdded);\n```\n"
									},
									"parameters": [
										{
											"id": 652,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks for the Reference will be removed."
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 653,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The callback function that was passed to `on()` or `undefined` to remove all callbacks."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 654,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The context that was passed to `on()`.\n"
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.off",
										"id": 704
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 565,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.off",
								"id": 704
							}
						},
						{
							"id": 655,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 656,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for data changes at a particular location.",
										"text": "This is the primary way to read data from a Database. Your callback will be triggered for the\ninitial data and again whenever the data changes. Use `off()` to stop receiving updates..\n\n**value** event\n\nThis event will trigger once with the initial data stored at this location, and then trigger\nagain each time the data changes. The `DataSnapshot` passed to the callback will be for the location\nat which on() was called. It won't trigger until the entire contents has been synchronized.\nIf the location has no data, it will be triggered with an empty `DataSnapshot`\n(`val()` will return `null`).\n\n**child_added** event\n\nThis event will be triggered once for each initial child at this location, and it will be\ntriggered again every time a new child is added. The `DataSnapshot` passed into the callback\nwill reflect the data for the relevant child. For ordering purposes, it is passed a second argument\nwhich is a string containing the key of the previous sibling child by sort order, or `null` if\nit is the first child.\n\n**child_removed** event\n\nThis event will be triggered once every time a child is removed. The `DataSnapshot` passed into\nthe callback will be the old data for the child that was removed. A child will get removed when either:\n- a client explicitly calls `remove()` on that child or one of its ancestors\n- a client calls `set(null)` on that child or one of its ancestors\n- that child has all of its children removed\n- there is a query in effect which now filters out the child (because it's sort order changed or the max limit was hit)\n\n**child_changed** event\n\nThis event will be triggered when the data stored in a child (or any of its descendants) changes.\nNote that a single `child_changed` event may represent multiple changes to the child. The\n`DataSnapshot` passed to the callback will contain the new child contents. For ordering purposes,\nthe callback is also passed a second argument which is a string containing the key of the previous\nsibling child by sort order, or `null` if it is the first child.\n\n**child_moved** event\n\nThis event will be triggered when a child's sort order changes such that its position relative\nto its siblings changes. The `DataSnapshot` passed to the callback will be for the data of the child\nthat has moved. It is also passed a second argument which is a string containing the key of the\nprevious sibling child by sort order, or `null` if it is the first child.\n"
									},
									"parameters": [
										{
											"id": 657,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\""
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 658,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot. For ordering purposes, \"child_added\", \"child_changed\", and \"child_moved\" will also be passed a string containing the key of the previous child, by sort order, or `null` if it is the first child."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 659,
											"name": "cancelCallbackOrContext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional callback that will be notified if your event subscription is ever canceled because your client does not have permission to read this data (or it had permission but has now lost it). This callback will be passed an `Error` object indicating why the failure occurred."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										},
										{
											"id": 660,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If provided, this object will be used as `this` when calling your callback(s).\n\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Object"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.on",
										"id": 709
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 619,
									"character": 6
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.on",
								"id": 709
							}
						},
						{
							"id": 630,
							"name": "onDisconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 631,
									"name": "onDisconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an {@link database.OnDisconnect} instance.",
										"text": "#### Example\n\n```js\nconst userDisconnectRef = firebase.database().ref('users/ada/isOnline).onDisconnect();\n// When going offline\nawait userDisconnectRef.update(false);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "OnDisconnect",
										"id": 739
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.onDisconnect",
										"id": 540
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 391,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.onDisconnect",
								"id": 540
							}
						},
						{
							"id": 661,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 662,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for exactly one event of the specified event type, and then stops listening.",
										"text": "This is equivalent to calling `on()`, and then calling `off()` inside the callback function. See `on()` for details on the event types.\n\n#### Example\n\n```js\n// Promise\nconst snapshot = await firebase.database().ref('users').once('value');\n// Callback\nfirebase.database().ref('users).once('value', (snapshot) => {\n  console.log(snapshot.val());\n});\n```\n"
									},
									"parameters": [
										{
											"id": 663,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "One of the following strings: \"value\", \"child_added\", \"child_changed\", \"child_removed\", or \"child_moved.\""
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 808
											}
										},
										{
											"id": 664,
											"name": "successCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback that fires when the specified event occurs. The callback will be passed a DataSnapshot. For ordering purposes, \"child_added\", \"child_changed\", and \"child_moved\" will also be passed a string containing the key of the previous child by sort order, or `null` if it is the first child.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DataSnapshot",
												"id": 759
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.once",
										"id": 715
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 645,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.once",
								"id": 715
							}
						},
						{
							"id": 665,
							"name": "orderByChild",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 666,
									"name": "orderByChild",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by the specified child key.",
										"text": "Queries can only order by one key at a time. Calling `orderByChild()` multiple times on the same query is an error.\n\nFirebase queries allow you to order your data by any child key on the fly. However, if you know in advance what\nyour indexes will be, you can define them via the [.indexOn](https://firebase.google.com/docs/database/security/indexing-data?authuser=0)\nrule in your Security Rules for better performance.\n\nYou can read more about orderByChild() in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users').orderByChild('age').once('value');\nsnapshot.forEach((snapshot) => {\n console.log('Users age:', snapshot.val().age);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 667,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The child path node to order by.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByChild",
										"id": 719
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 669,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByChild",
								"id": 719
							}
						},
						{
							"id": 668,
							"name": "orderByKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 669,
									"name": "orderByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by key.",
										"text": "Sorts the results of a query by their (ascending) key values.\n\nYou can read more about `orderByKey()` in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nconst snapshot = await firebase.database().ref('users').orderByKey().once('value');\nsnapshot.forEach((snapshot) => {\n console.log('User:', snapshot.val());\n});\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByKey",
										"id": 722
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 687,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByKey",
								"id": 722
							}
						},
						{
							"id": 670,
							"name": "orderByPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 671,
									"name": "orderByPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new Query object ordered by priority.",
										"text": "Applications need not use priority but can order collections by ordinary properties\n(see [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data)\nfor alternatives to priority).\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByPriority",
										"id": 724
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 696,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByPriority",
								"id": 724
							}
						},
						{
							"id": 672,
							"name": "orderByValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 673,
									"name": "orderByValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new `Query` object ordered by value.",
										"text": "If the children of a query are all scalar values (string, number, or boolean), you can order\nthe results by their (ascending) values.\n\nYou can read more about `orderByValue()` in [Sort data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#sort_data).\n\n#### Example\n\n```js\nawait firebase.database().ref('scores').orderByValue().once('value');\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderByValue",
										"id": 726
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 712,
									"character": 16
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderByValue",
								"id": 726
							}
						},
						{
							"id": 626,
							"name": "push",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 627,
									"name": "push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a new child location using a unique key and returns its `Reference`.",
										"text": "This is the most common pattern for adding data to a collection of items.\n\nIf you provide a value to `push()`, the value will be written to the generated location.\nIf you don't pass a value, nothing will be written to the Database and the child will\nremain empty (but you can use the `Reference` elsewhere).\n\nThe unique key generated by push() are ordered by the current time, so the resulting list\nof items will be chronologically sorted. The keys are also designed to be unguessable\n(they contain 72 random bits of entropy).\n\n#### Example\n\n// TODO\n"
									},
									"parameters": [
										{
											"id": 628,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional value to be written at the generated location."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 629,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ThenableReference",
										"id": 595
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.push",
										"id": 536
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 378,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.push",
								"id": 536
							}
						},
						{
							"id": 618,
							"name": "remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 619,
									"name": "remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes the data at this Database location.",
										"text": "Any data at child locations will also be deleted.\n\nThe effect of the remove will be visible immediately and the corresponding event 'value' will be triggered.\nSynchronization of the remove to the Firebase servers will also be started, and the returned Promise will\nresolve when complete. If provided, the onComplete callback will be called asynchronously after synchronization\nhas finished.\n\n#### Example\n\n```js\nawait firebase.database().ref('users/ada/name')\n .remove(() => {\n   console.log('Operation Complete');\n });\n```\n"
									},
									"parameters": [
										{
											"id": 620,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.remove",
										"id": 528
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 311,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.remove",
								"id": 528
							}
						},
						{
							"id": 601,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 602,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes data to this Database location.",
										"text": "This will overwrite any data at this location and all child locations.\n\nThe effect of the write will be visible immediately, and the corresponding events\n(\"value\", \"child_added\", etc.) will be triggered. Synchronization of the data to the\nFirebase servers will also be started, and the returned Promise will resolve when\ncomplete. If provided, the `onComplete` callback will be called asynchronously after\nsynchronization has finished.\n\nPassing `null` for the new value is equivalent to calling `remove();` namely, all data at\nthis location and all child locations will be deleted.\n\n`set()` will remove any priority stored at this location, so if priority is meant to be\npreserved, you need to use `setWithPriority()` instead.\n\nNote that modifying data with set() will cancel any pending transactions at that location,\nso extreme care should be taken if mixing set() and transaction() to modify the same data.\n\nA single set() will generate a single \"value\" event at the location where the set() was performed.\n\n#### Example - Setting values\n\n```js\nconst ref = firebase.database().ref('users');\n\n// Set a single node value\nawait ref.child('ada/name/first').set('Ada');\nawait ref.child('ada/name/last').set('Lovelace');\n\n// Set an object value in a single call\nawait ref.child('ada/name').set({\n  first: 'Ada',\n  last: 'Lovelace',\n});\n```\n\n#### Example - On complete listener\n\n```js\nconst ref = firebase.database().ref('users');\n\nawait ref.child('ada/first/name').set('Ada', (error) => {\n  if (error) console.error(error);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 603,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to be written (string, number, boolean, object, array, or null)."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 604,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.set",
										"id": 511
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 205,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.set",
								"id": 511
							}
						},
						{
							"id": 609,
							"name": "setPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 610,
									"name": "setPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a priority for the data at this Database location. Setting null removes any priority at this location.",
										"text": "See {@link database.Query#orderByPriority} to learn how to use priority values in your query.\n\n#### Example\n\n```js\nawait firebase.database().ref('users/ada').setPriority(1, (error) => {\n  if (error) console.error(error);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 611,
											"name": "priority",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The priority value."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 612,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.setPriority",
										"id": 519
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 263,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.setPriority",
								"id": 519
							}
						},
						{
							"id": 613,
							"name": "setWithPriority",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 614,
									"name": "setWithPriority",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes data the Database location. Like `set()` but also specifies the priority for that data.",
										"text": "#### Example\n\n```js\nawait firebase.database().ref('users/ada/name')\n .setWithPriority({\n   first: 'Ada',\n   last: 'Lovelace',\n }, 1, (error) => {\n   if (error) console.error(error);\n });\n```\n"
									},
									"parameters": [
										{
											"id": 615,
											"name": "newVal",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new value to set."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 616,
											"name": "newPriority",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new priority to set."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 617,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.setWithPriority",
										"id": 523
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 284,
									"character": 19
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.setWithPriority",
								"id": 523
							}
						},
						{
							"id": 674,
							"name": "startAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 675,
									"name": "startAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a `Query` with the specified starting point.",
										"text": "Using `startAt()`, `endAt()`, and `equalTo()` allows you to choose arbitrary starting and\nending points for your queries.\n\nThe starting point is inclusive, so children with exactly the specified value will be included\nin the query. The optional key argument can be used to further limit the range of the query.\nIf it is specified, then children that have exactly the specified value must also have a key\nname greater than or equal to the specified key.\n\nYou can read more about `startAt()` in [Filtering data](https://firebase.google.com/docs/database/web/lists-of-data?authuser=0#filtering_data).\n\n#### Example\n\n```js\nawait firebase.database().ref('users').orderByChild('age').startAt(21).once('value');\n```\n"
									},
									"parameters": [
										{
											"id": 676,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to start at. The argument type depends on which `orderBy*()` function was used in this query. Specify a value that matches the `orderBy*()` type. When used in combination with `orderByKey()`, the value must be a string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 677,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The child key to start at. This argument is only allowed if ordering by child, value, or priority.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 685
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.startAt",
										"id": 728
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 736,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.startAt",
								"id": 728
							}
						},
						{
							"id": 678,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 679,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a JSON-serializable representation of this object."
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.toJSON",
										"id": 732
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 741,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.toJSON",
								"id": 732
							}
						},
						{
							"id": 680,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 681,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the absolute URL for this location.",
										"text": "The `toString()` method returns a URL that is ready to be put into a browser, curl command, or\na `firebase.database().refFromURL()` call. Since all of those expect the URL to be url-encoded,\n`toString()` returns an encoded URL.\n\nAppend '.json' to the returned URL when typed into a browser to download JSON-formatted data.\nIf the location is secured (that is, not publicly readable), you will get a permission-denied error.\n\n#### Example\n\n```js\nconst ref1 = firebase.database().ref();\nconst ref2 = firebase.database().ref('users').orderByValue();\n\nref1.toString(); // https://sample-app.firebaseio.com/\nref2.toString(); // https://sample-app.firebaseio.com/users\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.toString",
										"id": 734
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 763,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.toString",
								"id": 734
							}
						},
						{
							"id": 621,
							"name": "transaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 622,
									"name": "transaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Atomically modifies the data at this location.",
										"text": "Atomically modify the data at this location. Unlike a normal `set()`, which just overwrites\nthe data regardless of its previous value, `transaction()` is used to modify the existing\nvalue to a new value, ensuring there are no conflicts with other clients writing to the same\nlocation at the same time.\n\nTo accomplish this, you pass `transaction()` an update function which is used to transform the\ncurrent value into a new value. If another client writes to the location before your new\nvalue is successfully written, your update function will be called again with the new\ncurrent value, and the write will be retried. This will happen repeatedly until your write\nsucceeds without conflict or you abort the transaction by not returning a value from your\nupdate function.\n\nNote: Modifying data with `set()` will cancel any pending transactions at that location, so\nextreme care should be taken if mixing `set()` and `transaction()` to update the same data.\n\nNote: When using transactions with Security and Firebase Rules in place, be aware that a\nclient needs `.read` access in addition to `.write` access in order to perform a transaction.\nThis is because the client-side nature of transactions requires the client to read the data\nin order to transactionally update it.\n\n#### Example\n\n```js\nconst userRef = firebase.database().ref('users/ada/profileViews);\n\nuserRef.transaction((currentViews) => {\n  if (currentViews === null) return 1;\n  return currentViews + 1;\n});\n```\n"
									},
									"parameters": [
										{
											"id": 623,
											"name": "transactionUpdate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A developer-supplied function which will be passed the current data stored at this location (as a JavaScript object). The function should return the new value it would like written (as a JavaScript object). If undefined is returned (i.e. you return with no arguments) the transaction will be aborted and the data at this location will not be modified."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 624,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback function that will be called when the transaction completes. The callback is passed three arguments: a possibly-null Error, a boolean indicating whether the transaction was committed, and a DataSnapshot indicating the final result. If the transaction failed abnormally, the first argument will be an Error object indicating the failure cause. If the transaction finished normally, but no data was committed because no data was returned from transactionUpdate, then second argument will be false. If the transaction completed and committed data to Firebase, the second argument will be true. Regardless, the third argument will be a DataSnapshot containing the resulting data in this location."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 625,
											"name": "applyLocally",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "By default, events are raised each time the transaction update function runs. So if it is run multiple times, you may see intermediate states. You can set this to false to suppress these intermediate states and instead wait until the transaction has completed before events are raised.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TransactionResult",
												"id": 502
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.transaction",
										"id": 531
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 352,
									"character": 15
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.transaction",
								"id": 531
							}
						},
						{
							"id": 605,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 606,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes multiple values to the Database at once.",
										"text": "The `values` argument contains multiple property-value pairs that will be written to the Database\ntogether. Each child property can either be a simple property (for example, \"name\") or a\nrelative path (for example, \"name/first\") from the current location to the data to update.\n\nAs opposed to the `set()` method, `update()` can be use to selectively update only the referenced\nproperties at the current location (instead of replacing all the child properties at the\ncurrent location).\n\nThe effect of the write will be visible immediately, and the corresponding events ('value',\n'child_added', etc.) will be triggered. Synchronization of the data to the Firebase servers\nwill also be started, and the returned Promise will resolve when complete. If provided, the\n`onComplete` callback will be called asynchronously after synchronization has finished.\n\nA single update() will generate a single \"value\" event at the location where the update()\nwas performed, regardless of how many children were modified.\n\nNote that modifying data with update() will cancel any pending transactions at that location,\nso extreme care should be taken if mixing update() and transaction() to modify the same data.\n\nPassing `null` to `update()` will remove the data at this location.\n\n#### Example\n\nModify the 'first' and 'last' properties, but leave other values unchanged at this location.\n\n```js\nawait firebase.database().ref('users/ada/name').update({\n  first: 'Ada',\n  last: 'Lovelace',\n})\n```\n"
									},
									"parameters": [
										{
											"id": 607,
											"name": "values",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing multiple values."
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										},
										{
											"id": 608,
											"name": "onComplete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Callback called when write to server is complete. Contains the parameters (Error | null).\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Reference.update",
										"id": 515
									}
								}
							],
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 245,
									"character": 10
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Reference.update",
								"id": 515
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								596,
								632,
								597
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								598,
								633,
								637,
								641,
								682,
								644,
								647,
								650,
								655,
								630,
								661,
								665,
								668,
								670,
								672,
								626,
								618,
								601,
								609,
								613,
								674,
								678,
								680,
								621,
								605
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 394,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Reference",
							"id": 505
						}
					]
				},
				{
					"id": 502,
					"name": "TransactionResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 503,
							"name": "committed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 101,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 504,
							"name": "snapshot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "database/lib/index.d.ts",
									"line": 102,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "DataSnapshot",
								"id": 759
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								503,
								504
							]
						}
					],
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 100,
							"character": 36
						}
					]
				},
				{
					"id": 808,
					"name": "EventType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "database/lib/index.d.ts",
							"line": 887,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "value"
							},
							{
								"type": "stringLiteral",
								"value": "child_added"
							},
							{
								"type": "stringLiteral",
								"value": "child_changed"
							},
							{
								"type": "stringLiteral",
								"value": "child_moved"
							},
							{
								"type": "stringLiteral",
								"value": "child_removed"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						785
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						759,
						739,
						685,
						505,
						498,
						500,
						595,
						502
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						808
					]
				}
			],
			"sources": [
				{
					"fileName": "database/lib/index.d.ts",
					"line": 56,
					"character": 25
				}
			]
		},
		{
			"id": 818,
			"name": "Fiam",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase In-App Messaging package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `fiam` package:\n\n```js\nimport { firebase } from '@react-native-firebase/fiam';\n\n// firebase.fiam().X\n```\n\n#### Example 2\n\nUsing the default export from the `fiam` package:\n\n```js\nimport fiam from '@react-native-firebase/fiam';\n\n// fiam().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/fiam';\n\n// firebase.fiam().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "fiam\n"
					}
				]
			},
			"children": [
				{
					"id": 820,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase In-App Messaging service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the  In-App Messaging service for the default app:\n\n```js\nconst defaultAppFiam = firebase.fiam();\n```\n"
					},
					"children": [
						{
							"id": 829,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 825,
							"name": "isAutomaticDataCollectionEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Determines whether automatic data collection is enabled or not.",
								"text": "#### Example\n\n```js\nconst isDataCollectionEnabled = firebase.fiam().isAutomaticDataCollectionEnabled;\n```\n"
							},
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 112,
									"character": 36
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 821,
							"name": "isMessagesDisplaySuppressed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Determines whether messages are suppressed or not.",
								"text": "#### Example\n\n```js\nconst isSuppressed = firebase.fiam().isMessagesDisplaySuppressed;\n```\n"
							},
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 84,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 826,
							"name": "setAutomaticDataCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 827,
									"name": "setAutomaticDataCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enable or disable automatic data collection for Firebase In-App Messaging.",
										"text": "When enabled, generates a registration token on app startup if there is no valid one and generates a new token\nwhen it is deleted (which prevents deleteInstanceId() from stopping the periodic sending of data).\n\nThis setting is persisted across app restarts and overrides the setting specified in your manifest/plist file.\n\n#### Example\n\n```js\n// Disable data collection\nfirebase.fiam().setAutomaticDataCollectionEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 828,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Whether automatic data collection is enabled.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 131,
									"character": 37
								}
							]
						},
						{
							"id": 822,
							"name": "setMessagesDisplaySuppressed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 823,
									"name": "setMessagesDisplaySuppressed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enable or disable suppression of Firebase In App Messaging messages.",
										"text": "When enabled, no in app messages will be rendered until either you disable suppression, or the app restarts.\nThis state is not persisted between app restarts.\n\n#### Example\n\n```js\n// Suppress messages\nawait firebase.fiam().setMessagesDisplaySuppressed(true);\n```\n"
									},
									"parameters": [
										{
											"id": 824,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Whether messages should be suppressed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "fiam/lib/index.d.ts",
									"line": 101,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								829,
								825,
								821
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								826,
								822
							]
						}
					],
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 74,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 819,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "fiam/lib/index.d.ts",
							"line": 59,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						820
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						819
					]
				}
			],
			"sources": [
				{
					"fileName": "fiam/lib/index.d.ts",
					"line": 56,
					"character": 21
				}
			]
		},
		{
			"id": 838,
			"name": "Firestore",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Cloud Firestore package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `firestore` package:\n\n```js\nimport { firebase } from '@react-native-firebase/firestore';\n\n// firebase.firestore().X\n```\n\n#### Example 2\n\nUsing the default export from the `firestore` package:\n\n```js\nimport firestore from '@react-native-firebase/firestore';\n\n// firestore().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/firestore';\n\n// firebase.firestore().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "firestore\n"
					}
				]
			},
			"children": [
				{
					"id": 839,
					"name": "Blob",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An immutable object representing an array of bytes."
					},
					"children": [
						{
							"id": 846,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 847,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `Blob` is equal to the provided one."
									},
									"parameters": [
										{
											"id": 848,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `Blob` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "Blob",
												"id": 839
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 82,
									"character": 11
								}
							]
						},
						{
							"id": 849,
							"name": "toBase64",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 850,
									"name": "toBase64",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the bytes of a Blob as a Base64-encoded string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 87,
									"character": 12
								}
							]
						},
						{
							"id": 851,
							"name": "toUint8Array",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 852,
									"name": "toUint8Array",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the bytes of a Blob in a new Uint8Array."
									},
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 92,
									"character": 16
								}
							]
						},
						{
							"id": 840,
							"name": "fromBase64String",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 841,
									"name": "fromBase64String",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new Blob from the given Base64 string, converting it to bytes."
									},
									"parameters": [
										{
											"id": 842,
											"name": "base64",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The Base64 string used to create the Blob object.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Blob",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 68,
									"character": 27
								}
							]
						},
						{
							"id": 843,
							"name": "fromUint8Array",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 844,
									"name": "fromUint8Array",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new Blob from the given Uint8Array."
									},
									"parameters": [
										{
											"id": 845,
											"name": "array",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The Uint8Array used to create the Blob object.\n"
											},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Blob",
										"id": 839
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 75,
									"character": 25
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								846,
								849,
								851,
								840,
								843
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 62,
							"character": 19
						}
					]
				},
				{
					"id": 961,
					"name": "FieldPath",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A FieldPath refers to a field in a document. The path may consist of a single field name (referring to a\ntop-level field in the document), or a list of field names (referring to a nested field in the document).",
						"text": "Create a FieldPath by providing field names. If more than one field name is provided, the path will point to a nested field in a document.\n\n#### Example\n\n```js\nconst user = await firebase.firestore().doc('users/alovelace').get();\n\n// Create a new field path\nconst fieldPath = new firebase.firestore.FieldPath('address', 'zip');\n\nconsole.log('Address ZIP Code', user.get(fieldPath));\n```\n"
					},
					"children": [
						{
							"id": 964,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a FieldPath from the provided field names. If more than one field name is provided, the path will point to a nested field in a document.",
								"text": "#### Example\n\n```js\nconst fieldPath = new firebase.firestore.FieldPath('address', line', 'one');\n```\n"
							},
							"signatures": [
								{
									"id": 965,
									"name": "new FieldPath",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a FieldPath from the provided field names. If more than one field name is provided, the path will point to a nested field in a document.",
										"text": "#### Example\n\n```js\nconst fieldPath = new firebase.firestore.FieldPath('address', line', 'one');\n```\n"
									},
									"parameters": [
										{
											"id": 966,
											"name": "fieldNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"shortText": "A list of field names.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FieldPath",
										"id": 961
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 534,
									"character": 35
								}
							]
						},
						{
							"id": 967,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 968,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `FieldPath` is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst fieldPath1 = new firebase.firestore.FieldPath('address', 'zip');\nconst fieldPath2 = new firebase.firestore.FieldPath('address', line', 'one');\n\n// false\nfieldPath1.isEqual(fieldPath2);\n```\n"
									},
									"parameters": [
										{
											"id": 969,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `FieldPath` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "FieldPath",
												"id": 961
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 564,
									"character": 11
								}
							]
						},
						{
							"id": 962,
							"name": "documentId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 963,
									"name": "documentId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a special sentinel FieldPath to refer to the ID of a document. It can be used in queries to sort or filter by the document ID."
									},
									"type": {
										"type": "reference",
										"name": "FieldPath",
										"id": 961
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 534,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								964
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								967,
								962
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 530,
							"character": 24
						}
					]
				},
				{
					"id": 970,
					"name": "FieldValue",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sentinel values that can be used when writing document fields with `set()` or `update()`.",
						"text": "#### Example\n\n```js\nconst increment = firebase.firestore.FieldValue.increment(1);\n\nawait firebase.firestore().doc('users/alovelace).update({\n  age: increment, // increment age by 1\n});\n```\n"
					},
					"children": [
						{
							"id": 984,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 985,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this FieldValue is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst increment = firebase.firestore.FieldValue.increment(1);\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp();\n\n// false\nincrement.isEqual(timestamp);\n```\n"
									},
									"parameters": [
										{
											"id": 986,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The FieldValue to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "FieldValue",
												"id": 970
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 694,
									"character": 11
								}
							]
						},
						{
							"id": 971,
							"name": "arrayRemove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 972,
									"name": "arrayRemove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a special value that can be used with `set()` or `update()` that tells the server to remove the given elements\nfrom any array value that already exists on the server. All instances of each element specified will be removed from\nthe array. If the field being modified is not already an array it will be overwritten with an empty array.",
										"text": "#### Example\n\n```js\nconst arrayRemove = firebase.firestore.FieldValue.arrayRemove(2, '3');\n\n// Removes the values 2 & '3' from the values array on the document\nawait docRef.update({\n  values: arrayRemove,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 973,
											"name": "elements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "The elements to remove from the array.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FieldValue",
										"id": 970
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 599,
									"character": 22
								}
							]
						},
						{
							"id": 974,
							"name": "arrayUnion",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 975,
									"name": "arrayUnion",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a special value that can be used with `set()` or `update()` that tells the server to union the given\nelements with any array value that already exists on the server. Each specified element that doesn't already exist\nin the array will be added to the end. If the field being modified is not already an array it will be overwritten\nwith an array containing exactly the specified elements.",
										"text": "#### Example\n\n```js\nconst arrayUnion = firebase.firestore.FieldValue.arrayUnion(2, '3');\n\n// Appends the values 2 & '3' onto the values array on the document\nawait docRef.update({\n  values: arrayUnion,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 976,
											"name": "elements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "The elements to union into the array.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FieldValue",
										"id": 970
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 620,
									"character": 21
								}
							]
						},
						{
							"id": 977,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 978,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a sentinel for use with update() to mark a field for deletion.",
										"text": "#### Example\n\n```js\nconst delete = firebase.firestore.FieldValue.delete();\n\n// Deletes the name field on the document\nawait docRef.update({\n  name: delete,\n});\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "FieldValue",
										"id": 970
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 636,
									"character": 17
								}
							]
						},
						{
							"id": 979,
							"name": "increment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 980,
									"name": "increment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a special value that can be used with `set()` or `update()` that tells the server to increment the field's current value by the given value.",
										"text": "If either the operand or the current field value uses floating point precision, all arithmetic follows IEEE 754 semantics.\nIf both values are integers, values outside of JavaScript's safe number range (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`)\nare also subject to precision loss. Furthermore, once processed by the Firestore backend, all integer operations are\ncapped between -2^63 and 2^63-1.\n\nIf the current field value is not of type `number`, or if the field does not yet exist, the transformation sets the field to the given value.\n\n#### Example\n\n```js\nconst increment = firebase.firestore.FieldValue.increment(1);\n\n// Increment the loginCount field by 1 on the document\nawait docRef.update({\n  loginCount: increment,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 981,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to increment by.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FieldValue",
										"id": 970
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 661,
									"character": 20
								}
							]
						},
						{
							"id": 982,
							"name": "serverTimestamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 983,
									"name": "serverTimestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a sentinel used with set() or update() to include a server-generated timestamp in the written data.",
										"text": "#### Example\n\n```js\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp();\n\n// Set the updatedAt field to the current server time\nawait docRef.update({\n  updatedAt: timestamp,\n});\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "FieldValue",
										"id": 970
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 677,
									"character": 26
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								984,
								971,
								974,
								977,
								979,
								982
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 580,
							"character": 25
						}
					]
				},
				{
					"id": 987,
					"name": "GeoPoint",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An immutable object representing a geo point in Firestore. The geo point is represented as latitude/longitude pair.",
						"text": "Latitude values are in the range of [-90, 90]. Longitude values are in the range of [-180, 180].\n"
					},
					"children": [
						{
							"id": 988,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new immutable GeoPoint object with the provided latitude and longitude values.",
								"text": "#### Example\n\n```js\nconst geoPoint = new firebase.firestore.GeoPoint(60, -40);\n```\n"
							},
							"signatures": [
								{
									"id": 989,
									"name": "new GeoPoint",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new immutable GeoPoint object with the provided latitude and longitude values.",
										"text": "#### Example\n\n```js\nconst geoPoint = new firebase.firestore.GeoPoint(60, -40);\n```\n"
									},
									"parameters": [
										{
											"id": 990,
											"name": "latitude",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The latitude as number between -90 and 90."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 991,
											"name": "longitude",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The longitude as number between -180 and 180.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "GeoPoint",
										"id": 987
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 702,
									"character": 25
								}
							]
						},
						{
							"id": 992,
							"name": "latitude",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The latitude of this `GeoPoint` instance."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 720,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 993,
							"name": "longitude",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The longitude of this `GeoPoint` instance."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 725,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 994,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 995,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `GeoPoint` is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst geoPoint1 = new firebase.firestore.GeoPoint(60, -40);\nconst geoPoint2 = new firebase.firestore.GeoPoint(60, -20);\n\n// false\ngeoPoint1.isEqual(geoPoint2);\n```\n"
									},
									"parameters": [
										{
											"id": 996,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `GeoPoint` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "GeoPoint",
												"id": 987
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 742,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								988
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								992,
								993
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								994
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 702,
							"character": 23
						}
					]
				},
				{
					"id": 1147,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Cloud Firestore service is available for the default app or a given app.",
						"text": "#### Example 1\n\nGet the firestore instance for the **default app**:\n\n```js\nconst firestoreForDefaultApp = firebase.firestore();\n```\n\n#### Example 2\n\nGet the firestore instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst firestoreForOtherApp = firebase.firestore(otherApp);\n```\n\n"
					},
					"children": [
						{
							"id": 1172,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1148,
							"name": "batch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1149,
									"name": "batch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a write batch, used for performing multiple writes as a single atomic operation.\nThe maximum number of writes allowed in a single WriteBatch is 500, but note that each usage\nof `FieldValue.serverTimestamp()`, `FieldValue.arrayUnion()`, `FieldValue.arrayRemove()`, or `FieldValue.increment()`\ninside a WriteBatch counts as an additional write.",
										"text": "#### Example\n\n```js\nconst batch = firebase.firestore().batch();\nbatch.delete(...);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "WriteBatch",
										"id": 1117
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1644,
									"character": 9
								}
							]
						},
						{
							"id": 1150,
							"name": "collection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1151,
									"name": "collection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a `CollectionReference` instance that refers to the collection at the specified path.",
										"text": "#### Example\n\n```js\nconst collectionReference = firebase.firestore().collection('users');\n```\n"
									},
									"parameters": [
										{
											"id": 1152,
											"name": "collectionPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A slash-separated path to a collection.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CollectionReference",
										"id": 853
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1657,
									"character": 14
								}
							]
						},
						{
							"id": 1153,
							"name": "collectionGroup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1154,
									"name": "collectionGroup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that includes all documents in the database that are contained\nin a collection or subcollection with the given collectionId.",
										"text": "#### Example\n\n```js\nconst collectionGroup = firebase.firestore().collection('orders');\n```\n"
									},
									"parameters": [
										{
											"id": 1155,
											"name": "collectionId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifies the collections to query over. Every collection or subcollection with this ID as the last segment of its path will be included. Cannot contain a slash.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1671,
									"character": 19
								}
							]
						},
						{
							"id": 1156,
							"name": "disableNetwork",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1157,
									"name": "disableNetwork",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disables network usage for this instance. It can be re-enabled via `enableNetwork()`. While the\nnetwork is disabled, any snapshot listeners or get() calls will return results from cache, and any\nwrite operations will be queued until the network is restored.",
										"text": "Returns a promise that is resolved once the network has been disabled.\n\n#### Example\n\n```js\nawait firebase.firestore().disableNetwork();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1686,
									"character": 18
								}
							]
						},
						{
							"id": 1158,
							"name": "doc",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1159,
									"name": "doc",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a `DocumentReference` instance that refers to the document at the specified path.",
										"text": "#### Example\n\n```js\nconst documentReference = firebase.firestore().doc('users/alovelace');\n```\n"
									},
									"parameters": [
										{
											"id": 1160,
											"name": "documentPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A slash-separated path to a document.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DocumentReference",
										"id": 906
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1699,
									"character": 7
								}
							]
						},
						{
							"id": 1161,
							"name": "enableNetwork",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1162,
									"name": "enableNetwork",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Re-enables use of the network for this Firestore instance after a prior call to `disableNetwork()`.",
										"text": "#### Example\n\n```js\nawait firebase.firestore().enableNetwork();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1710,
									"character": 17
								}
							]
						},
						{
							"id": 1163,
							"name": "runTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1164,
									"name": "runTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes the given `updateFunction` and then attempts to commit the changes applied within the transaction.\nIf any document read within the transaction has changed, Cloud Firestore retries the `updateFunction`.\nIf it fails to commit after 5 attempts, the transaction fails.",
										"text": "The maximum number of writes allowed in a single transaction is 500, but note that each usage of\n`FieldValue.serverTimestamp()`, `FieldValue.arrayUnion()`, `FieldValue.arrayRemove()`, or `FieldValue.increment()`\ninside a transaction counts as an additional write.\n\n#### Example\n\n```js\nconst cityRef = firebase.firestore().doc('cities/SF');\n\nawait firebase.firestore()\n  .runTransaction(async (transaction) => {\n    const snapshot = await transaction.get(cityRef);\n    await transaction.update(cityRef, {\n      population: snapshot.data().population + 1,\n    });\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 1165,
											"name": "updateFunction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1166,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1167,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1168,
																	"name": "transaction",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Transaction",
																		"id": 1096
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Promise"
															}
														}
													],
													"sources": [
														{
															"fileName": "firestore/lib/index.d.ts",
															"line": 1735,
															"character": 34
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1735,
									"character": 18
								}
							]
						},
						{
							"id": 1169,
							"name": "settings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1170,
									"name": "settings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Specifies custom settings to be used to configure the Firestore instance. Must be set before invoking any other methods.",
										"text": "#### Example\n\n```js\nconst settings = {\n  cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED,\n};\n\nawait firebase.firestore().settings(settings);\n```\n"
									},
									"parameters": [
										{
											"id": 1171,
											"name": "settings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A `Settings` object.\n"
											},
											"type": {
												"type": "reference",
												"name": "Settings",
												"id": 1061
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1752,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1172
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1148,
								1150,
								1153,
								1156,
								1158,
								1161,
								1163,
								1169
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1630,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1074,
					"name": "Timestamp",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Timestamp represents a point in time independent of any time zone or calendar, represented as seconds and\nfractions of seconds at nanosecond resolution in UTC Epoch time.",
						"text": "It is encoded using the Proleptic Gregorian Calendar which extends the Gregorian calendar backwards to year one.\nIt is encoded assuming all minutes are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second table\nis needed for interpretation. Range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\n"
					},
					"children": [
						{
							"id": 1083,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new timestamp."
							},
							"signatures": [
								{
									"id": 1084,
									"name": "new Timestamp",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new timestamp."
									},
									"parameters": [
										{
											"id": 1085,
											"name": "seconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1086,
											"name": "nanoseconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanoseconds values that count forward in time. Must be from 0 to 999,999,999 inclusive.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Timestamp",
										"id": 1074
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1264,
									"character": 28
								}
							]
						},
						{
							"id": 1087,
							"name": "nanoseconds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of nanoseconds of this `Timestamp`;"
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1277,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1088,
							"name": "seconds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of seconds of this `Timestamp`."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1282,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1089,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1090,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `Timestamp` is equal to the provided one."
									},
									"parameters": [
										{
											"id": 1091,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `Timestamp` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "Timestamp",
												"id": 1074
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1289,
									"character": 11
								}
							]
						},
						{
							"id": 1092,
							"name": "toDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1093,
									"name": "toDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a Timestamp to a JavaScript Date object. This conversion causes a loss of precision since Date objects\nonly support millisecond precision.",
										"text": "Returns a JavaScript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) with\nmillseconds precision.\n"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1298,
									"character": 10
								}
							]
						},
						{
							"id": 1094,
							"name": "toMillis",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1095,
									"name": "toMillis",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Convert a timestamp to a numeric timestamp (in milliseconds since epoch). This operation causes a loss of precision.",
										"text": "The point in time corresponding to this timestamp, represented as the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1305,
									"character": 12
								}
							]
						},
						{
							"id": 1075,
							"name": "fromDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1076,
									"name": "fromDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new timestamp from the given JavaScript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)."
									},
									"parameters": [
										{
											"id": 1077,
											"name": "date",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The date to initialize the `Timestamp` from.\n"
											},
											"type": {
												"type": "reference",
												"name": "Date"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Timestamp",
										"id": 1074
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1252,
									"character": 19
								}
							]
						},
						{
							"id": 1078,
							"name": "fromMillis",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1079,
									"name": "fromMillis",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new timestamp from the given number of milliseconds."
									},
									"parameters": [
										{
											"id": 1080,
											"name": "milliseconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Timestamp",
										"id": 1074
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1259,
									"character": 21
								}
							]
						},
						{
							"id": 1081,
							"name": "now",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 1082,
									"name": "now",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new timestamp with the current date, with millisecond precision."
									},
									"type": {
										"type": "reference",
										"name": "Timestamp",
										"id": 1074
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1264,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1083
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1087,
								1088
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1089,
								1092,
								1094,
								1075,
								1078,
								1081
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1246,
							"character": 24
						}
					]
				},
				{
					"id": 853,
					"name": "CollectionReference",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `CollectionReference` object can be used for adding documents, getting document references, and querying for\ndocuments (using the methods inherited from `Query`)."
					},
					"children": [
						{
							"id": 854,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The collection's identifier."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 103,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 855,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A reference to the containing `DocumentReference` if this is a subcollection. If this isn't a\nsubcollection, the reference is null."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 109,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "DocumentReference",
										"id": 906
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 856,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A string representing the path of the referenced collection (relative to the root of the database)."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 114,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 857,
							"name": "add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 858,
									"name": "add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a new document to this collection with the specified data, assigning it a document ID automatically.",
										"text": "#### Example\n\n```js\nconst documentRef = await firebase.firestore().collection('users').add({\n  name: 'Ada Lovelace',\n  age: 30,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 859,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An Object containing the data for the new document.\n"
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 130,
									"character": 7
								}
							]
						},
						{
							"id": 860,
							"name": "doc",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 861,
									"name": "doc",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a DocumentReference for the document within the collection at the specified path. If no\npath is specified, an automatically-generated unique ID will be used for the returned DocumentReference.",
										"text": "#### Example\n\n```js\nawait firebase.firestore().collection('users').doc('alovelace').set({\n  name: 'Ada Lovelace',\n  age: 30,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 862,
											"name": "documentPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A slash-separated path to a document.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DocumentReference",
										"id": 906
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 147,
									"character": 7
								}
							]
						},
						{
							"id": 863,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 864,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends at the provided document (inclusive). The end\nposition is relative to the order of the query. The document must contain all of the\nfields provided in the orderBy of this query.",
										"text": "#### Example\n\n```js\nconst user = await firebase.firestore().doc('users/alovelace').get();\n\n// Get all users up to a specific user in order of age\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endAt(user);\n```\n\n> Cursor snapshot queries have limitations. Please see [Query limitations](/) for more information.\n"
									},
									"parameters": [
										{
											"id": 865,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The snapshot of the document to end at.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentSnapshot",
												"id": 948
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.endAt",
										"id": 1004
									}
								},
								{
									"id": 866,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends at the provided fields relative to the order of the query.\nThe order of the field values must match the order of the order by clauses of the query.",
										"text": "#### Example\n\n```js\n// Get all users who's age is 30 or less\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endAt(30);\n```\n"
									},
									"parameters": [
										{
											"id": 867,
											"name": "fieldValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "The field values to end this query at, in order of the query's order by.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.endAt",
										"id": 1004
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 802,
									"character": 9
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 820,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.endAt",
								"id": 1004
							}
						},
						{
							"id": 868,
							"name": "endBefore",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 869,
									"name": "endBefore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends before the provided document (exclusive). The end\nposition is relative to the order of the query. The document must contain all of the fields\nprovided in the orderBy of this query.",
										"text": "#### Example\n\n```js\nconst user = await firebase.firestore().doc('users/alovelace').get();\n\n// Get all users up to, but not including, a specific user in order of age\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endBefore(user);\n```\n\n> Cursor snapshot queries have limitations. Please see [Query limitations](/) for more information.\n"
									},
									"parameters": [
										{
											"id": 870,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The snapshot of the document to end before.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentSnapshot",
												"id": 948
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.endBefore",
										"id": 1009
									}
								},
								{
									"id": 871,
									"name": "endBefore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends before the provided fields relative to the order of\nthe query. The order of the field values must match the order of the order by clauses of the query.",
										"text": "#### Example\n\n```js\n// Get all users who's age is 29 or less\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endBefore(30);\n```\n"
									},
									"parameters": [
										{
											"id": 872,
											"name": "fieldValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "The field values to end this query before, in order of the query's order by.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.endBefore",
										"id": 1009
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 843,
									"character": 13
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 861,
									"character": 13
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.endBefore",
								"id": 1009
							}
						},
						{
							"id": 873,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 874,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes the query and returns the results as a QuerySnapshot.",
										"text": "Note: By default, get() attempts to provide up-to-date data when possible by waiting for data from the server,\nbut it may return cached data or fail if you are offline and the server cannot be reached. This behavior can be\naltered via the `GetOptions` parameter.\n\n#### Example\n\n```js\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .get({\n    source: 'server',\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 875,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to configure the get behavior.\n"
											},
											"type": {
												"type": "reference",
												"name": "GetOptions",
												"id": 997
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "QuerySnapshot",
												"id": 1042
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.get",
										"id": 1014
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 883,
									"character": 7
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.get",
								"id": 1014
							}
						},
						{
							"id": 876,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 877,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this Query is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst query = firebase.firestore()\n  .collection('users')\n  .orderBy('age');\n\n// false\nquery.isEqual(\n  firebase.firestore()\n    .collection('users')\n    .orderBy('name')\n);\n```\n"
									},
									"parameters": [
										{
											"id": 878,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `Query` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "Query",
												"id": 1003
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.isEqual",
										"id": 1017
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 905,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.isEqual",
								"id": 1017
							}
						},
						{
							"id": 879,
							"name": "limit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 880,
									"name": "limit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query where the results are limited to the specified number of documents.",
										"text": "#### Example\n\n```js\n// Get 10 users in order of age\nconst querySnapshot = firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .limit(10)\n  .get();\n```\n"
									},
									"parameters": [
										{
											"id": 881,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of items to return.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.limit",
										"id": 1020
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 923,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.limit",
								"id": 1020
							}
						},
						{
							"id": 882,
							"name": "onSnapshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 883,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events.",
										"text": "NOTE: Although an complete callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot({\n    error: (e) => console.error(e),\n    next: (querySnapshot) => {},\n  });\n\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 884,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A single object containing `next` and `error` callbacks.\n"
											},
											"type": {
												"type": "reference",
												"name": "FirestoreObserver",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.onSnapshot",
										"id": 1023
									}
								},
								{
									"id": 885,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events with snapshot listener options.",
										"text": "NOTE: Although an complete callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot({\n    includeMetadataChanges: true,\n  }, {\n    error: (e) => console.error(e),\n    next: (querySnapshot) => {},\n  });\n\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 886,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options controlling the listen behavior."
											},
											"type": {
												"type": "reference",
												"name": "SnapshotListenOptions",
												"id": 1066
											}
										},
										{
											"id": 887,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A single object containing `next` and `error` callbacks.\n"
											},
											"type": {
												"type": "reference",
												"name": "FirestoreObserver",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.onSnapshot",
										"id": 1023
									}
								},
								{
									"id": 888,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events.",
										"text": "NOTE: Although an onCompletion callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot(\n    (querySnapshot) => {}, // onNext\n    (error) => console.error(error), // onError\n  );\n\nunsubscribe();\n```"
									},
									"parameters": [
										{
											"id": 889,
											"name": "onNext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to be called every time a new `QuerySnapshot` is available."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 890,
											"name": "onError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to be called if the listen fails or is cancelled. No further callbacks will occur."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 891,
											"name": "onCompletion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional function which will never be called.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.onSnapshot",
										"id": 1023
									}
								},
								{
									"id": 892,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events with snapshot listener options.",
										"text": "NOTE: Although an onCompletion callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot(\n    { includeMetadataChanges: true }, // SnapshotListenerOptions\n    (querySnapshot) => {}, // onNext\n    (error) => console.error(error), // onError\n  );\n\nunsubscribe();\n```"
									},
									"parameters": [
										{
											"id": 893,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options controlling the listen behavior."
											},
											"type": {
												"type": "reference",
												"name": "SnapshotListenOptions",
												"id": 1066
											}
										},
										{
											"id": 894,
											"name": "onNext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to be called every time a new `QuerySnapshot` is available."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 895,
											"name": "onError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to be called if the listen fails or is cancelled. No further callbacks will occur."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 896,
											"name": "onCompletion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional function which will never be called.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.onSnapshot",
										"id": 1023
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 946,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 972,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 996,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1022,
									"character": 14
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.onSnapshot",
								"id": 1023
							}
						},
						{
							"id": 897,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 898,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that's additionally sorted by the specified field, optionally in descending order instead of ascending.",
										"text": "* #### Example\n\n#### Example\n\n```js\n// Get users in order of age, descending\nconst querySnapshot = firebase.firestore()\n  .collection('users')\n  .orderBy('age', 'desc')\n  .get();\n```\n"
									},
									"parameters": [
										{
											"id": 899,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The field to sort by. Either a string or FieldPath instance."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "FieldPath",
														"id": 961
													}
												]
											}
										},
										{
											"id": 900,
											"name": "directionStr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional direction to sort by (`asc` or `desc`). If not specified, order will be ascending.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "asc"
													},
													{
														"type": "stringLiteral",
														"value": "desc"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Query.orderBy",
										"id": 1038
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1047,
									"character": 11
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Query.orderBy",
								"id": 1038
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								854,
								855,
								856
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								857,
								860,
								863,
								868,
								873,
								876,
								879,
								882,
								897
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 99,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Query",
							"id": 1003
						}
					]
				},
				{
					"id": 901,
					"name": "DocumentChange",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A DocumentChange represents a change to the documents matching a query. It contains the document affected and the\ntype of change that occurred."
					},
					"children": [
						{
							"id": 902,
							"name": "doc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The document affected by this change."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 158,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "DocumentSnapshot",
								"id": 948
							}
						},
						{
							"id": 903,
							"name": "newIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The index of the changed document in the result set immediately after this `DocumentChange`\n(i.e. supposing that all prior `DocumentChange` objects and the current `DocumentChange` object have been applied).\nIs -1 for 'removed' events."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 165,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 904,
							"name": "oldIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The index of the changed document in the result set immediately prior to this `DocumentChange` (i.e.\nsupposing that all prior `DocumentChange` objects have been applied). Is -1 for 'added' events."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 171,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 905,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The type of change ('added', 'modified', or 'removed')."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 176,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "DocumentChangeType",
								"id": 1173
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								902,
								903,
								904,
								905
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 154,
							"character": 33
						}
					]
				},
				{
					"id": 906,
					"name": "DocumentReference",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `DocumentReference` refers to a document location in a Firestore database and can be used to write, read, or listen\nto the location. The document at the referenced location may or may not exist. A `DocumentReference` can also be used\nto create a `CollectionReference` to a subcollection."
					},
					"children": [
						{
							"id": 907,
							"name": "firestore",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Firestore instance the document is in. This is useful for performing transactions, for example."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 193,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Module",
								"id": 1147
							}
						},
						{
							"id": 908,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The document's identifier within its collection."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 198,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 909,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The Collection this `DocumentReference` belongs to."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 203,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CollectionReference",
								"id": 853
							}
						},
						{
							"id": 910,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A string representing the path of the referenced document (relative to the root of the database)."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 208,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 911,
							"name": "collection",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 912,
									"name": "collection",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a `CollectionReference` instance that refers to the collection at the specified path.",
										"text": "#### Example\n\n```js\nconst collectionRef = firebase.firestore().doc('users/alovelace').collection('orders');\n```\n"
									},
									"parameters": [
										{
											"id": 913,
											"name": "collectionPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A slash-separated path to a collection.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CollectionReference",
										"id": 853
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 221,
									"character": 14
								}
							]
						},
						{
							"id": 914,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 915,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes the document referred to by this DocumentReference.",
										"text": "#### Example\n\n```js\nawait firebase.firestore().doc('users/alovelace').delete();\n```\n\nThe Promise is resolved once the document has been successfully deleted from the backend\n(Note that it won't resolve while you're offline).\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 235,
									"character": 10
								}
							]
						},
						{
							"id": 916,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 917,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reads the document referred to by this DocumentReference.",
										"text": "Note: By default, get() attempts to provide up-to-date data when possible by waiting for data\nfrom the server, but it may return cached data or fail if you are offline and the server cannot\nbe reached. This behavior can be altered via the GetOptions parameter.\n\n#### Example\n\n```js\nawait firebase.firestore().doc('users/alovelace').get({\n  source: 'server',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 918,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to configure the get behavior.\n"
											},
											"type": {
												"type": "reference",
												"name": "GetOptions",
												"id": 997
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DocumentSnapshot",
												"id": 948
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 254,
									"character": 7
								}
							]
						},
						{
							"id": 919,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 920,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this DocumentReference is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst alovelace = firebase.firestore().doc('users/alovelace');\nconst dsmith = firebase.firestore().doc('users/dsmith');\n\n// false\nalovelace.isEqual(dsmith);\n``\n\n@param other The `DocumentReference` to compare against.\n"
									},
									"parameters": [
										{
											"id": 921,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 271,
									"character": 11
								}
							]
						},
						{
							"id": 922,
							"name": "onSnapshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 923,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for DocumentSnapshot events.",
										"text": "NOTE: Although an complete callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().doc('users/alovelace')\n  .onSnapshot({\n    error: (e) => console.error(e),\n    next: (documentSnapshot) => {},\n  });\n\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 924,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A single object containing `next` and `error` callbacks.\n"
											},
											"type": {
												"type": "reference",
												"name": "FirestoreObserver",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 925,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for DocumentSnapshot events with snapshot listener options.",
										"text": "NOTE: Although an complete callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().doc('users/alovelace')\n  .onSnapshot({\n    includeMetadataChanges: true,\n  }, {\n    error: (e) => console.error(e),\n    next: (documentSnapshot) => {},\n  });\n\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 926,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options controlling the listen behavior."
											},
											"type": {
												"type": "reference",
												"name": "SnapshotListenOptions",
												"id": 1066
											}
										},
										{
											"id": 927,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A single object containing `next` and `error` callbacks.\n"
											},
											"type": {
												"type": "reference",
												"name": "FirestoreObserver",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 928,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for DocumentSnapshot events.",
										"text": "NOTE: Although an onCompletion callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().doc('users/alovelace')\n  .onSnapshot(\n    (documentSnapshot) => {}, // onNext\n    (error) => console.error(error), // onError\n  );\n\nunsubscribe();\n```"
									},
									"parameters": [
										{
											"id": 929,
											"name": "onNext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to be called every time a new `DocumentSnapshot` is available."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 930,
											"name": "onError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to be called if the listen fails or is cancelled. No further callbacks will occur."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 931,
											"name": "onCompletion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional function which will never be called.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 932,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for DocumentSnapshot events with snapshot listener options.",
										"text": "NOTE: Although an onCompletion callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().doc('users/alovelace')\n  .onSnapshot(\n    { includeMetadataChanges: true }, // SnapshotListenerOptions\n    (documentSnapshot) => {}, // onNext\n    (error) => console.error(error), // onError\n  );\n\nunsubscribe();\n```"
									},
									"parameters": [
										{
											"id": 933,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options controlling the listen behavior."
											},
											"type": {
												"type": "reference",
												"name": "SnapshotListenOptions",
												"id": 1066
											}
										},
										{
											"id": 934,
											"name": "onNext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to be called every time a new `DocumentSnapshot` is available."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 935,
											"name": "onError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to be called if the listen fails or is cancelled. No further callbacks will occur."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 936,
											"name": "onCompletion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional function which will never be called.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 294,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 320,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 344,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 370,
									"character": 14
								}
							]
						},
						{
							"id": 937,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 938,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes to the document referred to by this DocumentReference. If the document does not yet\nexist, it will be created. If you pass SetOptions, the provided data can be merged into an\nexisting document.",
										"text": "#### Example\n\n```js\nconst user = firebase.firestore().doc('users/alovelace');\n\n// Set new data\nawait user.set({\n  name: 'Ada Lovelace',\n  age: 30,\n  city: 'LON',\n});\n``\n\n@param data A map of the fields and values for the document.\n@param options An object to configure the set behavior.\n"
									},
									"parameters": [
										{
											"id": 939,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										},
										{
											"id": 940,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "SetOptions",
												"id": 1058
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 398,
									"character": 7
								}
							]
						},
						{
							"id": 941,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 942,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates fields in the document referred to by this `DocumentReference`. The update will fail\nif applied to a document that does not exist.",
										"text": "#### Example\n\n```\nconst user = firebase.firestore().doc('users/alovelace');\n\n// Update age but leave other fields untouched\nawait user.update({\n  age: 31,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 943,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing the fields and values with which to update the document. Fields can contain dots to reference nested fields within the document.\n"
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								},
								{
									"id": 944,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates fields in the document referred to by this DocumentReference. The update will fail if\napplied to a document that does not exist.",
										"text": "#### Example\n\n```\nconst user = firebase.firestore().doc('users/alovelace');\n\n// Update age & city but leve other fields untouched\nawait user.update('age', 31, 'city', 'SF');\n```\n"
									},
									"parameters": [
										{
											"id": 945,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The first field to update."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "FieldPath",
														"id": 961
													}
												]
											}
										},
										{
											"id": 946,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The first value."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 947,
											"name": "moreFieldsAndValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Additional key value pairs.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 417,
									"character": 10
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 436,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								907,
								908,
								909,
								910
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								911,
								914,
								916,
								919,
								922,
								937,
								941
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 189,
							"character": 36
						}
					]
				},
				{
					"id": 948,
					"name": "DocumentSnapshot",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A DocumentSnapshot contains data read from a document in your Firestore database. The data can be extracted with\n.`data()` or `.get(<field>)` to get a specific field.",
						"text": "For a DocumentSnapshot that points to a non-existing document, any data access will return 'undefined'.\nYou can use the `exists` property to explicitly verify a document's existence.\n"
					},
					"children": [
						{
							"id": 949,
							"name": "exists",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Property of the `DocumentSnapshot` that signals whether or not the data exists. True if the document exists."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 450,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 950,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Property of the `DocumentSnapshot` that provides the document's ID."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 455,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 951,
							"name": "metadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Metadata about the `DocumentSnapshot`, including information about its source and local modifications."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 460,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SnapshotMetadata",
								"id": 1068
							}
						},
						{
							"id": 952,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The `DocumentReference` for the document included in the `DocumentSnapshot`."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 465,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "DocumentReference",
								"id": 906
							}
						},
						{
							"id": 953,
							"name": "data",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 954,
									"name": "data",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves all fields in the document as an Object. Returns 'undefined' if the document doesn't exist.",
										"text": "#### Example\n\n```js\nconst user = await firebase.firestore().doc('users/alovelace').get();\n\nconsole.log('User', user.data());\n```\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "__type"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 478,
									"character": 8
								}
							]
						},
						{
							"id": 955,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 956,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves the field specified by fieldPath. Returns undefined if the document or field doesn't exist.",
										"text": "#### Example\n\n```js\nconst user = await firebase.firestore().doc('users/alovelace').get();\n\nconsole.log('Address ZIP Code', user.get('address.zip'));\n```\n"
									},
									"parameters": [
										{
											"id": 957,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The path (e.g. 'foo' or 'foo.bar') to a specific field.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "FieldPath",
														"id": 961
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 493,
									"character": 7
								}
							]
						},
						{
							"id": 958,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 959,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `DocumentSnapshot` is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst user1 = await firebase.firestore().doc('users/alovelace').get();\nconst user2 = await firebase.firestore().doc('users/dsmith').get();\n\n// false\nuser1.isEqual(user2);\n```\n"
									},
									"parameters": [
										{
											"id": 960,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `DocumentSnapshot` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentSnapshot",
												"id": 948
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 510,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								949,
								950,
								951,
								952
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								953,
								955,
								958
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 446,
							"character": 35
						}
					]
				},
				{
					"id": 999,
					"name": "FirestoreObserver",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1000,
							"name": "complete",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 771,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							}
						},
						{
							"id": 1001,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 772,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							}
						},
						{
							"id": 1002,
							"name": "next",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 773,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1000,
								1001,
								1002
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 770,
							"character": 36
						}
					]
				},
				{
					"id": 997,
					"name": "GetOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An options object that configures the behavior of get() calls on DocumentReference and Query.\nBy providing a GetOptions object, these methods can be configured to fetch results only from the\nserver, only from the local cache or attempt to fetch results from the server and fall back to the\ncache (which is the default)."
					},
					"children": [
						{
							"id": 998,
							"name": "source",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Describes whether we should get from server or cache.",
								"text": "Setting to `default` (or not setting at all), causes Firestore to try to retrieve an up-to-date (server-retrieved)\nsnapshot, but fall back to returning cached data if the server can't be reached.\n\nSetting to `server` causes Firestore to avoid the cache, generating an error if the server cannot be reached. Note\nthat the cache will still be updated if the server request succeeds. Also note that latency-compensation still\ntakes effect, so any pending write operations will be visible in the returned data (merged into the server-provided data).\n\nSetting to `cache` causes Firestore to immediately return a value from the cache, ignoring the server completely\n(implying that the returned value may be stale with respect to the value on the server.) If there is no data in the\ncache to satisfy the `get()` call, `DocumentReference.get()` will return an error and `QuerySnapshot.get()` will return an\nempty `QuerySnapshot` with no documents.\n"
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 767,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "default"
									},
									{
										"type": "stringLiteral",
										"value": "server"
									},
									{
										"type": "stringLiteral",
										"value": "cache"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								998
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 751,
							"character": 29
						}
					]
				},
				{
					"id": 1003,
					"name": "Query",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Query refers to a `Query` which you can read or listen to. You can also construct refined `Query` objects by\nadding filters and ordering."
					},
					"children": [
						{
							"id": 1004,
							"name": "endAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1005,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends at the provided document (inclusive). The end\nposition is relative to the order of the query. The document must contain all of the\nfields provided in the orderBy of this query.",
										"text": "#### Example\n\n```js\nconst user = await firebase.firestore().doc('users/alovelace').get();\n\n// Get all users up to a specific user in order of age\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endAt(user);\n```\n\n> Cursor snapshot queries have limitations. Please see [Query limitations](/) for more information.\n"
									},
									"parameters": [
										{
											"id": 1006,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The snapshot of the document to end at.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentSnapshot",
												"id": 948
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									}
								},
								{
									"id": 1007,
									"name": "endAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends at the provided fields relative to the order of the query.\nThe order of the field values must match the order of the order by clauses of the query.",
										"text": "#### Example\n\n```js\n// Get all users who's age is 30 or less\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endAt(30);\n```\n"
									},
									"parameters": [
										{
											"id": 1008,
											"name": "fieldValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "The field values to end this query at, in order of the query's order by.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 802,
									"character": 9
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 820,
									"character": 9
								}
							]
						},
						{
							"id": 1009,
							"name": "endBefore",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1010,
									"name": "endBefore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends before the provided document (exclusive). The end\nposition is relative to the order of the query. The document must contain all of the fields\nprovided in the orderBy of this query.",
										"text": "#### Example\n\n```js\nconst user = await firebase.firestore().doc('users/alovelace').get();\n\n// Get all users up to, but not including, a specific user in order of age\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endBefore(user);\n```\n\n> Cursor snapshot queries have limitations. Please see [Query limitations](/) for more information.\n"
									},
									"parameters": [
										{
											"id": 1011,
											"name": "snapshot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The snapshot of the document to end before.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentSnapshot",
												"id": 948
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									}
								},
								{
									"id": 1012,
									"name": "endBefore",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that ends before the provided fields relative to the order of\nthe query. The order of the field values must match the order of the order by clauses of the query.",
										"text": "#### Example\n\n```js\n// Get all users who's age is 29 or less\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .endBefore(30);\n```\n"
									},
									"parameters": [
										{
											"id": 1013,
											"name": "fieldValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "The field values to end this query before, in order of the query's order by.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 843,
									"character": 13
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 861,
									"character": 13
								}
							]
						},
						{
							"id": 1014,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1015,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes the query and returns the results as a QuerySnapshot.",
										"text": "Note: By default, get() attempts to provide up-to-date data when possible by waiting for data from the server,\nbut it may return cached data or fail if you are offline and the server cannot be reached. This behavior can be\naltered via the `GetOptions` parameter.\n\n#### Example\n\n```js\nconst querySnapshot = await firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .get({\n    source: 'server',\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 1016,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to configure the get behavior.\n"
											},
											"type": {
												"type": "reference",
												"name": "GetOptions",
												"id": 997
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "QuerySnapshot",
												"id": 1042
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 883,
									"character": 7
								}
							]
						},
						{
							"id": 1017,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1018,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this Query is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst query = firebase.firestore()\n  .collection('users')\n  .orderBy('age');\n\n// false\nquery.isEqual(\n  firebase.firestore()\n    .collection('users')\n    .orderBy('name')\n);\n```\n"
									},
									"parameters": [
										{
											"id": 1019,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `Query` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "Query",
												"id": 1003
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 905,
									"character": 11
								}
							]
						},
						{
							"id": 1020,
							"name": "limit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1021,
									"name": "limit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query where the results are limited to the specified number of documents.",
										"text": "#### Example\n\n```js\n// Get 10 users in order of age\nconst querySnapshot = firebase.firestore()\n  .collection('users')\n  .orderBy('age')\n  .limit(10)\n  .get();\n```\n"
									},
									"parameters": [
										{
											"id": 1022,
											"name": "limit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of items to return.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 923,
									"character": 9
								}
							]
						},
						{
							"id": 1023,
							"name": "onSnapshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1024,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events.",
										"text": "NOTE: Although an complete callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot({\n    error: (e) => console.error(e),\n    next: (querySnapshot) => {},\n  });\n\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 1025,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A single object containing `next` and `error` callbacks.\n"
											},
											"type": {
												"type": "reference",
												"name": "FirestoreObserver",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 1026,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events with snapshot listener options.",
										"text": "NOTE: Although an complete callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot({\n    includeMetadataChanges: true,\n  }, {\n    error: (e) => console.error(e),\n    next: (querySnapshot) => {},\n  });\n\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 1027,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options controlling the listen behavior."
											},
											"type": {
												"type": "reference",
												"name": "SnapshotListenOptions",
												"id": 1066
											}
										},
										{
											"id": 1028,
											"name": "observer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A single object containing `next` and `error` callbacks.\n"
											},
											"type": {
												"type": "reference",
												"name": "FirestoreObserver",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 1029,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events.",
										"text": "NOTE: Although an onCompletion callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot(\n    (querySnapshot) => {}, // onNext\n    (error) => console.error(error), // onError\n  );\n\nunsubscribe();\n```"
									},
									"parameters": [
										{
											"id": 1030,
											"name": "onNext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to be called every time a new `QuerySnapshot` is available."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 1031,
											"name": "onError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to be called if the listen fails or is cancelled. No further callbacks will occur."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 1032,
											"name": "onCompletion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional function which will never be called.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 1033,
									"name": "onSnapshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Attaches a listener for `QuerySnapshot` events with snapshot listener options.",
										"text": "NOTE: Although an onCompletion callback can be provided, it will never be called because the snapshot stream is never-ending.\n\nReturns an unsubscribe function to stop listening to events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().collection('users')\n  .onSnapshot(\n    { includeMetadataChanges: true }, // SnapshotListenerOptions\n    (querySnapshot) => {}, // onNext\n    (error) => console.error(error), // onError\n  );\n\nunsubscribe();\n```"
									},
									"parameters": [
										{
											"id": 1034,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options controlling the listen behavior."
											},
											"type": {
												"type": "reference",
												"name": "SnapshotListenOptions",
												"id": 1066
											}
										},
										{
											"id": 1035,
											"name": "onNext",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to be called every time a new `QuerySnapshot` is available."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 1036,
											"name": "onError",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A callback to be called if the listen fails or is cancelled. No further callbacks will occur."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 1037,
											"name": "onCompletion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional function which will never be called.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 946,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 972,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 996,
									"character": 14
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1022,
									"character": 14
								}
							]
						},
						{
							"id": 1038,
							"name": "orderBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1039,
									"name": "orderBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates and returns a new Query that's additionally sorted by the specified field, optionally in descending order instead of ascending.",
										"text": "* #### Example\n\n#### Example\n\n```js\n// Get users in order of age, descending\nconst querySnapshot = firebase.firestore()\n  .collection('users')\n  .orderBy('age', 'desc')\n  .get();\n```\n"
									},
									"parameters": [
										{
											"id": 1040,
											"name": "fieldPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The field to sort by. Either a string or FieldPath instance."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "FieldPath",
														"id": 961
													}
												]
											}
										},
										{
											"id": 1041,
											"name": "directionStr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional direction to sort by (`asc` or `desc`). If not specified, order will be ascending.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "asc"
													},
													{
														"type": "stringLiteral",
														"value": "desc"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Query",
										"id": 1003
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1047,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1004,
								1009,
								1014,
								1017,
								1020,
								1023,
								1038
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 780,
							"character": 24
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "CollectionReference",
							"id": 853
						}
					]
				},
				{
					"id": 1042,
					"name": "QuerySnapshot",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects representing the results of a query. The documents\ncan be accessed as an array via the `docs` property or enumerated using the `forEach` method. The number of documents\ncan be determined via the `empty` and `size` properties."
					},
					"children": [
						{
							"id": 1043,
							"name": "docs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of all the documents in the `QuerySnapshot`."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1059,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DocumentSnapshot",
									"id": 948
								}
							}
						},
						{
							"id": 1044,
							"name": "empty",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "True if there are no documents in the `QuerySnapshot`."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1064,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1045,
							"name": "metadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Metadata about this snapshot, concerning its source and if it has local modifications."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1069,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "SnapshotMetadata",
								"id": 1068
							}
						},
						{
							"id": 1046,
							"name": "query",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The query on which you called get or `onSnapshot` in order to `get` this `QuerySnapshot`."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1074,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Query",
								"id": 1003
							}
						},
						{
							"id": 1047,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of documents in the `QuerySnapshot`."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1079,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1048,
							"name": "docChanges",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1049,
									"name": "docChanges",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array of the documents changes since the last snapshot. If this is the first snapshot, all documents\nwill be in the list as added changes.",
										"text": "To include metadata changes, ensure that the `onSnapshot()` method includes metadata changes.\n\n#### Example\n\n```js\nfirebase.firestore().collection('users')\n  .onSnapshot((querySnapshot) => {\n    console.log('Metadata Changes', querySnapshot.docChanges());\n  });\n```\n\n#### Example - With metadata changes\n\n```js\nfirebase.firestore().collection('users')\n  .onSnapshot({ includeMetadataChanges: true }, (querySnapshot) => {\n    console.log('Metadata Changes', querySnapshot.docChanges({\n      includeMetadataChanges: true,\n    }));\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 1050,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "`SnapshotListenOptions` that control whether metadata-only changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger snapshot events.\n"
											},
											"type": {
												"type": "reference",
												"name": "SnapshotListenOptions",
												"id": 1066
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "DocumentChange",
											"id": 901
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1109,
									"character": 14
								}
							]
						},
						{
							"id": 1051,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1052,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enumerates all of the documents in the `QuerySnapshot`.",
										"text": "#### Example\n\n```js\nconst querySnapshot = await firebase.firestore().collection('users').get();\n\nquerySnapshot.forEach((documentSnapshot) => {\n  console.log('User', documentSnapshot.data());\n})\n```\n"
									},
									"parameters": [
										{
											"id": 1053,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A callback to be called with a `DocumentSnapshot` for each document in the snapshot."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 1054,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The this binding for the callback.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1127,
									"character": 11
								}
							]
						},
						{
							"id": 1055,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1056,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `QuerySnapshot` is equal to the provided one.",
										"text": "#### Example\n\n```js\nconst querySnapshot1 = await firebase.firestore().collection('users').limit(5).get();\nconst querySnapshot2 = await firebase.firestore().collection('users').limit(10).get();\n\n// false\nquerySnapshot1.isEqual(querySnapshot2);\n```\n\n> This operation can be resource intensive when dealing with large datasets.\n"
									},
									"parameters": [
										{
											"id": 1057,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `QuerySnapshot` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "QuerySnapshot",
												"id": 1042
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1146,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1043,
								1044,
								1045,
								1046,
								1047
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1048,
								1051,
								1055
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1055,
							"character": 32
						}
					]
				},
				{
					"id": 1058,
					"name": "SetOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An options object that configures the behavior of set() calls in `DocumentReference`, `WriteBatch` and `Transaction`.\nThese calls can be configured to perform granular merges instead of overwriting the target documents in their entirety\nby providing a `SetOptions` with `merge: true`.",
						"text": "Using both `merge` and `mergeFields` together will throw an error.\n"
					},
					"children": [
						{
							"id": 1059,
							"name": "merge",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Changes the behavior of a `set()` call to only replace the values specified in its data argument.\nFields omitted from the `set()` call remain untouched."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1161,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1060,
							"name": "mergeField",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Changes the behavior of `set()` calls to only replace the specified field paths.\nAny field path that is not specified is ignored and remains untouched."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1167,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"name": "FieldPath",
											"id": 961
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1059,
								1060
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1156,
							"character": 29
						}
					]
				},
				{
					"id": 1061,
					"name": "Settings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Specifies custom configurations for your Cloud Firestore instance. You must set these before invoking any other methods.",
						"text": "Used with `firebase.firestore().settings()`.\n"
					},
					"children": [
						{
							"id": 1063,
							"name": "cacheSizeBytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An approximate cache size threshold for the on-disk data. If the cache grows beyond this size, Firestore will start\nremoving data that hasn't been recently used. The size is not a guarantee that the cache will stay below that size,\nonly that if the cache exceeds the given size, cleanup will be attempted.",
								"text": "To disable garbage collection and set an unlimited cache size, use `firebase.firestore.CACHE_SIZE_UNLIMITED`.\n"
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1188,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1064,
							"name": "host",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The hostname to connect to."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1193,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1062,
							"name": "persistence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Enables or disables local persistent storage."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1179,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1065,
							"name": "ssl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Whether to use SSL when connecting."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1198,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1063,
								1064,
								1062,
								1065
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1175,
							"character": 27
						}
					]
				},
				{
					"id": 1066,
					"name": "SnapshotListenOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An options object that can be passed to `DocumentReference.onSnapshot()`, `Query.onSnapshot()` and `QuerySnapshot.docChanges()`\nto control which types of changes to include in the result set."
					},
					"children": [
						{
							"id": 1067,
							"name": "includeMetadataChanges",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Include a change even if only the metadata of the query or of a document changed. Default is false."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1209,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1067
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1205,
							"character": 40
						}
					]
				},
				{
					"id": 1068,
					"name": "SnapshotMetadata",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Metadata about a snapshot, describing the state of the snapshot."
					},
					"children": [
						{
							"id": 1069,
							"name": "fromCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "True if the snapshot includes local writes (`set()` or `update()` calls) that haven't been committed to the backend yet.\nIf your listener has opted into metadata updates (via `SnapshotListenOptions`) you will receive another snapshot with\n`fromCache` equal to false once the client has received up-to-date data from the backend."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1221,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1070,
							"name": "hasPendingWrites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "True if the snapshot contains the result of local writes (e.g. `set()` or `update()` calls) that have not yet been\ncommitted to the backend. If your listener has opted into metadata updates (via `SnapshotListenOptions`) you will\nreceive another snapshot with `hasPendingWrites` equal to false once the writes have been committed to the backend."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1228,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1071,
							"name": "isEqual",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1072,
									"name": "isEqual",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns true if this `SnapshotMetadata` is equal to the provided one."
									},
									"parameters": [
										{
											"id": 1073,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The `SnapshotMetadata` to compare against.\n"
											},
											"type": {
												"type": "reference",
												"name": "SnapshotMetadata",
												"id": 1068
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1235,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1069,
								1070
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1071
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1215,
							"character": 35
						}
					]
				},
				{
					"id": 1137,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "`firebase.firestore.X`"
					},
					"children": [
						{
							"id": 1138,
							"name": "Blob",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the `Blob` class."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1563,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Blob",
								"id": 839
							}
						},
						{
							"id": 1143,
							"name": "CACHE_SIZE_UNLIMITED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Used to set the cache size to unlimited when passing to `cacheSizeBytes` in\n`firebase.firestore().settings()`."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1589,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1139,
							"name": "FieldPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the `FieldPath` class."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1568,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "FieldPath",
								"id": 961
							}
						},
						{
							"id": 1140,
							"name": "FieldValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the `FieldValue` class."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1573,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "FieldValue",
								"id": 970
							}
						},
						{
							"id": 1141,
							"name": "GeoPoint",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the `GeoPoint` class."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1578,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "GeoPoint",
								"id": 987
							}
						},
						{
							"id": 1142,
							"name": "Timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the `Timestamp` class."
							},
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1583,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "Timestamp",
								"id": 1074
							}
						},
						{
							"id": 1144,
							"name": "setLogLevel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1145,
									"name": "setLogLevel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the verbosity of Cloud Firestore native device logs (debug, error, or silent).",
										"text": "- `debug`: the most verbose logging level, primarily for debugging.\n- `error`: logs only error events.\n- `silent`: turn off logging.\n\n#### Example\n\n```js\nfirebase.firestore.setLogLevel('silent');\n```\n"
									},
									"parameters": [
										{
											"id": 1146,
											"name": "logLevel",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The verbosity you set for activity and error logging.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "debug"
													},
													{
														"type": "stringLiteral",
														"value": "error"
													},
													{
														"type": "stringLiteral",
														"value": "silent"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1606,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1138,
								1143,
								1139,
								1140,
								1141,
								1142
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1144
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1559,
							"character": 26
						}
					]
				},
				{
					"id": 1096,
					"name": "Transaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A reference to a transaction. The `Transaction` object passed to a transaction's updateFunction provides the methods to\nread and write data within the transaction context. See `Firestore.runTransaction()`.",
						"text": "A transaction consists of any number of `get()` operations followed by any number of write operations such as set(),\n`update()`, or `delete()`. In the case of a concurrent edit, Cloud Firestore runs the entire transaction again. For example,\nif a transaction reads documents and another client modifies any of those documents, Cloud Firestore retries the transaction.\nThis feature ensures that the transaction runs on up-to-date and consistent data.\n\nTransactions never partially apply writes. All writes execute at the end of a successful transaction.\n\nWhen using transactions, note that:\n  - Read operations must come before write operations.\n  - A function calling a transaction (transaction function) might run more than once if a concurrent edit affects a document that the transaction reads.\n  - Transaction functions should not directly modify application state (return a value from the `updateFunction`).\n  - Transactions will fail when the client is offline.\n"
					},
					"children": [
						{
							"id": 1097,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1098,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes the document referred to by the provided `DocumentReference`.",
										"text": "#### Example\n\n```js\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nawait firebase.firestore().runTransaction((transaction) => {\n  return transaction.delete(docRef);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1099,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be deleted.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Transaction",
										"id": 1096
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1341,
									"character": 10
								}
							]
						},
						{
							"id": 1100,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1101,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Reads the document referenced by the provided `DocumentReference`.",
										"text": "#### Example\n\n```js\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nawait firebase.firestore().runTransaction(async (transaction) => {\n  const snapshot = await transaction.get(docRef);\n   // use snapshot with transaction (see set() or update())\n   ...\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1102,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be read.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DocumentSnapshot",
												"id": 948
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1360,
									"character": 7
								}
							]
						},
						{
							"id": 1103,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1104,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes to the document referred to by the provided `DocumentReference`. If the document does not exist yet,\nit will be created. If you pass `SetOptions`, the provided data can be merged into the existing document.",
										"text": "#### Example\n\n```js\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nawait firebase.firestore().runTransaction((transaction) => {\n  const snapshot = await transaction.get(docRef);\n  const snapshotData = snapshot.data();\n\n  return transaction.set(docRef, {\n    ...data,\n    age: 30, // new field\n  });\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1105,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be set."
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										},
										{
											"id": 1106,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object of the fields and values for the document."
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										},
										{
											"id": 1107,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to configure the set behavior.\n"
											},
											"type": {
												"type": "reference",
												"name": "SetOptions",
												"id": 1058
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Transaction",
										"id": 1096
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1386,
									"character": 7
								}
							]
						},
						{
							"id": 1108,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1109,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates fields in the document referred to by the provided `DocumentReference`. The update will fail if applied\nto a document that does not exist.",
										"text": "#### Example\n\n```js\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nawait firebase.firestore().runTransaction((transaction) => {\n  const snapshot = await transaction.get(docRef);\n\n  return transaction.update(docRef, {\n    age: snapshot.data().age + 1,\n  });\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1110,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be updated."
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										},
										{
											"id": 1111,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing the fields and values with which to update the document. Fields can contain dots to reference nested fields within the document.\n"
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Transaction",
										"id": 1096
									}
								},
								{
									"id": 1112,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates fields in the document referred to by the provided DocumentReference. The update will fail if applied to\na document that does not exist.",
										"text": "Nested fields can be updated by providing dot-separated field path strings or by providing FieldPath objects.\n\n#### Example\n\n```js\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nawait firebase.firestore().runTransaction((transaction) => {\n  const snapshot = await transaction.get(docRef);\n\n  return transaction.update(docRef, 'age', snapshot.data().age + 1);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1113,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be updated."
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										},
										{
											"id": 1114,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The first field to update."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "FieldPath",
														"id": 961
													}
												]
											}
										},
										{
											"id": 1115,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The first value."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1116,
											"name": "moreFieldsAndValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Additional key/value pairs.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Transaction",
										"id": 1096
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1409,
									"character": 10
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1434,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1097,
								1100,
								1103,
								1108
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1325,
							"character": 30
						}
					]
				},
				{
					"id": 1117,
					"name": "WriteBatch",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A write batch, used to perform multiple writes as a single atomic unit.",
						"text": "A WriteBatch object can be acquired by calling `firestore.batch()`. It provides methods for adding\nwrites to the write batch. None of the writes will be committed (or visible locally) until\n`WriteBatch.commit()` is called.\n\nUnlike transactions, write batches are persisted offline and therefore are preferable when you don't need to\ncondition your writes on read data.\n"
					},
					"children": [
						{
							"id": 1118,
							"name": "commit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1119,
									"name": "commit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Commits all of the writes in this write batch as a single atomic unit.",
										"text": "Returns a Promise resolved once all of the writes in the batch have been successfully written\nto the backend as an atomic unit. Note that it won't resolve while you're offline.\n\n#### Example\n\n```js\nconst batch = firebase.firestore().batch();\n\n// Perform batch operations...\n\nawait batch.commit();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1469,
									"character": 10
								}
							]
						},
						{
							"id": 1120,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1121,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes the document referred to by the provided `DocumentReference`.",
										"text": "#### Example\n\n```js\nconst batch = firebase.firestore().batch();\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nbatch.delete(docRef);\n```\n"
									},
									"parameters": [
										{
											"id": 1122,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be deleted.\n"
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WriteBatch",
										"id": 1117
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1485,
									"character": 10
								}
							]
						},
						{
							"id": 1123,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1124,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes to the document referred to by the provided DocumentReference. If the document does\nnot exist yet, it will be created. If you pass SetOptions, the provided data can be merged\ninto the existing document.",
										"text": "#### Example\n\n```js\nconst batch = firebase.firestore().batch();\nconst docRef = firebase.firestore().doc('users/dsmith');\n\nbatch.set(docRef, {\n  name: 'David Smith',\n  age: 25,\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1125,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be set."
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										},
										{
											"id": 1126,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object of the fields and values for the document."
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										},
										{
											"id": 1127,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An object to configure the set behavior.\n"
											},
											"type": {
												"type": "reference",
												"name": "SetOptions",
												"id": 1058
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WriteBatch",
										"id": 1117
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1508,
									"character": 7
								}
							]
						},
						{
							"id": 1128,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1129,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates fields in the document referred to by the provided DocumentReference. The update will fail if applied to a document that does not exist.",
										"text": "#### Example\n\n```js\nconst batch = firebase.firestore().batch();\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nbatch.update(docRef, {\n  city: 'SF',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1130,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be updated."
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										},
										{
											"id": 1131,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object containing the fields and values with which to update the document. Fields can contain dots to reference nested fields within the document.\n"
											},
											"type": {
												"type": "reference",
												"name": "__type"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WriteBatch",
										"id": 1117
									}
								},
								{
									"id": 1132,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates fields in the document referred to by this DocumentReference. The update will fail if applied to a document that does not exist.",
										"text": "Nested fields can be update by providing dot-separated field path strings or by providing FieldPath objects.\n\n#### Example\n\n```js\nconst batch = firebase.firestore().batch();\nconst docRef = firebase.firestore().doc('users/alovelace');\n\nbatch.update(docRef, 'city', 'SF', 'age', 31);\n```\n"
									},
									"parameters": [
										{
											"id": 1133,
											"name": "documentRef",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A reference to the document to be updated."
											},
											"type": {
												"type": "reference",
												"name": "DocumentReference",
												"id": 906
											}
										},
										{
											"id": 1134,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The first field to update."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "FieldPath",
														"id": 961
													}
												]
											}
										},
										{
											"id": 1135,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The first value."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1136,
											"name": "moreFieldAndValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Additional key value pairs.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WriteBatch",
										"id": 1117
									}
								}
							],
							"sources": [
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1527,
									"character": 10
								},
								{
									"fileName": "firestore/lib/index.d.ts",
									"line": 1548,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1118,
								1120,
								1123,
								1128
							]
						}
					],
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 1452,
							"character": 29
						}
					]
				},
				{
					"id": 1173,
					"name": "DocumentChangeType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of a DocumentChange may be 'added', 'removed', or 'modified'."
					},
					"sources": [
						{
							"fileName": "firestore/lib/index.d.ts",
							"line": 182,
							"character": 32
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "added"
							},
							{
								"type": "stringLiteral",
								"value": "removed"
							},
							{
								"type": "stringLiteral",
								"value": "modified"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						839,
						961,
						970,
						987,
						1147,
						1074
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						853,
						901,
						906,
						948,
						999,
						997,
						1003,
						1042,
						1058,
						1061,
						1066,
						1068,
						1137,
						1096,
						1117
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1173
					]
				}
			],
			"sources": [
				{
					"fileName": "firestore/lib/index.d.ts",
					"line": 56,
					"character": 26
				}
			]
		},
		{
			"id": 1181,
			"name": "Functions",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Cloud Functions package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `functions` package:\n\n```js\nimport { firebase } from '@react-native-firebase/functions';\n\n// firebase.functions().X\n```\n\n#### Example 2\n\nUsing the default export from the `functions` package:\n\n```js\nimport functions from '@react-native-firebase/functions';\n\n// functions().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/functions';\n\n// firebase.functions().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "functions\n"
					}
				]
			},
			"children": [
				{
					"id": 1214,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Cloud Functions service is available for the default app, a given app or a specified region.",
						"text": "> The default functions region for all apps is `us-central1`.\n\n#### Example 1\n\nGet the functions instance for the **default app**:\n\n```js\nconst functionsForDefaultApp = firebase.functions();\n```\n\n#### Example 2\n\nGet the functions instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst functionsForOtherApp = firebase.functions(otherApp);\n```\n\n#### Example 3\n\nGet the functions instance for a **specific functions region**:\n\n```js\nconst defaultApp = firebase.app();\nconst functionsForRegion = defaultApp.functions('europe-west1');\n\nconst otherApp = firebase.app('otherApp');\nconst functionsForOtherAppRegion = otherApp.functions('europe-west1');\n```\n\n"
					},
					"children": [
						{
							"id": 1221,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1215,
							"name": "httpsCallable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1216,
									"name": "httpsCallable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets an `HttpsCallable` instance that refers to the function with the given\nname.",
										"text": "#### Example\n\n```js\nconst instance = firebase.functions().httpsCallable('order');\n\ntry {\n const response = await instance({\n   id: '12345',\n });\n} catch (e) {\n console.error(e);\n}\n```\n",
										"returns": "The `HttpsCallable` instance.\n"
									},
									"parameters": [
										{
											"id": 1217,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name of the https callable function."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpsCallable",
										"id": 1184
									}
								}
							],
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 314,
									"character": 17
								}
							]
						},
						{
							"id": 1218,
							"name": "useFunctionsEmulator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1219,
									"name": "useFunctionsEmulator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Changes this instance to point to a Cloud Functions emulator running\nlocally.",
										"text": "See https://firebase.google.com/docs/functions/local-emulator\n\n#### Example\n\n```js\nif (__DEV__) {\n  firebase.functions().useFunctionsEmulator('http://10.0.0.8:1337');\n}\n```\n"
									},
									"parameters": [
										{
											"id": 1220,
											"name": "origin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The origin string of the local emulator started via firebase tools\n\"http://10.0.0.8:1337\".\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 333,
									"character": 24
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1221
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1215,
								1218
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 292,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1184,
					"name": "HttpsCallable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An HttpsCallable is a reference to a \"callable\" http trigger in\nGoogle Cloud Functions.",
						"text": "#### Example\n\n```js\n// Create a HttpsCallable instance\nconst instance = firebase.functions().httpsCallable('order');\n\ntry {\n const response = await instance({\n   id: '12345',\n });\n} catch (e) {\n console.error(e);\n}\n```\n"
					},
					"signatures": [
						{
							"id": 1185,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An HttpsCallable is a reference to a \"callable\" http trigger in\nGoogle Cloud Functions.",
								"text": "#### Example\n\n```js\n// Create a HttpsCallable instance\nconst instance = firebase.functions().httpsCallable('order');\n\ntry {\n const response = await instance({\n   id: '12345',\n });\n} catch (e) {\n console.error(e);\n}\n```\n"
							},
							"parameters": [
								{
									"id": 1186,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HttpsCallableResult",
										"id": 1182
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 142,
							"character": 32
						}
					]
				},
				{
					"id": 1182,
					"name": "HttpsCallableResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An HttpsCallableResult wraps a single result from a function call."
					},
					"children": [
						{
							"id": 1183,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 120,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1183
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 119,
							"character": 38
						}
					]
				},
				{
					"id": 1187,
					"name": "HttpsError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An HttpsError wraps a single error from a function call.",
						"text": "#### Example\n\n```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n  console.log('Message', httpsError.message);\n\n  // Check code\n  if (httpsError.code === firebase.functions.HttpsErrorCode.NOT_FOUND) {\n    console.error('Functions endpoint \"order\" not found');\n  }\n}\n```\n"
					},
					"children": [
						{
							"id": 1193,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						},
						{
							"id": 1188,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A standard error code that will be returned to the client. This also\ndetermines the HTTP status code of the response, as defined in code.proto.",
								"text": "#### Example\n\n```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n  console.error(httpsError.code);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 179,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionsErrorCode",
								"id": 1222
							}
						},
						{
							"id": 1189,
							"name": "details",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Extra data to be converted to JSON and included in the error response.",
								"text": "```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n  if (httpsError.details) {\n    console.error(httpsError.details);\n  }\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 193,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1191,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 964,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 1190,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 963,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 1192,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 965,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1193,
								1188,
								1189,
								1191,
								1190,
								1192
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 164,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 1194,
					"name": "HttpsErrorCode",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The HttpsErrorCode interface provides access to all FunctionsErrorCode\ntype aliases.",
						"text": "#### Example\n\n```js\ntry {\n await firebase.functions().httpsCallable('order')();\n} catch (httpsError) {\n switch(httpsError.code) {\n   case firebase.functions.HttpsErrorCode.NOT_FOUND:\n     console.error('Functions endpoint not found');\n     break;\n   case firebase.functions.HttpsErrorCode.CANCELLED:\n     console.error('The operation was cancelled');\n     break;\n   default:\n     console.error('An error occurred');\n     break;\n }\n}\n```\n"
					},
					"children": [
						{
							"id": 1206,
							"name": "ABORTED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 232,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "aborted"
							}
						},
						{
							"id": 1201,
							"name": "ALREADY_EXISTS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 227,
									"character": 18
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "already-exists"
							}
						},
						{
							"id": 1196,
							"name": "CANCELLED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 222,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "cancelled"
							}
						},
						{
							"id": 1211,
							"name": "DATA_LOSS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 237,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "data-loss"
							}
						},
						{
							"id": 1199,
							"name": "DEADLINE_EXCEEDED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 225,
									"character": 21
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "deadline-exceeded"
							}
						},
						{
							"id": 1205,
							"name": "FAILED_PRECONDITION",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 231,
									"character": 23
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "failed-precondition"
							}
						},
						{
							"id": 1209,
							"name": "INTERNAL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 235,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "internal"
							}
						},
						{
							"id": 1198,
							"name": "INVALID_ARGUMENT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 224,
									"character": 20
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "invalid-argument"
							}
						},
						{
							"id": 1200,
							"name": "NOT_FOUND",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 226,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "not-found"
							}
						},
						{
							"id": 1195,
							"name": "OK",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 221,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "ok"
							}
						},
						{
							"id": 1207,
							"name": "OUT_OF_RANGE",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 233,
									"character": 16
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "out-of-range"
							}
						},
						{
							"id": 1202,
							"name": "PERMISSION_DENIED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 228,
									"character": 21
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "permission-denied"
							}
						},
						{
							"id": 1204,
							"name": "RESOURCE_EXHAUSTED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 230,
									"character": 22
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "resource-exhausted"
							}
						},
						{
							"id": 1203,
							"name": "UNAUTHENTICATED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 229,
									"character": 19
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unauthenticated"
							}
						},
						{
							"id": 1210,
							"name": "UNAVAILABLE",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 236,
									"character": 15
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unavailable"
							}
						},
						{
							"id": 1208,
							"name": "UNIMPLEMENTED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 234,
									"character": 17
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unimplemented"
							}
						},
						{
							"id": 1197,
							"name": "UNKNOWN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 223,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1206,
								1201,
								1196,
								1211,
								1199,
								1205,
								1209,
								1198,
								1200,
								1195,
								1207,
								1202,
								1204,
								1203,
								1210,
								1208,
								1197
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 220,
							"character": 33
						}
					]
				},
				{
					"id": 1212,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "firebase.functions.X"
					},
					"children": [
						{
							"id": 1213,
							"name": "HttpsErrorCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Uppercase + underscored variables of {@link functions.FunctionsErrorCode}",
								"text": "#### Example\n\n```js\nfirebase.functions.HttpsErrorCode.OK;\nfirebase.functions.HttpsErrorCode.NOT_FOUND;\n```\n"
							},
							"sources": [
								{
									"fileName": "functions/lib/index.d.ts",
									"line": 254,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "HttpsErrorCode",
								"id": 1194
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1213
							]
						}
					],
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 243,
							"character": 26
						}
					]
				},
				{
					"id": 1222,
					"name": "FunctionsErrorCode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "functions/lib/index.d.ts",
							"line": 97,
							"character": 32
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "ok"
							},
							{
								"type": "stringLiteral",
								"value": "cancelled"
							},
							{
								"type": "stringLiteral",
								"value": "unknown"
							},
							{
								"type": "stringLiteral",
								"value": "invalid-argument"
							},
							{
								"type": "stringLiteral",
								"value": "deadline-exceeded"
							},
							{
								"type": "stringLiteral",
								"value": "not-found"
							},
							{
								"type": "stringLiteral",
								"value": "already-exists"
							},
							{
								"type": "stringLiteral",
								"value": "permission-denied"
							},
							{
								"type": "stringLiteral",
								"value": "resource-exhausted"
							},
							{
								"type": "stringLiteral",
								"value": "failed-precondition"
							},
							{
								"type": "stringLiteral",
								"value": "aborted"
							},
							{
								"type": "stringLiteral",
								"value": "out-of-range"
							},
							{
								"type": "stringLiteral",
								"value": "unimplemented"
							},
							{
								"type": "stringLiteral",
								"value": "internal"
							},
							{
								"type": "stringLiteral",
								"value": "unavailable"
							},
							{
								"type": "stringLiteral",
								"value": "data-loss"
							},
							{
								"type": "stringLiteral",
								"value": "unauthenticated"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1214
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1184,
						1182,
						1187,
						1194,
						1212
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1222
					]
				}
			],
			"sources": [
				{
					"fileName": "functions/lib/index.d.ts",
					"line": 56,
					"character": 26
				}
			]
		},
		{
			"id": 1232,
			"name": "Iid",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Instance ID package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `iid` package:\n\n```js\nimport { firebase } from '@react-native-firebase/iid';\n\n// firebase.iid().X\n```\n\n#### Example 2\n\nUsing the default export from the `iid` package:\n\n```js\nimport iid from '@react-native-firebase/iid';\n\n// iid().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/iid';\n\n// firebase.iid().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "iid\n"
					}
				]
			},
			"children": [
				{
					"id": 1234,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Instance ID service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Instance ID service for the default app:\n\n```js\nconst defaultAppIid = firebase.iid();\n```\n"
					},
					"children": [
						{
							"id": 1247,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1237,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1238,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Delete the Instance ID and all data associated with it. This stops the periodic sending of data to the Firebase\nbackend that was started when the Instance ID was generated.",
										"text": "A new Instance ID is asynchronously generated unless auto initialisation is turned off.\n\n#### Example\n\n```js\nawait firebase.iid().delete();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 101,
									"character": 10
								}
							]
						},
						{
							"id": 1243,
							"name": "deleteToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1244,
									"name": "deleteToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Revokes access to a scope for an entity previously authorized by `getToken()`.",
										"text": "#### Example\n\n```js\nawait firebase.iid().deleteToken(firebase.app().options.storageBucket, '*');\n```\n"
									},
									"parameters": [
										{
											"id": 1245,
											"name": "authorizedEntity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Entity authorized by the token. Defaults to the apps' `messagingSenderId` option."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1246,
											"name": "scope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Action authorized for authorizedEntity. Defaults to '*'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 129,
									"character": 15
								}
							]
						},
						{
							"id": 1235,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1236,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a identifier that uniquely identifies the app instance.",
										"text": "Once an Instance ID is generated, Firebase periodically sends information about the application\nand the device it's running on to the Firebase backend. To stop this, see `delete()`.\n\n#### Example\n\n```js\nconst id = firebase.iid().get();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 87,
									"character": 7
								}
							]
						},
						{
							"id": 1239,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1240,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a token that authorizes an Entity to perform an action on behalf of the application.",
										"text": "#### Example\n\n```js\nconst token = await firebase.iid().getToken(firebase.app().options.storageBucket, '*');\n```\n"
									},
									"parameters": [
										{
											"id": 1241,
											"name": "authorizedEntity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Entity authorized by the token. Defaults to the apps `messagingSenderId` option."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1242,
											"name": "scope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Action authorized for authorizedEntity. Defaults to '*'.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "iid/lib/index.d.ts",
									"line": 115,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1247
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1237,
								1243,
								1235,
								1239
							]
						}
					],
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 74,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1233,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "iid/lib/index.d.ts",
							"line": 59,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1234
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1233
					]
				}
			],
			"sources": [
				{
					"fileName": "iid/lib/index.d.ts",
					"line": 56,
					"character": 20
				}
			]
		},
		{
			"id": 1255,
			"name": "Indexing",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Indexing package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `indexing` package:\n\n```js\nimport { firebase } from '@react-native-firebase/indexing';\n\n// firebase.indexing().X\n```\n\n#### Example 2\n\nUsing the default export from the `indexing` package:\n\n```js\nimport indexing from '@react-native-firebase/indexing';\n\n// indexing().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/indexing';\n\n// firebase.indexing().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "indexing\n"
					}
				]
			},
			"children": [
				{
					"id": 1257,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Indexing service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Indexing service for the default app:\n\n```js\nconst defaultAppIndexing = firebase.indexing();\n```\n"
					},
					"children": [
						{
							"id": 1263,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1258,
							"name": "getInitialURL",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1259,
									"name": "getInitialURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If the application was launched via a deep link URL, the URL is returned, otherwise\nvalue is `null`."
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "indexing/lib/index.d.ts",
									"line": 80,
									"character": 17
								}
							]
						},
						{
							"id": 1260,
							"name": "onOpenURL",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1261,
									"name": "onOpenURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listen to deep link URL events which the application handles. The URL is passed to the\nprovided listener function.",
										"text": "Returns an unsubscribe function.\n"
									},
									"parameters": [
										{
											"id": 1262,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function called when a deep link URL is handled for this app.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "indexing/lib/index.d.ts",
									"line": 90,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1263
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1258,
								1260
							]
						}
					],
					"sources": [
						{
							"fileName": "indexing/lib/index.d.ts",
							"line": 75,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1256,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "indexing/lib/index.d.ts",
							"line": 59,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1257
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1256
					]
				}
			],
			"sources": [
				{
					"fileName": "indexing/lib/index.d.ts",
					"line": 56,
					"character": 25
				}
			]
		},
		{
			"id": 1271,
			"name": "Invites",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Invites package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `invites` package:\n\n```js\nimport { firebase } from '@react-native-firebase/invites';\n\n// firebase.invites().X\n```\n\n#### Example 2\n\nUsing the default export from the `invites` package:\n\n```js\nimport invites from '@react-native-firebase/invites';\n\n// invites().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/invites';\n\n// firebase.invites().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "invites\n"
					}
				]
			},
			"children": [
				{
					"id": 1277,
					"name": "AndroidInviteBuilder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Android Invite representation. Instance is returned from {@link links.InviteBuilder#android}."
					},
					"children": [
						{
							"id": 1278,
							"name": "setAdditionalReferralParameters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1279,
									"name": "setAdditionalReferralParameters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds query parameters to the play store referral URL when the app needs additional referral parameters for other\napplication component referrals. These parameters are added to the referral URL sent from the play store and are\navailable to be processed by other application components, for example Google Analytics. The parameters are set\nas name, value pairs that will be set as query parameter name and value on the referral URL.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setAdditionalReferralParameters({\n  screen: 'Profile',\n});\n```\n"
									},
									"parameters": [
										{
											"id": 1280,
											"name": "additionalReferralParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Referral parameters defined as string name value pairs.\n"
											},
											"type": {
												"type": "reference",
												"name": "AdditionalReferralParameters",
												"id": 1274
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 106,
									"character": 35
								}
							]
						},
						{
							"id": 1281,
							"name": "setEmailHtmlContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1282,
									"name": "setEmailHtmlContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the HTML-formatted (UTF-8 encoded, no JavaScript) content for invites sent through email. If set, this will\nbe sent instead of the default email.",
										"text": "emailHtmlContent must be valid HTML for standard email processing. The pattern `%%APPINVITE_LINK_PLACEHOLDER%%`\nshould be embedded in your htmlContent and will be replaced with the invitation URL.\nThis url is a link that will launch the app if already installed or take the user to the appropriate app store\nif not. In both cases the deep link will be available if provided using setDeepLink(Uri).\n\n> Cannot be used with {@link invites.InviteBuilder#setCallToActionText}\n\n#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setEmailHtmlContent('<p><strong>Rich HTML content</strong></p>');\n```\n"
									},
									"parameters": [
										{
											"id": 1283,
											"name": "emailHtmlContent",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The html-formatted content for the email.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 130,
									"character": 23
								}
							]
						},
						{
							"id": 1284,
							"name": "setEmailSubject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1285,
									"name": "setEmailSubject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the subject for invites sent by email.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.emailSubject(`Hey ${user.name}, joint my app!`);\n```\n"
									},
									"parameters": [
										{
											"id": 1286,
											"name": "emailSubject",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The subject for the email.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 144,
									"character": 19
								}
							]
						},
						{
							"id": 1287,
							"name": "setGoogleAnalyticsTrackingId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1288,
									"name": "setGoogleAnalyticsTrackingId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the Google Analytics Tracking id. The tracking id should be created for the calling application under\nGoogle Analytics. See more about how to get a tracking id . The tracking id is recommended so that invitations\nsent from the calling application are available in Google Analytics.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setGoogleAnalyticsTrackingId('UA-1234-5');\n```\n"
									},
									"parameters": [
										{
											"id": 1289,
											"name": "gaTrackingId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "String of the form UA-xxxx-y\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 160,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1278,
								1281,
								1284,
								1287
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 88,
							"character": 35
						}
					]
				},
				{
					"id": 1290,
					"name": "InviteBuilder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Invite builder representation returned from {@link invites#createInvitation}."
					},
					"children": [
						{
							"id": 1291,
							"name": "android",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Set Android specific Invite properties",
								"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setGoogleAnalyticsTrackingId('UA-1234-5');\n```\n"
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 177,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "AndroidInviteBuilder",
								"id": 1277
							}
						},
						{
							"id": 1292,
							"name": "setAndroidClientId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1293,
									"name": "setAndroidClientId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the Android target client ID for the invitation.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setAndroidClientId('xxxxxxxxxxxx');\n```\n"
									},
									"parameters": [
										{
											"id": 1294,
											"name": "androidClientId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The android client ID.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 191,
									"character": 22
								}
							]
						},
						{
							"id": 1295,
							"name": "setAndroidMinimumVersionCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1296,
									"name": "setAndroidMinimumVersionCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the minimum version of the android app installed on the receiving device. If this minimum version is not installed then the install flow will be triggered.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setAndroidMinimumVersionCode(18);\n```\n"
									},
									"parameters": [
										{
											"id": 1297,
											"name": "androidMinimumVersionCode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Minimum version of the android app.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 205,
									"character": 32
								}
							]
						},
						{
							"id": 1298,
							"name": "setCallToActionText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1299,
									"name": "setCallToActionText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Text shown on the email invitation for the user to accept the invitation. Default install text used if not set.",
										"text": "> Cannot be used with {@link invites.AndroidInviteBuilder#setEmailHtmlContent}.\n\n#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setCallToActionText('Join the app!');\n```\n"
									},
									"parameters": [
										{
											"id": 1300,
											"name": "callToActionText",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Text to use on the invitation button.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 221,
									"character": 23
								}
							]
						},
						{
							"id": 1301,
							"name": "setCustomImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1302,
									"name": "setCustomImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets an image for invitations.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setCustomImage('https://my-cdn.com/assets/invites.png');\n```\n"
									},
									"parameters": [
										{
											"id": 1303,
											"name": "customImage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The image Uri. The Uri is required to be in absolute format. The supported image formats are \"jpg\", \"jpeg\" and \"png\".\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 235,
									"character": 18
								}
							]
						},
						{
							"id": 1304,
							"name": "setDeepLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1305,
									"name": "setDeepLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the deep link that is made available to the app when opened from the invitation. This deep link is made\navailable both to a newly installed application and an already installed application. The deep link can be sent\nto Android and other platforms so should be formatted to support deep links across platforms.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.deepLink('/invites');\n```\n"
									},
									"parameters": [
										{
											"id": 1306,
											"name": "deepLink",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The app deep link.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 251,
									"character": 15
								}
							]
						},
						{
							"id": 1307,
							"name": "setIOSClientId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1308,
									"name": "setIOSClientId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the iOS target client ID for the invitation.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.setIOSClientId('xxxxxxxxxxxx');\n```\n"
									},
									"parameters": [
										{
											"id": 1309,
											"name": "iOSClientId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The iOS client ID.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 265,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1291
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1292,
								1295,
								1298,
								1301,
								1304,
								1307
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 166,
							"character": 28
						}
					]
				},
				{
					"id": 1313,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Invites service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Invites service for the default app:\n\n```js\nconst defaultAppInvites = firebase.invites();\n```\n"
					},
					"children": [
						{
							"id": 1326,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1314,
							"name": "createInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1315,
									"name": "createInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create an invitation via an InvitationBuilder instance.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app and share content');\n```\n"
									},
									"parameters": [
										{
											"id": 1316,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The title displayed in the invitation."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1317,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The message displayed in the invitation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InviteBuilder",
										"id": 1290
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 349,
									"character": 20
								}
							]
						},
						{
							"id": 1321,
							"name": "getInitialInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1322,
									"name": "getInitialInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the Invitation that the app has been launched from. If the app was not launched from an Invitation the\nreturn value will be null.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().getInitialInvitation();\n\nif (invite) {\n console.log('Deeplink: ', invite.deepLink);\n console.log('ID: ', invite.invitationId);\n}\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "NativeInvite",
												"id": 1310
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 388,
									"character": 24
								}
							]
						},
						{
							"id": 1318,
							"name": "onInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1319,
									"name": "onInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "When an invitation is opened whilst the app is open, the listener is invoked with the invitation.\nReturns a function that when called unsubscribes the listener from further events.",
										"text": "#### Example\n\n```js\nfunction handleInvitation({ deepLink, invitationId}) {\n  console.log('Deeplink: ', deepLink);\n  console.log('ID: ', invitationId);\n}\n\nconst subscriber = firebase.invites().onInvitation(handleInvitation);\n\n// Unsubscribe from invitation listener\nsubscriber();\n```\n"
									},
									"parameters": [
										{
											"id": 1320,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function called when an invitation is opened.\n"
											},
											"type": {
												"type": "reference",
												"name": "InviteListener",
												"id": 1327
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 371,
									"character": 16
								}
							]
						},
						{
							"id": 1323,
							"name": "sendInvitation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1324,
									"name": "sendInvitation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Displays the invitation dialog which allows the user to select who received the invitation.\nReturns a promise that resolves with the created invitation IDs if the invitation is sent, otherwise it is\nrejected with an error.",
										"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app and share content');\nconst ids = await firebase.invites().sendInvitation(invite);\n```\n"
									},
									"parameters": [
										{
											"id": 1325,
											"name": "invite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The invitation to send. Must be an instance of InviteBuilder\n"
											},
											"type": {
												"type": "reference",
												"name": "InviteBuilder",
												"id": 1290
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 404,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1326
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1314,
								1321,
								1318,
								1323
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 336,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1274,
					"name": "AdditionalReferralParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Additional referral parameters for {@link invites.AndroidInviteBuilder#setAdditionalReferralParameters}.",
						"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setAdditionalReferralParameters({\n  screen: 'Profile',\n});\n```\n"
					},
					"indexSignature": [
						{
							"id": 1275,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "Additional referral parameters for {@link invites.AndroidInviteBuilder#setAdditionalReferralParameters}.",
								"text": "#### Example\n\n```js\nconst invite = firebase.invites().createInvitation('Join my app', 'Join my app with me and share content!');\ninvite.android.setAdditionalReferralParameters({\n  screen: 'Profile',\n});\n```\n"
							},
							"parameters": [
								{
									"id": 1276,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 81,
							"character": 47
						}
					]
				},
				{
					"id": 1310,
					"name": "NativeInvite",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A native invite representation returned from getInitialInvite and onInvite.",
						"text": "#### Example 1\n\nWhen an invitation has been opened from a closed/terminated app.\n\n```js\nconst invite = firebase.invites().getInitialInvitation();\n\nif (invite) {\n  console.log('Deeplink: ', invite.deepLink);\n  console.log('ID: ', invite.invitationId);\n}\n```\n\n#### Example 2\n\nWhen an invite has been opened and the app is running.\n\n```js\n function handleInvitation({ deepLink, invitationId}) {\n  console.log('Deeplink: ', deepLink);\n  console.log('ID: ', invitationId);\n }\n\n firebase.invites().onInvitation(handleInvitation);\n```\n"
					},
					"children": [
						{
							"id": 1311,
							"name": "deepLink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The deepLink that should be opened within the application."
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 301,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1312,
							"name": "invitationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ID of the invitation that was opened."
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 306,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1311,
								1312
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 297,
							"character": 31
						}
					]
				},
				{
					"id": 1272,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "firebase.invites.X"
					},
					"children": [
						{
							"id": 1273,
							"name": "Invitation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Invitation returns an `InviteBuilder` instance used to send new invites."
							},
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 66,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "InviteBuilder",
								"id": 1290
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1273
							]
						}
					],
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 62,
							"character": 26
						}
					]
				},
				{
					"id": 1327,
					"name": "InviteListener",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type alias for an invite listener used with {@link invites#onInvitation}",
						"text": "#### Example\n\n```js\nfirebase.invites().onInvitation((invite) => {\n  console.log('Deeplink: ', invite.deepLink);\n  console.log('ID: ', invite.invitationId);\n});\n```\n"
					},
					"sources": [
						{
							"fileName": "invites/lib/index.d.ts",
							"line": 321,
							"character": 28
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1328,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 1329,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1330,
											"name": "nativeInvite",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NativeInvite",
												"id": 1310
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "invites/lib/index.d.ts",
									"line": 321,
									"character": 30
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1277,
						1290,
						1313
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1274,
						1310,
						1272
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1327
					]
				}
			],
			"sources": [
				{
					"fileName": "invites/lib/index.d.ts",
					"line": 56,
					"character": 24
				}
			]
		},
		{
			"id": 1338,
			"name": "Links",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Links",
				"tags": [
					{
						"tag": "firebase",
						"text": "links\n"
					}
				]
			},
			"children": [
				{
					"id": 1424,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Dynamic Links service is available for the default app only.",
						"text": "#### Example 1\n\nGet the links instance for the **default app**:\n\n```js\nconst links = firebase.links();\n```\n"
					},
					"children": [
						{
							"id": 1448,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1429,
							"name": "buildLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1430,
									"name": "buildLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a Dynamic Link from the provided DynamicLinkParameters instances.",
										"text": "#### Example\n\n```js\nconst linkParams = firebase.links()\n  .newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\n\nlinkParams.analytics.setCampaign('banner');\n\nconst link = await firebase.links().buildLink(linkParams);\n```\n"
									},
									"parameters": [
										{
											"id": 1431,
											"name": "dynamicLinkParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An instance of DynamicLinkParameters created via `newDynamicLinkParameters`\n"
											},
											"type": {
												"type": "reference",
												"name": "DynamicLinkParameters",
												"id": 1411
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 450,
									"character": 13
								}
							]
						},
						{
							"id": 1435,
							"name": "buildShortLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1436,
									"name": "buildShortLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Builds a short Dynamic Link from the provided DynamicLinkParameters instances.",
										"text": " ```js\nconst linkParams = firebase.links()\n  .newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\n\nlinkParams.analytics.setCampaign('banner');\n\nconst link = await firebase.links().buildShortLink(\n  linkParams,\n  firebase.links.ShortLinkType.UNGUESSABLE,\n);\n```\n"
									},
									"parameters": [
										{
											"id": 1437,
											"name": "dynamicLinkParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An instance of DynamicLinkParameters created via `newDynamicLinkParameters`"
											},
											"type": {
												"type": "reference",
												"name": "DynamicLinkParameters",
												"id": 1411
											}
										},
										{
											"id": 1438,
											"name": "shortLinkType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The short link type, one of `ShortLinkType` from `firebase.links.ShortLinkType`\n"
											},
											"type": {
												"type": "reference",
												"name": "ShortLinkType",
												"id": 1418
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 478,
									"character": 18
								}
							]
						},
						{
							"id": 1432,
							"name": "createDynamicLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1433,
									"name": "createDynamicLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**Deprecated**: Creates a link from the provided DynamicLinkParameters instances.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use `buildLink` with the same args instead."
											}
										]
									},
									"parameters": [
										{
											"id": 1434,
											"name": "dynamicLinkParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An instance of DynamicLinkParameters created via `newDynamicLinkParameters`\n"
											},
											"type": {
												"type": "reference",
												"name": "DynamicLinkParameters",
												"id": 1411
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 458,
									"character": 21
								}
							]
						},
						{
							"id": 1439,
							"name": "createShortDynamicLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1440,
									"name": "createShortDynamicLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**Deprecated**: Creates a short Dynamic Link from the provided DynamicLinkParameters instances.",
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use `buildShortLink` with the same args instead."
											}
										]
									},
									"parameters": [
										{
											"id": 1441,
											"name": "dynamicLinkParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An instance of DynamicLinkParameters created via `newDynamicLinkParameters`"
											},
											"type": {
												"type": "reference",
												"name": "DynamicLinkParameters",
												"id": 1411
											}
										},
										{
											"id": 1442,
											"name": "shortLinkType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The short link type, one of `ShortLinkType` from `firebase.links.ShortLinkType`\n"
											},
											"type": {
												"type": "reference",
												"name": "ShortLinkType",
												"id": 1418
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 490,
									"character": 26
								}
							]
						},
						{
							"id": 1443,
							"name": "getInitialLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1444,
									"name": "getInitialLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the URL that the app has been launched from. If the app was not launched from a URL the return value will be null.",
										"text": "> Use {@link auth#isSignInWithEmailLink} to check if an inbound dynamic link is an email sign-in link.\n\n#### Example\n\n```js\nasync function bootstrapApp() {\n   await initialLink = await firebase.links().getInitialLink();\n\n   if (initialLink) {\n     // Handle dynamic link inside your own application\n     if (initialLink === 'https://invertase.io/offer') return navigateTo('/offers')\n   }\n}\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 513,
									"character": 18
								}
							]
						},
						{
							"id": 1425,
							"name": "newDynamicLinkParameters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1426,
									"name": "newDynamicLinkParameters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates new parameters which enhance the functionality of a created link.",
										"text": "To create a DynamicLinkParameters, first populate it by using the setX methods available on the `DynamicLinkParameters` builder classes,\nthen pass it to `firebase.links().buildLink(linkParams)` or `firebase.links().buildShortLink(linkParams, type)`.\n\n#### Example\n\n```js\nconst linkParams = firebase.links()\n   .newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\n\nlinkParams.analytics.setCampaign('banner');\n\nconst link = await firebase.links().buildShortLink(\n  linkParams,\n  firebase.links.ShortLinkType.UNGUESSABLE,\n);\n```\n"
									},
									"parameters": [
										{
											"id": 1427,
											"name": "link",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link the target app will open. You can specify any URL the app can handle, such as a link to the app’s content, or a URL that initiates some app-specific logic such as crediting the user with a coupon, or displaying a specific welcome screen. This link must be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1428,
											"name": "domainURIPrefix",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Domain URI Prefix of your App. This value must be your assigned domain from the Firebase console. (e.g. https://xyz.page.link) The domain URI prefix must start with a valid HTTPS scheme (https://).\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 432,
									"character": 28
								}
							]
						},
						{
							"id": 1445,
							"name": "onLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1446,
									"name": "onLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Subscribe to URL open events while the app is still running.",
										"text": "The listener is called from URL open events whilst the app is still running, use\n{@link links#getInitialLink} for URLs which cause the app to open from a previously closed / not running state.\n\n#### Example\n\n```jsx\nfunction App() {\n  const handleDynamicLink = (link) => {\n    // Handle dynamic link inside your own application\n    if (link === 'https://invertase.io/offer') return navigateTo('/offers')\n  };\n\n  useEffect(() => {\n    const unsubscribe = firebase.links().onLink(handleDynamicLink);\n    // When the component unmounts, remove the listener\n    return unsubscribe;\n  }, []);\n\n  return <YourApp />;\n}\n```\n",
										"returns": "Unsubscribe function, call the returned function to unsubscribe from all future events."
									},
									"parameters": [
										{
											"id": 1447,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The listener callback, called URL open events.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 543,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1448
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1429,
								1435,
								1432,
								1439,
								1443,
								1425,
								1445
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 408,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1339,
					"name": "DynamicLinkAnalyticsParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The DynamicLinkAnalyticsParameters interface provides functionality to add Google Analytic\nbased parameters to a dynamic link.",
						"text": "#### Example\n\n```js\nconst linkParams = firebase.links().newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\nlinkParams\n   .analytics.setCampaign('banner')\n   .analytics.setContent('Click Me');\n\n const link = await firebase.links().buildLink(linkParams);\n```\n"
					},
					"children": [
						{
							"id": 1340,
							"name": "setCampaign",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1341,
									"name": "setCampaign",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the campaign name."
									},
									"parameters": [
										{
											"id": 1342,
											"name": "campaign",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The campaign name; The individual campaign name, slogan, promo code, etc. for a product.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 49,
									"character": 15
								}
							]
						},
						{
							"id": 1343,
							"name": "setContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1344,
									"name": "setContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the campaign content."
									},
									"parameters": [
										{
											"id": 1345,
											"name": "content",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The campaign content; used for A/B testing and content-targeted ads to differentiate ads or links that point to the same URL.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 56,
									"character": 14
								}
							]
						},
						{
							"id": 1346,
							"name": "setMedium",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1347,
									"name": "setMedium",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the campaign medium."
									},
									"parameters": [
										{
											"id": 1348,
											"name": "medium",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The campaign medium; used to identify a medium such as email or cost-per-click (cpc).\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 63,
									"character": 13
								}
							]
						},
						{
							"id": 1349,
							"name": "setSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1350,
									"name": "setSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the campaign source."
									},
									"parameters": [
										{
											"id": 1351,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The campaign source; used to identify a search engine, newsletter, or other source.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 70,
									"character": 13
								}
							]
						},
						{
							"id": 1352,
							"name": "setTerm",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1353,
									"name": "setTerm",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the campaign term."
									},
									"parameters": [
										{
											"id": 1354,
											"name": "term",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The campaign term; used with paid search to supply the keywords for ads.\n\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 78,
									"character": 11
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1340,
								1343,
								1346,
								1349,
								1352
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 43,
							"character": 49
						}
					]
				},
				{
					"id": 1355,
					"name": "DynamicLinkAndroidParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The DynamicLinkAndroidParameters interface provides functionality to configure the behaviour\nof dynamic links for Android devices.",
						"text": "If any parameter is declared then the Android package name must also be set via `setPackageName`\n\n#### Example\n\n```js\nconst linkParams = firebase.links().newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\nlinkParams\n  .android.setPackageName('io.invertase.testing')\n  .android.setMinimumVersion('18');\n\n const link = await firebase.links().buildLink(linkParams);\n```\n"
					},
					"children": [
						{
							"id": 1356,
							"name": "setFallbackUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1357,
									"name": "setFallbackUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the link to open when the app isn't installed. Specify this to do something other than install your app from\nthe Play Store when the app isn't installed, such as open the mobile web version of the content, or display a\npromotional page for your app."
									},
									"parameters": [
										{
											"id": 1358,
											"name": "fallbackUrl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link to open on Android if the app is not installed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 106,
									"character": 18
								}
							]
						},
						{
							"id": 1359,
							"name": "setMinimumVersion",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1360,
									"name": "setMinimumVersion",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the version code of the minimum version of your app that can open the link."
									},
									"parameters": [
										{
											"id": 1361,
											"name": "minimumVersion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The minimum version.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 113,
									"character": 21
								}
							]
						},
						{
							"id": 1362,
							"name": "setPackageName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1363,
									"name": "setPackageName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the Android package name."
									},
									"parameters": [
										{
											"id": 1364,
											"name": "packageName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The package name of the Android app to use to open the link. The app must be connected to your project from the Overview page of the Firebase console.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 120,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1356,
								1359,
								1362
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 98,
							"character": 47
						}
					]
				},
				{
					"id": 1365,
					"name": "DynamicLinkIOSParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The DynamicLinkIOSParameters interface provides functionality to configure the behaviour\nof dynamic links for iOS devices.",
						"text": "If any parameter is declared then the iOS BundleId must also be set via `setBundleId`\n\n#### Example\n\n```js\nconst linkParams = firebase.links().newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\nlinkParams\n  .ios.setBundleId('io.invertase.testing')\n  .ios.setAppStoreId('123456789')\n  .ios.setMinimumVersion('18');\n\n const link = await firebase.links().buildLink(linkParams);\n```\n"
					},
					"children": [
						{
							"id": 1366,
							"name": "setAppStoreId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1367,
									"name": "setAppStoreId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the App Store ID, used to send users to the App Store when the app isn't installed."
									},
									"parameters": [
										{
											"id": 1368,
											"name": "appStoreId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The App Store ID.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 147,
									"character": 17
								}
							]
						},
						{
							"id": 1369,
							"name": "setBundleId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1370,
									"name": "setBundleId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the iOS bundle ID."
									},
									"parameters": [
										{
											"id": 1371,
											"name": "bundleId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The bundle ID of the iOS app to use to open the link. The app must be connected to your project from the Overview page of the Firebase console.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 154,
									"character": 15
								}
							]
						},
						{
							"id": 1372,
							"name": "setCustomScheme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1373,
									"name": "setCustomScheme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the app's custom URL scheme, if defined to be something other than your app's parameters ID."
									},
									"parameters": [
										{
											"id": 1374,
											"name": "customScheme",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The app's custom URL scheme.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 161,
									"character": 19
								}
							]
						},
						{
							"id": 1375,
							"name": "setFallbackUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1376,
									"name": "setFallbackUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the link to open when the app isn't installed. Specify this to do something other than install your app from\nthe App Store when the app isn't installed, such as open the mobile web version of the content, or display a\npromotional page for your app."
									},
									"parameters": [
										{
											"id": 1377,
											"name": "fallbackUrl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link to open on iOS if the app is not installed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 170,
									"character": 18
								}
							]
						},
						{
							"id": 1378,
							"name": "setIPadBundleId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1379,
									"name": "setIPadBundleId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the bundle ID of the iOS app to use on iPads to open the link. The app must be connected to your project\nfrom the Overview page of the Firebase console."
									},
									"parameters": [
										{
											"id": 1380,
											"name": "iPadBundleId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The iPad parameters ID of the app.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 178,
									"character": 19
								}
							]
						},
						{
							"id": 1381,
							"name": "setIPadFallbackUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1382,
									"name": "setIPadFallbackUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the link to open on iPads when the app isn't installed. Specify this to do something other than install your\napp from the App Store when the app isn't installed, such as open the web version of the content, or display a\npromotional page for your app. Overrides the fallback link set by `setFallbackUrl` on iPad."
									},
									"parameters": [
										{
											"id": 1383,
											"name": "iPadFallbackUrl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The link to open on iPad if the app is not installed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 187,
									"character": 22
								}
							]
						},
						{
							"id": 1384,
							"name": "setMinimumVersion",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1385,
									"name": "setMinimumVersion",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the minimum version of your app that can open the link."
									},
									"parameters": [
										{
											"id": 1386,
											"name": "minimumVersion",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The minimum version.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 194,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1366,
								1369,
								1372,
								1375,
								1378,
								1381,
								1384
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 141,
							"character": 43
						}
					]
				},
				{
					"id": 1387,
					"name": "DynamicLinkITunesParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The DynamicLinkITunesParameters interface provides functionality to add iTunes Connect Analytics\nbased parameters to the created dynamic link.",
						"text": "#### Example\n\n```js\nconst linkParams = firebase.links().newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\nlinkParams\n  .itunes.setAffiliateToken('ABCDEFG');\n\n const link = await firebase.links().buildLink(linkParams);\n```\n"
					},
					"children": [
						{
							"id": 1388,
							"name": "setAffiliateToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1389,
									"name": "setAffiliateToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the affiliate token."
									},
									"parameters": [
										{
											"id": 1390,
											"name": "affiliateToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The affiliate token used to create affiliate-coded links.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 217,
									"character": 21
								}
							]
						},
						{
							"id": 1391,
							"name": "setCampaignToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1392,
									"name": "setCampaignToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the campaign token."
									},
									"parameters": [
										{
											"id": 1393,
											"name": "campaignToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The campaign token that developers can add to any link in order to track sales from a specific marketing campaign.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 224,
									"character": 20
								}
							]
						},
						{
							"id": 1394,
							"name": "setProviderToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1395,
									"name": "setProviderToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the provider token."
									},
									"parameters": [
										{
											"id": 1396,
											"name": "providerToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The provider token that enables analytics for Dynamic Links from within iTunes Connect.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 231,
									"character": 20
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1388,
								1391,
								1394
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 211,
							"character": 46
						}
					]
				},
				{
					"id": 1397,
					"name": "DynamicLinkNavigationParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The DynamicLinkNavigationParameters interface provides functionality to specify how the navigation\nof the created link is handled.",
						"text": "#### Example\n\n```js\nconst linkParams = firebase.links().newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\nlinkParams\n  .navigation.setForcedRedirectEnabled(true);\n\n const link = await firebase.links().buildLink(linkParams);\n```\n"
					},
					"children": [
						{
							"id": 1398,
							"name": "setForcedRedirectEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1399,
									"name": "setForcedRedirectEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets whether to enable force redirecting or going to the app preview page. Defaults to false."
									},
									"parameters": [
										{
											"id": 1400,
											"name": "forcedRedirectEnabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "If true, app preview page will be disabled and there will be a redirect to the FDL. If false, go to the app preview page.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 254,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1398
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 248,
							"character": 50
						}
					]
				},
				{
					"id": 1411,
					"name": "DynamicLinkParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The DynamicLinkParameters interface provides access to the Dynamic Link builder classes\nused to configure a created link.",
						"text": "#### Example\n\n```js\nconst linkParams = firebase.links()\n  .newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\n\nlinkParams.analytics.setCampaign('banner');\n\nconst link = await firebase.links().buildLink(linkParams);\n```\n"
					},
					"children": [
						{
							"id": 1412,
							"name": "analytics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Access Google Analytics specific link parameters."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 314,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "DynamicLinkAnalyticsParameters",
								"id": 1339
							}
						},
						{
							"id": 1413,
							"name": "android",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Access Android specific link parameters."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 319,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "DynamicLinkAndroidParameters",
								"id": 1355
							}
						},
						{
							"id": 1414,
							"name": "ios",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Access iOS specific link parameters."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 324,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "DynamicLinkIOSParameters",
								"id": 1365
							}
						},
						{
							"id": 1415,
							"name": "itunes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Access iTunes Connect specific link parameters."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 329,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "DynamicLinkITunesParameters",
								"id": 1387
							}
						},
						{
							"id": 1416,
							"name": "navigation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Access navigation specific link parameters."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 334,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DynamicLinkNavigationParameters",
								"id": 1397
							}
						},
						{
							"id": 1417,
							"name": "social",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Access social specific link parameters."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 339,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "DynamicLinkSocialParameters",
								"id": 1401
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1412,
								1413,
								1414,
								1415,
								1416,
								1417
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 310,
							"character": 40
						}
					]
				},
				{
					"id": 1401,
					"name": "DynamicLinkSocialParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The DynamicLinkSocialParameters interface provides functionality to add additional social\nmeta-data to the URL.",
						"text": "#### Example\n\n```js\nconst linkParams = firebase.links().newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\nlinkParams\n  .social.setTitle('Social Application')\n  .social.setDescriptionText('A Social Application');\n\n const link = await firebase.links().buildLink(linkParams);\n```\n"
					},
					"children": [
						{
							"id": 1402,
							"name": "setDescriptionText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1403,
									"name": "setDescriptionText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the meta-tag description."
									},
									"parameters": [
										{
											"id": 1404,
											"name": "descriptionText",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The description to use when the Dynamic Link is shared in a social post.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 278,
									"character": 22
								}
							]
						},
						{
							"id": 1405,
							"name": "setImageUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1406,
									"name": "setImageUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the meta-tag image link."
									},
									"parameters": [
										{
											"id": 1407,
											"name": "imageUrl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The URL to an image related to this link.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 285,
									"character": 15
								}
							]
						},
						{
							"id": 1408,
							"name": "setTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1409,
									"name": "setTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the meta-tag title."
									},
									"parameters": [
										{
											"id": 1410,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The title to use when the Dynamic Link is shared in a social post.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicLinkParameters",
										"id": 1411
									}
								}
							],
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 292,
									"character": 12
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1402,
								1405,
								1408
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 272,
							"character": 46
						}
					]
				},
				{
					"id": 1418,
					"name": "ShortLinkType",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "ShortLinkType determines the type of dynamic short link which Firebase creates. Used when building\na new short link via `buildShortLink()`.",
						"text": "#### Example\n\n```js\nconst linkParams = firebase.links()\n  .newDynamicLinkParameters('https://invertase.io', 'https://xyz.page.link');\n\nlinkParams.analytics.setCampaign('banner');\n\nconst link = await firebase.links().buildShortLink(\n  linkParams,\n  firebase.links.ShortLinkType.UNGUESSABLE,\n);\n```\n"
					},
					"children": [
						{
							"id": 1421,
							"name": "DEFAULT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "By default, Firebase returns a standard formatted link."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 378,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "DEFAULT"
							}
						},
						{
							"id": 1419,
							"name": "SHORT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Shorten the path to a string that is only as long as needed to be unique, with a minimum length\nof 4 characters. Use this if sensitive information would not be exposed if a short\nDynamic Link URL were guessed."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 366,
									"character": 9
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "SHORT"
							}
						},
						{
							"id": 1420,
							"name": "UNGUESSABLE",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Shorten the path to an unguessable string. Such strings are created by base62-encoding randomly\ngenerated 96-bit numbers, and consist of 17 alphanumeric characters. Use unguessable strings\nto prevent your Dynamic Links from being crawled, which can potentially expose sensitive information."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 373,
									"character": 15
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "UNGUESSABLE"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1421,
								1419,
								1420
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 360,
							"character": 32
						}
					]
				},
				{
					"id": 1422,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Firebase Dynamic Links Statics",
						"text": "```js\nfirebase.links.X\n```\n"
					},
					"children": [
						{
							"id": 1423,
							"name": "ShortLinkType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the {@link links.ShortLinkType} interface."
							},
							"sources": [
								{
									"fileName": "links/lib/index.d.ts",
									"line": 392,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ShortLinkType",
								"id": 1418
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1423
							]
						}
					],
					"sources": [
						{
							"fileName": "links/lib/index.d.ts",
							"line": 388,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1424
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1339,
						1355,
						1365,
						1387,
						1397,
						1411,
						1401,
						1418,
						1422
					]
				}
			],
			"sources": [
				{
					"fileName": "links/lib/index.d.ts",
					"line": 25,
					"character": 22
				}
			]
		},
		{
			"id": 1571,
			"name": "MLKitLanguage",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase ML Kit package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `mlKitLanguage` package:\n\n```js\nimport { firebase } from '@react-native-firebase/ml-natural-language';\n\n// firebase.mlKitLanguage().X\n```\n\n#### Example 2\n\nUsing the default export from the `mlKitLanguage` package:\n\n```js\nimport mlKitLanguage from '@react-native-firebase/ml-natural-language';\n\n// mlKitLanguage().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/ml-natural-language';\n\n// firebase.mlKitLanguage().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "ml-natural-language\n"
					}
				]
			},
			"children": [
				{
					"id": 1594,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase ML Kit service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the ML Kit service for the default app:\n\n```js\nconst defaultAppMLKit = firebase.mlKitLanguage();\n```\n"
					},
					"children": [
						{
							"id": 1606,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1595,
							"name": "identifyLanguage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1596,
									"name": "identifyLanguage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Identifies the main language for the given text.",
										"text": "Returns a promise that resolves with a [BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag) of the detected language.\n\nIf the language was undetected or unknown the code returned is `und`.\n\n#### Example\n\n```js\nconst language = await firebase.mlKitLanguage().identifyLanguage('Hello there. General Kenobi.');\nconsole.warn(language); // en\n\nconst unknownLanguage = await firebase.mlKitLanguage().identifyLanguage('foo bar baz', { confidenceThreshold: 0.9 });\nconsole.warn(language); // und\n```\n"
									},
									"parameters": [
										{
											"id": 1597,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The input text to use for identifying the language. Inputs longer than 200 characters are truncated to 200 characters, as longer input does not improve the detection accuracy."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1598,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "See `LanguageIdentificationOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "LanguageIdentificationOptions",
												"id": 1573
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 223,
									"character": 20
								}
							]
						},
						{
							"id": 1599,
							"name": "identifyPossibleLanguages",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1600,
									"name": "identifyPossibleLanguages",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Identifies possible languages for the given text.",
										"text": "#### Example\n\n```js\nconst identifiedLanguages = firebase.mlKitLanguage().identifyPossibleLanguages('hello world');\nconsole.warn(identifiedLanguages[0].language); // en\n```\n"
									},
									"parameters": [
										{
											"id": 1601,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The input text to use for identifying the language. Inputs longer than 200 characters are truncated to 200 characters, as longer input does not improve the detection accuracy."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1602,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "See `LanguageIdentificationOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "LanguageIdentificationOptions",
												"id": 1573
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IdentifiedLanguage",
													"id": 1575
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 238,
									"character": 29
								}
							]
						},
						{
							"id": 1603,
							"name": "newSmartReplyConversation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1604,
									"name": "newSmartReplyConversation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new instance of SmartReplyConversation.",
										"text": "#### Example\n\n```js\nconst conversation = firebase.mlKitLanguage().newSmartReplyConversation();\n```\n"
									},
									"parameters": [
										{
											"id": 1605,
											"name": "messageHistoryLimit",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional value to specify the number of messages to keep in history, messages in history are used with `SmartReplyConversation.getSuggestedReplies` and are sent natively every time this method is called. Defaults to 30.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "SmartReplyConversation",
										"id": 1580
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 254,
									"character": 29
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1606
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1595,
								1599,
								1603
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 202,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1580,
					"name": "SmartReplyConversation",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A class representing a Smart Reply conversation in your app.",
						"text": "#### Example\n\n```js\nconst conversation = firebase.mlKitLanguage().newSmartReplyConversation();\n```\n\n"
					},
					"children": [
						{
							"id": 1581,
							"name": "addLocalUserMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1582,
									"name": "addLocalUserMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a local message to this conversation, e.g. for the currently signed in user on this device.",
										"text": "#### Example\n\n```js\nconst conversation = firebase.mlKitLanguage().newSmartReplyConversation();\nconversation.addRemoteUserMessage('Hey, want to get lunch today?', Date.now(), 'jimBobTheGreat');\nconversation.addLocalUserMessage('That sounds great!');\nconversation.addRemoteUserMessage('Great, does 12pm work for you?', Date.now(), 'jimBobTheGreat');\n\nconst suggestedReplies = await conversation.getSuggestedReplies();\nconsole.log(suggestedReplies); // [ { text: 'Sure' }, ...etc ]\n```\n"
									},
									"parameters": [
										{
											"id": 1583,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The local users message text."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1584,
											"name": "timestamp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The timestamp of when the message was created.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 138,
									"character": 23
								}
							]
						},
						{
							"id": 1585,
							"name": "addRemoteUserMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1586,
									"name": "addRemoteUserMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a remote message to this conversation, e.g. for a user that's not on this device.",
										"text": "#### Example\n\n```js\nconst conversation = firebase.mlKitLanguage().newSmartReplyConversation();\nconversation.addRemoteUserMessage('hey, want to get lunch today?', Date.now(), 'jimBobTheGreat');\n\nconst suggestedReplies = await conversation.getSuggestedReplies();\nconsole.log(suggestedReplies); // [ { text: 'Sure' }, ...etc ]\n```\n"
									},
									"parameters": [
										{
											"id": 1587,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The remote users message text."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1588,
											"name": "timestamp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The timestamp of when the message was received."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1589,
											"name": "remoteUserId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The remote users identifier in your app.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 157,
									"character": 24
								}
							]
						},
						{
							"id": 1592,
							"name": "clearMessages",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1593,
									"name": "clearMessages",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes all messages from this conversation, e.g. all messages added via `addLocalUserMessage` and `addRemoteUserMessage`.",
										"text": "#### Example\n\n```js\nconst conversation = firebase.mlKitLanguage().newSmartReplyConversation();\nconversation.addRemoteUserMessage('hey, want to get lunch today?', Date.now(), 'jimBobTheGreat');\n// start over\nconversation.clearMessages();\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 186,
									"character": 17
								}
							]
						},
						{
							"id": 1590,
							"name": "getSuggestedReplies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1591,
									"name": "getSuggestedReplies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get suggested replies for the current conversation.",
										"text": "#### Example\n\n```js\nconst conversation = firebase.mlKitLanguage().newSmartReplyConversation();\nconversation.addRemoteUserMessage('hey, want to get lunch today?', Date.now(), 'jimBobTheGreat');\n\nconst suggestedReplies = await conversation.getSuggestedReplies();\nconsole.log(suggestedReplies); // [ { text: 'Sure' }, ...etc ]\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "SuggestedReply",
													"id": 1578
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 172,
									"character": 23
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1581,
								1585,
								1592,
								1590
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 119,
							"character": 37
						}
					]
				},
				{
					"id": 1575,
					"name": "IdentifiedLanguage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An identified language for the given input text. Returned as an Array of IdentifiedLanguage from\n`identifyPossibleLanguages`."
					},
					"children": [
						{
							"id": 1577,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence score of the language. A float value between 0 and 1."
							},
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 89,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1576,
							"name": "language",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The [BCP-47 language code](https://en.wikipedia.org/wiki/IETF_language_tag) for the language, e.g. 'en'."
							},
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 84,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1577,
								1576
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 80,
							"character": 37
						}
					]
				},
				{
					"id": 1573,
					"name": "LanguageIdentificationOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An interface representing the language identification options to be used with the\n`identifyLanguage` and `identifyPossibleLanguages` methods."
					},
					"children": [
						{
							"id": 1574,
							"name": "confidenceThreshold",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The confidence threshold for language identification. The identified languages will have a\nconfidence higher or equal to the confidence threshold. The value should be between 0 and 1, e.g. 0.5.",
								"text": "If no value is set, a default value is used instead.\n\n"
							},
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 73,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1574
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 65,
							"character": 48
						}
					]
				},
				{
					"id": 1572,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 59,
							"character": 26
						}
					]
				},
				{
					"id": 1578,
					"name": "SuggestedReply",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An interface representing a suggest reply, an array of these are returned from `SmartReplyConversation.getSuggestedReplies`",
						"text": "#### Example\n\n```js\nconst conversation = firebase.mlKitLanguage().newSmartReplyConversation();\nconversation.addRemoteUserMessage('hey, want to get lunch today?', Date.now(), 'jimBobTheGreat');\n\nconst suggestedReplies = await conversation.getSuggestedReplies();\nconsole.log(suggestedReplies); // [ { text: 'Sure' }, ...etc ]\n```\n"
					},
					"children": [
						{
							"id": 1579,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-natural-language/lib/index.d.ts",
									"line": 106,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1579
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-natural-language/lib/index.d.ts",
							"line": 105,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1594,
						1580
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1575,
						1573,
						1572,
						1578
					]
				}
			],
			"sources": [
				{
					"fileName": "ml-natural-language/lib/index.d.ts",
					"line": 56,
					"character": 30
				}
			]
		},
		{
			"id": 1616,
			"name": "MLKitVision",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase ML Kit package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `ml-vision` package:\n\n```js\nimport { firebase } from '@react-native-firebase/ml-vision';\n\n// firebase.mlKitVision().X\n```\n\n#### Example 2\n\nUsing the default export from the `ml-vision` package:\n\n```js\nimport mlKitVision from '@react-native-firebase/ml-vision';\n\n// mlKitVision().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/ml-vision';\n\n// firebase.mlKitVision().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "ml-vision\n"
					}
				]
			},
			"children": [
				{
					"id": 1729,
					"name": "VisionBarcodeAddressType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of a address detected in a barcode.",
						"text": "Use with `VisionBarcodeAddress.type`.\n"
					},
					"children": [
						{
							"id": 1732,
							"name": "HOME",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address is specified as a HOME address."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 977,
									"character": 8
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1730,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Unknown type"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 967,
									"character": 11
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 1731,
							"name": "WORK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address is specified as a WORK address."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 972,
									"character": 8
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1732,
								1730,
								1731
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 963,
							"character": 38
						}
					]
				},
				{
					"id": 1733,
					"name": "VisionBarcodeEmailType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of an email detected in a barcode.",
						"text": "Use with `VisionBarcodeEmail.type`.\n"
					},
					"children": [
						{
							"id": 1736,
							"name": "HOME",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Email address is specified as a HOME / personal email."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 999,
									"character": 8
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1734,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Unknown type"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 989,
									"character": 11
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 1735,
							"name": "WORK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Email address is specified as a WORK email."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 994,
									"character": 8
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1736,
								1734,
								1735
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 985,
							"character": 36
						}
					]
				},
				{
					"id": 1699,
					"name": "VisionBarcodeFormat",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Barcode format constants - enumeration of supported barcode formats.",
						"text": "Can be used to specify the known type of a barcode before processing; via `VisionBarcodeDetectorOptions.setBarcodeFormats()`\n"
					},
					"children": [
						{
							"id": 1700,
							"name": "ALL_FORMATS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant representing the union of all supported formats."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 800,
									"character": 15
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 1701,
							"name": "AZTEC",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for AZTEC."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 805,
									"character": 9
								}
							],
							"defaultValue": "4096"
						},
						{
							"id": 1702,
							"name": "CODABAR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for Codabar."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 810,
									"character": 11
								}
							],
							"defaultValue": "8"
						},
						{
							"id": 1703,
							"name": "CODE_128",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for Code 128."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 815,
									"character": 12
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1704,
							"name": "CODE_39",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for Code 39."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 820,
									"character": 11
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1705,
							"name": "CODE_93",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for Code 93."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 825,
									"character": 11
								}
							],
							"defaultValue": "4"
						},
						{
							"id": 1706,
							"name": "DATA_MATRIX",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for Data Matrix."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 830,
									"character": 15
								}
							],
							"defaultValue": "16"
						},
						{
							"id": 1707,
							"name": "EAN_13",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for EAN-13."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 835,
									"character": 10
								}
							],
							"defaultValue": "32"
						},
						{
							"id": 1708,
							"name": "EAN_8",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for EAN-8."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 840,
									"character": 9
								}
							],
							"defaultValue": "64"
						},
						{
							"id": 1709,
							"name": "ITF",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for ITF (Interleaved Two-of-Five)."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 845,
									"character": 7
								}
							],
							"defaultValue": "128"
						},
						{
							"id": 1710,
							"name": "PDF417",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for PDF-417."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 850,
									"character": 10
								}
							],
							"defaultValue": "2048"
						},
						{
							"id": 1711,
							"name": "QR_CODE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for QR Code."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 855,
									"character": 11
								}
							],
							"defaultValue": "256"
						},
						{
							"id": 1712,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format unknown to the current SDK, but understood by Google Play services."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 860,
									"character": 11
								}
							],
							"defaultValue": " -1"
						},
						{
							"id": 1713,
							"name": "UPC_A",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for UPC-A."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 865,
									"character": 9
								}
							],
							"defaultValue": "512"
						},
						{
							"id": 1714,
							"name": "UPC_E",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Barcode format constant for UPC-E."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 870,
									"character": 9
								}
							],
							"defaultValue": "1024"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1700,
								1701,
								1702,
								1703,
								1704,
								1705,
								1706,
								1707,
								1708,
								1709,
								1710,
								1711,
								1712,
								1713,
								1714
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 796,
							"character": 33
						}
					]
				},
				{
					"id": 1737,
					"name": "VisionBarcodePhoneType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of a phone number detected in a barcode.",
						"text": "Use with `VisionBarcodePhone.type`.\n"
					},
					"children": [
						{
							"id": 1738,
							"name": "FAX",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Face machine."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1011,
									"character": 7
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 1739,
							"name": "HOME",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Home phone."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1016,
									"character": 8
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1740,
							"name": "MOBILE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Mobile Phone."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1021,
									"character": 10
								}
							],
							"defaultValue": "4"
						},
						{
							"id": 1741,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Unknown type."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1026,
									"character": 11
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 1742,
							"name": "WORK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Work phone."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1031,
									"character": 8
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1738,
								1739,
								1740,
								1741,
								1742
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 1007,
							"character": 36
						}
					]
				},
				{
					"id": 1715,
					"name": "VisionBarcodeValueType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Barcode value type constants - enumeration of supported barcode content value types.",
						"text": "Can be used with `VisionBarcode.valueType` to determine the barcode content type of a detected barcode.\n\n#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\n// check for a calendar event barcode value type\nif (barcode && barcode.valueType === VisionBarcodeValueType.CALENDAR_EVENT) {\n  console.log(barcode.calendarEvent);\n}\n```\n"
					},
					"children": [
						{
							"id": 1716,
							"name": "CALENDAR_EVENT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for calendar events."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 895,
									"character": 18
								}
							],
							"defaultValue": "11"
						},
						{
							"id": 1717,
							"name": "CONTACT_INFO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for contact information."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 900,
									"character": 16
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1718,
							"name": "DRIVER_LICENSE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for driver's license data."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 905,
									"character": 18
								}
							],
							"defaultValue": "12"
						},
						{
							"id": 1719,
							"name": "EMAIL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for email message details."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 910,
									"character": 9
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1720,
							"name": "GEO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for geographic coordinates."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 915,
									"character": 7
								}
							],
							"defaultValue": "10"
						},
						{
							"id": 1721,
							"name": "ISBN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for ISBNs."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 920,
									"character": 8
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 1722,
							"name": "PHONE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for phone numbers."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 925,
									"character": 9
								}
							],
							"defaultValue": "4"
						},
						{
							"id": 1723,
							"name": "PRODUCT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for product codes."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 930,
									"character": 11
								}
							],
							"defaultValue": "5"
						},
						{
							"id": 1724,
							"name": "SMS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for SMS details."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 935,
									"character": 7
								}
							],
							"defaultValue": "6"
						},
						{
							"id": 1725,
							"name": "TEXT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for plain text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 940,
									"character": 8
								}
							],
							"defaultValue": "7"
						},
						{
							"id": 1726,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type unknown, which indicates the current version of SDK cannot recognize the structure of the barcode."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 945,
									"character": 11
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 1727,
							"name": "URL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for URLs/bookmarks."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 950,
									"character": 7
								}
							],
							"defaultValue": "8"
						},
						{
							"id": 1728,
							"name": "WIFI",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": " Barcode value type constant for WiFi access point details."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 955,
									"character": 8
								}
							],
							"defaultValue": "9"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1716,
								1717,
								1718,
								1719,
								1720,
								1721,
								1722,
								1723,
								1724,
								1725,
								1726,
								1727,
								1728
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 891,
							"character": 36
						}
					]
				},
				{
					"id": 1743,
					"name": "VisionBarcodeWifiEncryptionType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of wifi encryption used for a `VisionBarcodeWifi` instance.",
						"text": "Use with `VisionBarcodeWifi.encryptionType`.\n"
					},
					"children": [
						{
							"id": 1744,
							"name": "OPEN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Wifi has no encryption and is open."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1043,
									"character": 8
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1746,
							"name": "WEP",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Wifi uses WEP encryption."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1053,
									"character": 7
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 1745,
							"name": "WPA",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Wifi uses WPA encryption. This includes WPA2."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 1048,
									"character": 7
								}
							],
							"defaultValue": "2"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1744,
								1746,
								1745
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 1039,
							"character": 45
						}
					]
				},
				{
					"id": 1805,
					"name": "VisionCloudLandmarkRecognizerModelType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Model types for cloud landmark recognition."
					},
					"children": [
						{
							"id": 1807,
							"name": "LATEST_MODEL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Latest model would be used."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 317,
									"character": 16
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1806,
							"name": "STABLE_MODEL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Stable model would be used."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 312,
									"character": 16
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1807,
								1806
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 308,
							"character": 52
						}
					]
				},
				{
					"id": 1823,
					"name": "VisionCloudTextRecognizerModelType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The cloud model type used for in VisionCloudTextRecognizerOptions & VisionCloudDocumentTextRecognizerOptions",
						"text": "Defaults to `SPARSE_MODEL`\n"
					},
					"children": [
						{
							"id": 1825,
							"name": "DENSE_MODEL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sparse model type. It is more suitable for sparse text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 475,
									"character": 15
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1824,
							"name": "SPARSE_MODEL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Dense model type. It is more suitable for well-formatted dense text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 471,
									"character": 16
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1825,
								1824
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 467,
							"character": 48
						}
					]
				},
				{
					"id": 1868,
					"name": "VisionDocumentTextRecognizedBreakType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Enum representing the detected break type."
					},
					"children": [
						{
							"id": 1869,
							"name": "EOL_SURE_SPACE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Line-wrapping break."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 622,
									"character": 18
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 1870,
							"name": "HYPHEN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 627,
									"character": 10
								}
							],
							"defaultValue": "4"
						},
						{
							"id": 1871,
							"name": "LINE_BREAK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Line break that ends a paragraph."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 632,
									"character": 14
								}
							],
							"defaultValue": "5"
						},
						{
							"id": 1872,
							"name": "SPACE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Regular space."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 637,
									"character": 9
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1873,
							"name": "SURE_SPACE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Sure space (very wide)."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 642,
									"character": 14
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1874,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Unknown break label type."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 647,
									"character": 11
								}
							],
							"defaultValue": "0"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1869,
								1870,
								1871,
								1872,
								1873,
								1874
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 618,
							"character": 51
						}
					]
				},
				{
					"id": 1943,
					"name": "VisionFaceContourType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Countour type for a face."
					},
					"children": [
						{
							"id": 1944,
							"name": "ALL_POINTS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "All points of a face contour."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 945,
									"character": 14
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1945,
							"name": "FACE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The outline of the subject's face."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 950,
									"character": 8
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1946,
							"name": "LEFT_EYE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The outline of the subject's left eye cavity."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 955,
									"character": 12
								}
							],
							"defaultValue": "7"
						},
						{
							"id": 1947,
							"name": "LEFT_EYEBROW_BOTTOM",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bottom outline of the subject's left eyebrow."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 960,
									"character": 23
								}
							],
							"defaultValue": "4"
						},
						{
							"id": 1948,
							"name": "LEFT_EYEBROW_TOP",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The top outline of the subject's left eyebrow."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 965,
									"character": 20
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 1949,
							"name": "LOWER_LIP_BOTTOM",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bottom outline of the subject's lower lip."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 970,
									"character": 20
								}
							],
							"defaultValue": "12"
						},
						{
							"id": 1950,
							"name": "LOWER_LIP_TOP",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The top outline of the subject's lower lip."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 975,
									"character": 17
								}
							],
							"defaultValue": "11"
						},
						{
							"id": 1951,
							"name": "NOSE_BOTTOM",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The outline of the subject's nose bridge."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 980,
									"character": 15
								}
							],
							"defaultValue": "14"
						},
						{
							"id": 1952,
							"name": "NOSE_BRIDGE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The outline of the subject's nose bridge."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 985,
									"character": 15
								}
							],
							"defaultValue": "13"
						},
						{
							"id": 1953,
							"name": "RIGHT_EYE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The outline of the subject's right eye cavity."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 990,
									"character": 13
								}
							],
							"defaultValue": "8"
						},
						{
							"id": 1954,
							"name": "RIGHT_EYEBROW_BOTTOM",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bottom outline of the subject's right eyebrow."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 995,
									"character": 24
								}
							],
							"defaultValue": "6"
						},
						{
							"id": 1955,
							"name": "RIGHT_EYEBROW_TOP",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The top outline of the subject's right eyebrow."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1000,
									"character": 21
								}
							],
							"defaultValue": "5"
						},
						{
							"id": 1956,
							"name": "UPPER_LIP_BOTTOM",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bottom outline of the subject's upper lip."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1005,
									"character": 20
								}
							],
							"defaultValue": "10"
						},
						{
							"id": 1957,
							"name": "UPPER_LIP_TOP",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The top outline of the subject's upper lip."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1010,
									"character": 17
								}
							],
							"defaultValue": "9"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1944,
								1945,
								1946,
								1947,
								1948,
								1949,
								1950,
								1951,
								1952,
								1953,
								1954,
								1955,
								1956,
								1957
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 941,
							"character": 35
						}
					]
				},
				{
					"id": 1826,
					"name": "VisionFaceDetectorClassificationMode",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Indicates whether to run additional classifiers for characterizing attributes such as \"smiling\" and \"eyes open\"."
					},
					"children": [
						{
							"id": 1828,
							"name": "ALL_CLASSIFICATIONS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Enables collection of classifier information."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 490,
									"character": 23
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1827,
							"name": "NO_CLASSIFICATIONS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Disables collection of classifier information."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 485,
									"character": 22
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1828,
								1827
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 481,
							"character": 50
						}
					]
				},
				{
					"id": 1829,
					"name": "VisionFaceDetectorContourMode",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sets whether to detect contours or not. Processing time increases as the number of contours to search for increases,\nso detecting all contours will increase the overall detection time."
					},
					"children": [
						{
							"id": 1831,
							"name": "ALL_CONTOURS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Enables collection of contour information."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 506,
									"character": 16
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1830,
							"name": "NO_CONTOURS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Disables collection of contour information."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 501,
									"character": 15
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1831,
								1830
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 497,
							"character": 43
						}
					]
				},
				{
					"id": 1832,
					"name": "VisionFaceDetectorLandmarkMode",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sets whether to detect no landmarks or all landmarks. Processing time increases as the number of landmarks to\nsearch for increases, so detecting all landmarks will increase the overall detection time. Detecting\nlandmarks can improve pose estimation."
					},
					"children": [
						{
							"id": 1834,
							"name": "ALL_LANDMARKS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Enables collection of landmark information."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 523,
									"character": 17
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1833,
							"name": "NO_LANDMARKS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Disables collection of landmark information."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 518,
									"character": 16
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1834,
								1833
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 514,
							"character": 44
						}
					]
				},
				{
					"id": 1835,
					"name": "VisionFaceDetectorPerformanceMode",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Extended option for controlling additional accuracy / speed trade-offs in performing face detection. In general,\nchoosing the more accurate mode will generally result in longer runtime, whereas choosing the faster\nmode will generally result in detecting fewer faces."
					},
					"children": [
						{
							"id": 1837,
							"name": "ACCURATE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates a preference for accuracy in extended settings that may make an accuracy vs. speed trade-off.\nThis will tend to detect more faces and may be more precise in determining values such as position, at the cost\nof speed."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 543,
									"character": 12
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 1836,
							"name": "FAST",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates a preference for speed in extended settings that may make an accuracy vs. speed trade-off. This will\ntend to detect fewer faces and may be less precise in determining values such as position, but will run faster."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 536,
									"character": 8
								}
							],
							"defaultValue": "1"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1837,
								1836
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 531,
							"character": 47
						}
					]
				},
				{
					"id": 1929,
					"name": "VisionFaceLandmarkType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Landmark types for a face."
					},
					"children": [
						{
							"id": 1930,
							"name": "LEFT_CHEEK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The midpoint between the subject's left mouth corner and the outer corner of the subject's left eye."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 872,
									"character": 14
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 1931,
							"name": "LEFT_EAR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The midpoint of the subject's left ear tip and left ear lobe."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 877,
									"character": 12
								}
							],
							"defaultValue": "3"
						},
						{
							"id": 1932,
							"name": "LEFT_EYE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The center of the subject's left eye cavity."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 882,
									"character": 12
								}
							],
							"defaultValue": "4"
						},
						{
							"id": 1933,
							"name": "MOUTH_BOTTOM",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The center of the subject's bottom lip."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 887,
									"character": 16
								}
							],
							"defaultValue": "0"
						},
						{
							"id": 1934,
							"name": "MOUTH_LEFT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The subject's left mouth corner where the lips meet."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 892,
									"character": 14
								}
							],
							"defaultValue": "5"
						},
						{
							"id": 1935,
							"name": "MOUTH_RIGHT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The subject's right mouth corner where the lips meet."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 897,
									"character": 15
								}
							],
							"defaultValue": "11"
						},
						{
							"id": 1936,
							"name": "NOSE_BASE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The midpoint between the subject's nostrils where the nose meets the face."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 902,
									"character": 13
								}
							],
							"defaultValue": "6"
						},
						{
							"id": 1937,
							"name": "RIGHT_CHEEK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The midpoint between the subject's right mouth corner and the outer corner of the subject's right eye."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 907,
									"character": 15
								}
							],
							"defaultValue": "7"
						},
						{
							"id": 1938,
							"name": "RIGHT_EAR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The midpoint of the subject's right ear tip and right ear lobe."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 912,
									"character": 13
								}
							],
							"defaultValue": "9"
						},
						{
							"id": 1939,
							"name": "RIGHT_EYE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The center of the subject's right eye cavity."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 917,
									"character": 13
								}
							],
							"defaultValue": "10"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								1930,
								1931,
								1932,
								1933,
								1934,
								1935,
								1936,
								1937,
								1938,
								1939
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 868,
							"character": 36
						}
					]
				},
				{
					"id": 1964,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase ML Kit service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the ML Kit service for the default app:\n\n```js\nconst defaultAppMLKit = firebase.mlKitVision();\n```\n"
					},
					"children": [
						{
							"id": 1996,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1992,
							"name": "barcodeDetectorProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1993,
									"name": "barcodeDetectorProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array of barcodes (as `VisionBarcode`) detected for a local image file path.",
										"text": "Barcode detection is done locally on device.\n\n#### Example 1\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.CONTACT_INFO) {\n  console.log(barcode.contactInfo);\n}\n```\n\n#### Example 2\n\nProcess image with custom `VisionBarcodeDetectorOptions`.\n\n```js\nimport vision, { VisionBarcodeDetectorOptions, VisionBarcodeFormat, VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst options = new VisionBarcodeDetectorOptions();\noptions.setBarcodeFormats(VisionBarcodeFormat.QR_CODE);\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath, options);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.CONTACT_INFO) {\n  console.log(barcode.contactInfo);\n}\n```\n"
									},
									"parameters": [
										{
											"id": 1994,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local image file path."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1995,
											"name": "barcodeDetectorOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional instance of `VisionBarcodeDetectorOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "VisionBarcodeDetectorOptions",
												"id": 1695
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "VisionBarcode",
													"id": 1617
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1200,
									"character": 31
								}
							]
						},
						{
							"id": 1976,
							"name": "cloudDocumentTextRecognizerProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1977,
									"name": "cloudDocumentTextRecognizerProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect text within a document using a local image file from the cloud (Firebase) model."
									},
									"parameters": [
										{
											"id": 1978,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local path to an image on the device."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1979,
											"name": "cloudDocumentTextRecognizerOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An instance of `VisionCloudDocumentTextRecognizerOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "VisionCloudDocumentTextRecognizerOptions",
												"id": 1817
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "VisionDocumentText",
												"id": 1884
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1104,
									"character": 43
								}
							]
						},
						{
							"id": 1988,
							"name": "cloudImageLabelerProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1989,
									"name": "cloudImageLabelerProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array of labels (as `VisionImageLabel`) of a given local image file path. Label detection is done\non cloud (Firebase), resulting in slower results but more descriptive.",
										"text": "#### Example\n\n```js\nconst options = new firebase.mlKitVision.VisionCloudImageLabelerOptions();\noptions.setConfidenceThreshold(0.8);\n\nconst labels = await firebase.mlKitVision().cloudImageLabelerProcessImage(filePath, options);\n```\n"
									},
									"parameters": [
										{
											"id": 1990,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local image file path."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1991,
											"name": "cloudImageLabelerOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional instance of `VisionCloudImageLabelerOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "VisionCloudImageLabelerOptions",
												"id": 1790
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "VisionImageLabel",
													"id": 1913
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1158,
									"character": 33
								}
							]
						},
						{
							"id": 1980,
							"name": "cloudLandmarkRecognizerProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1981,
									"name": "cloudLandmarkRecognizerProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array of landmarks (as `VisionLandmark`) of a given local image file path. Landmark detection\nis done on cloud (Firebase)."
									},
									"parameters": [
										{
											"id": 1982,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local image file path."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1983,
											"name": "cloudLandmarkRecognizerOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional instance of `VisionCloudLandmarkRecognizerOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "VisionCloudLandmarkRecognizerOptions",
												"id": 1796
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "VisionLandmark",
													"id": 1958
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1116,
									"character": 39
								}
							]
						},
						{
							"id": 1972,
							"name": "cloudTextRecognizerProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1973,
									"name": "cloudTextRecognizerProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect text from a local image file using the cloud (Firebase) model."
									},
									"parameters": [
										{
											"id": 1974,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local path to an image on the device."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1975,
											"name": "cloudTextRecognizerOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An instance of `VisionCloudTextRecognizerOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "VisionCloudTextRecognizerOptions",
												"id": 1808
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "VisionText",
												"id": 1838
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1093,
									"character": 35
								}
							]
						},
						{
							"id": 1965,
							"name": "faceDetectorProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1966,
									"name": "faceDetectorProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detects faces from a local image file."
									},
									"parameters": [
										{
											"id": 1967,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local path to an image on the device."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1968,
											"name": "faceDetectorOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional instance of `VisionFaceDetectorOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "VisionFaceDetectorOptions",
												"id": 1770
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "VisionFace",
													"id": 1917
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1075,
									"character": 28
								}
							]
						},
						{
							"id": 1984,
							"name": "imageLabelerProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1985,
									"name": "imageLabelerProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an array of labels (as `VisionImageLabel`) of a given local image file path. Label detection is done\non device, resulting in faster results but less descriptive.",
										"text": "#### Example\n\n```js\nconst options = new firebase.mlKitVision.VisionImageLabelerOptions();\noptions.setConfidenceThreshold(0.8);\n\nconst labels = await firebase.mlKitVision().imageLabelerProcessImage(filePath, options);\n```\n"
									},
									"parameters": [
										{
											"id": 1986,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local image file path."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1987,
											"name": "imageLabelerOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional instance of `VisionImageLabelerOptions`.\n"
											},
											"type": {
												"type": "reference",
												"name": "VisionImageLabelerOptions",
												"id": 1786
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "VisionImageLabel",
													"id": 1913
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1137,
									"character": 28
								}
							]
						},
						{
							"id": 1969,
							"name": "textRecognizerProcessImage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1970,
									"name": "textRecognizerProcessImage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Detect text from a local image file using the on-device model."
									},
									"parameters": [
										{
											"id": 1971,
											"name": "imageFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A local path to an image on the device.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "VisionText",
												"id": 1838
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1085,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1996
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1992,
								1976,
								1988,
								1980,
								1972,
								1965,
								1984,
								1969
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 1068,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1695,
					"name": "VisionBarcodeDetectorOptions",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Custom options for barcode detection.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeDetectorOptions, VisionBarcodeFormat, VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst options = new VisionBarcodeDetectorOptions();\noptions.setBarcodeFormats(VisionBarcodeFormat.QR_CODE);\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath, options);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.CONTACT_INFO) {\n  console.log(barcode.contactInfo);\n}\n```\n"
					},
					"children": [
						{
							"id": 1696,
							"name": "setBarcodeFormats",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1697,
									"name": "setBarcodeFormats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the barcode formats to detect.",
										"text": "Defaults to `VisionBarcodeFormat.ALL_FORMATS`;\n"
									},
									"parameters": [
										{
											"id": 1698,
											"name": "formats",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Variable args of `VisionBarcodeFormat`\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "VisionBarcodeFormat",
													"id": 1699
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionBarcodeDetectorOptions",
										"id": 1695
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 788,
									"character": 21
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1696
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 780,
							"character": 43
						}
					]
				},
				{
					"id": 1817,
					"name": "VisionCloudDocumentTextRecognizerOptions",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for the cloud document text recognizer.",
						"text": "#### Example\n\n```js\nimport { VisionCloudDocumentTextRecognizerOptions } from '@react-native-firebase/ml-vision';\n\nconst docTextRecognizerOptions = new VisionCloudDocumentTextRecognizerOptions();\ndocTextRecognizerOptions.enforceCertFingerprintMatch();\ndocTextRecognizerOptions.setHintedLanguages(['fr', 'de']);\n```\n"
					},
					"children": [
						{
							"id": 1818,
							"name": "enforceCertFingerprintMatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1819,
									"name": "enforceCertFingerprintMatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Only allow registered application instances with matching certificate fingerprint to use Cloud Vision API.",
										"text": "> Do not set this for debug build if you use simulators to test.\n\n#### Example\n\n```js\nimport { VisionCloudDocumentTextRecognizerOptions, firebase } from '@react-native-firebase/ml-vision';\n\nconst docTextRecognizerOptions = new VisionCloudDocumentTextRecognizerOptions();\ndocTextRecognizerOptions.enforceCertFingerprintMatch();\n\nawait firebase.mlKitVision().cloudTextRecognizerProcessImage(filePath, docTextRecognizerOptions);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "VisionCloudDocumentTextRecognizerOptions",
										"id": 1817
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 435,
									"character": 31
								}
							]
						},
						{
							"id": 1820,
							"name": "setLanguageHints",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1821,
									"name": "setLanguageHints",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets language hints. In most cases, not setting this yields the best results since it enables automatic language\ndetection. For languages based on the Latin alphabet, setting language hints is not needed. In rare cases, when\nthe language of the text in the image is known, setting a hint will help get better results (although it will be a\nsignificant hindrance if the hint is wrong).",
										"text": "Each language code must be a BCP-47 identifier. See [Google Cloud OCR Language Support](https://cloud.google.com/vision/docs/languages) for more information.\n\n#### Example\n\n```js\nimport {\n  firebase,\n  VisionCloudDocumentTextRecognizerOptions\n} from '@react-native-firebase/ml-vision';\n\nconst docTextRecognizerOptions = new VisionCloudDocumentTextRecognizerOptions();\ndocTextRecognizerOptions.setHintedLanguages(['fr', 'de']);\n\nawait firebase.mlKitVision().cloudTextRecognizerProcessImage(filePath, docTextRecognizerOptions);\n```\n"
									},
									"parameters": [
										{
											"id": 1822,
											"name": "hintedLanguages",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionCloudDocumentTextRecognizerOptions",
										"id": 1817
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 459,
									"character": 20
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1818,
								1820
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 418,
							"character": 55
						}
					]
				},
				{
					"id": 1790,
					"name": "VisionCloudImageLabelerOptions",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for cloud image labeler. Confidence threshold could be provided for the label detection.",
						"text": "For example, if the confidence threshold is set to 0.7, only labels with confidence >= 0.7 would be returned. The default threshold is 0.5.\n\nNote: at most 20 labels will be returned for cloud image labeler.\n\n#### Example\n\n```js\nconst labelerOptions = new VisionCloudImageLabelerOptions();\nlabelerOptions.setConfidenceThreshold(0.8);\n\nawait firebase.mlKitVision().cloudImageLabelerProcessImage(filePath, labelerOptions);\n```\n"
					},
					"children": [
						{
							"id": 1791,
							"name": "enforceCertFingerprintMatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1792,
									"name": "enforceCertFingerprintMatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Only allow registered application instances with matching certificate fingerprint to use Cloud Vision API.",
										"text": "> Do not set this for debug build if you use simulators to test.\n\n#### Example\n\n```js\nconst labelerOptions = new VisionCloudImageLabelerOptions();\nlabelerOptions.enforceCertFingerprintMatch();\n\nawait firebase.mlKitVision().cloudImageLabelerProcessImage(filePath, labelerOptions);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "VisionCloudImageLabelerOptions",
										"id": 1790
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 252,
									"character": 31
								}
							]
						},
						{
							"id": 1793,
							"name": "setConfidenceThreshold",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1794,
									"name": "setConfidenceThreshold",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets confidence threshold of detected labels. Only labels detected with confidence higher than this threshold are returned.",
										"text": "Defaults to 0.5.\n\n#### Example\n\n```js\nconst labelerOptions = new VisionCloudImageLabelerOptions();\nlabelerOptions.setConfidenceThreshold(0.8);\n```\n"
									},
									"parameters": [
										{
											"id": 1795,
											"name": "confidenceThreshold",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A confidence threshold in the range of [0.0 - 1.0].\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionCloudImageLabelerOptions",
										"id": 1790
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 268,
									"character": 26
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1791,
								1793
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 237,
							"character": 45
						}
					]
				},
				{
					"id": 1796,
					"name": "VisionCloudLandmarkRecognizerOptions",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Detector for finding popular natural and man-made structures within an image."
					},
					"children": [
						{
							"id": 1797,
							"name": "enforceCertFingerprintMatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1798,
									"name": "enforceCertFingerprintMatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Only allow registered application instances with matching certificate fingerprint to use Cloud Vision API.",
										"text": "> Do not set this for debug build if you use simulators to test.\n"
									},
									"type": {
										"type": "reference",
										"name": "VisionCloudLandmarkRecognizerOptions",
										"id": 1796
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 280,
									"character": 31
								}
							]
						},
						{
							"id": 1799,
							"name": "setMaxResults",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1800,
									"name": "setMaxResults",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the maximum number of results of this type.",
										"text": "Defaults to 10.\n"
									},
									"parameters": [
										{
											"id": 1801,
											"name": "maxResults",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The maximum number of results to return.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionCloudLandmarkRecognizerOptions",
										"id": 1796
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 289,
									"character": 17
								}
							]
						},
						{
							"id": 1802,
							"name": "setModelType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1803,
									"name": "setModelType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets model type for the detection.",
										"text": "Defaults to `VisionCloudLandmarkRecognizerModelType.STABLE_MODEL`.\n"
									},
									"parameters": [
										{
											"id": 1804,
											"name": "model",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A stable or latest model used for detection.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "STABLE_MODEL",
														"id": 1806
													},
													{
														"type": "reference",
														"name": "LATEST_MODEL",
														"id": 1807
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionCloudLandmarkRecognizerOptions",
										"id": 1796
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 298,
									"character": 16
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1797,
								1799,
								1802
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 274,
							"character": 51
						}
					]
				},
				{
					"id": 1808,
					"name": "VisionCloudTextRecognizerOptions",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for cloud text recognizer.",
						"text": "#### Example\n\n```js\nimport { VisionCloudTextRecognizerOptions } from '@react-native-firebase/ml-vision';\n\nconst textRecognizerOptions = new VisionCloudTextRecognizerOptions();\ntextRecognizerOptions.enforceCertFingerprintMatch();\ntextRecognizerOptions.setHintedLanguages(['fr', 'de']);\n```\n"
					},
					"children": [
						{
							"id": 1809,
							"name": "enforceCertFingerprintMatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1810,
									"name": "enforceCertFingerprintMatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Only allow registered application instances with matching certificate fingerprint to use Cloud Vision API.",
										"text": "> Do not set this for debug build if you use simulators to test.\n\n#### Example\n\n```js\nimport { VisionCloudTextRecognizerOptions, firebase } from '@react-native-firebase/ml-vision';\n\nconst textRecognizerOptions = new VisionCloudTextRecognizerOptions();\ntextRecognizerOptions.enforceCertFingerprintMatch();\n\nawait firebase.mlKitVision().cloudTextRecognizerProcessImage(filePath, textRecognizerOptions);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "VisionCloudTextRecognizerOptions",
										"id": 1808
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 350,
									"character": 31
								}
							]
						},
						{
							"id": 1814,
							"name": "setLanguageHints",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1815,
									"name": "setLanguageHints",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets language hints. In most cases, not setting this yields the best results since it enables automatic language\ndetection. For languages based on the Latin alphabet, setting language hints is not needed. In rare cases, when\nthe language of the text in the image is known, setting a hint will help get better results (although it will be a\nsignificant hindrance if the hint is wrong).",
										"text": "Each language code must be a BCP-47 identifier. See [Google Cloud OCR Language Support](https://cloud.google.com/vision/docs/languages) for more information.\n\n#### Example\n\n```js\nimport {\n  firebase,\n  VisionCloudTextRecognizerOptions\n} from '@react-native-firebase/ml-vision';\n\nconst textRecognizerOptions = new VisionCloudTextRecognizerOptions();\ntextRecognizerOptions.setHintedLanguages(['fr', 'de']);\n\nawait firebase.mlKitVision().cloudTextRecognizerProcessImage(filePath, textRecognizerOptions);\n```\n"
									},
									"parameters": [
										{
											"id": 1816,
											"name": "hintedLanguages",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionCloudTextRecognizerOptions",
										"id": 1808
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 402,
									"character": 20
								}
							]
						},
						{
							"id": 1811,
							"name": "setModelType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1812,
									"name": "setModelType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets model type for cloud text recognition. The two models SPARSE_MODEL and DENSE_MODEL handle different text densities in an image.",
										"text": "See `VisionCloudTextRecognizerModelType` for types.\n\nDefaults to `VisionCloudTextRecognizerModelType.SPARSE_MODEL`.\n\n#### Example\n\n```js\nimport {\n  firebase,\n  VisionCloudTextRecognizerModelType,\n  VisionCloudTextRecognizerOptions\n} from '@react-native-firebase/ml-vision';\n\nconst textRecognizerOptions = new VisionCloudTextRecognizerOptions();\ntextRecognizerOptions.setModelType(VisionCloudTextRecognizerModelType.DENSE_MODEL);\n\nawait firebase.mlKitVision().cloudTextRecognizerProcessImage(filePath, textRecognizerOptions);\n```\n"
									},
									"parameters": [
										{
											"id": 1813,
											"name": "modelType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "SPARSE_MODEL",
														"id": 1824
													},
													{
														"type": "reference",
														"name": "DENSE_MODEL",
														"id": 1825
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionCloudTextRecognizerOptions",
										"id": 1808
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 374,
									"character": 16
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1809,
								1814,
								1811
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 333,
							"character": 47
						}
					]
				},
				{
					"id": 1770,
					"name": "VisionFaceDetectorOptions",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for vision face detector.",
						"text": "#### Example\n\n```js\nconst options = new VisionFaceDetectorOptions();\n\noptions.setClassificationMode(\n  VisionFaceDetectorClassificationMode.ALL_CLASSIFICATIONS\n);\n\noptions.setPerformanceMode(\n  VisionFaceDetectorPerformanceMode.ACCURATE\n);\n```\n"
					},
					"children": [
						{
							"id": 1771,
							"name": "setClassificationMode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1772,
									"name": "setClassificationMode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Indicates whether to run additional classifiers for characterizing attributes such as \"smiling\" and \"eyes open\".",
										"text": "Defaults to `VisionFaceDetectorClassificationMode.NO_CLASSIFICATIONS`.\n\n#### Example\n\n```js\nconst options = new VisionFaceDetectorOptions();\n\noptions.setClassificationMode(\n  VisionFaceDetectorClassificationMode.ALL_CLASSIFICATIONS\n);\n```\n"
									},
									"parameters": [
										{
											"id": 1773,
											"name": "classificationMode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The classification mode used by the detector.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "NO_CLASSIFICATIONS",
														"id": 1827
													},
													{
														"type": "reference",
														"name": "ALL_CLASSIFICATIONS",
														"id": 1828
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionFaceDetectorOptions",
										"id": 1770
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 119,
									"character": 25
								}
							]
						},
						{
							"id": 1774,
							"name": "setContourMode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1775,
									"name": "setContourMode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets whether to detect no contours or all contours. Processing time increases as the number of contours to search\nfor increases, so detecting all contours will increase the overall detection time. Note that it would return up\nto 5 faces contours.",
										"text": "Defaults to `VisionFaceDetectorContourMode.NO_CONTOURS`.\n"
									},
									"parameters": [
										{
											"id": 1776,
											"name": "contourMode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The contour mode used by the detector.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "NO_CONTOURS",
														"id": 1830
													},
													{
														"type": "reference",
														"name": "ALL_CONTOURS",
														"id": 1831
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionFaceDetectorOptions",
										"id": 1770
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 134,
									"character": 18
								}
							]
						},
						{
							"id": 1777,
							"name": "setLandmarkMode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1778,
									"name": "setLandmarkMode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets whether to detect no landmarks or all landmarks. Processing time increases as the number of landmarks to\nsearch for increases, so detecting all landmarks will increase the overall detection time. Detecting landmarks\ncan improve pose estimation.",
										"text": "Defaults to `VisionFaceDetectorLandmarkMode.NO_LANDMARKS`.\n"
									},
									"parameters": [
										{
											"id": 1779,
											"name": "landmarkMode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The performance mode used by the detector.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "NO_LANDMARKS",
														"id": 1833
													},
													{
														"type": "reference",
														"name": "ALL_LANDMARKS",
														"id": 1834
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionFaceDetectorOptions",
										"id": 1770
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 149,
									"character": 19
								}
							]
						},
						{
							"id": 1780,
							"name": "setMinFaceSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1781,
									"name": "setMinFaceSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the smallest desired face size, expressed as a proportion of the width of the head to the image width. For\nexample, if a value of 0.1 is specified then the smallest face to search for is roughly 10% of the width of the\nimage being searched.",
										"text": "Setting the min face size is a performance vs. accuracy trade-off: setting the face size smaller will enable the\ndetector to find smaller faces but detection will take longer; setting the face size larger will exclude smaller\nfaces but will run faster.\n\nThis is not a hard limit on face size; the detector may find faces slightly smaller than specified.\n\nDefaults to 0.1.\n"
									},
									"parameters": [
										{
											"id": 1782,
											"name": "minFaceSize",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The smallest head size to search for relative to the size of the image, in the range of 0.0 and 1.0. For example, a setting of 0.5 would indicate that detected faces need to fill at least half of the image width. The default size is 0.1.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionFaceDetectorOptions",
										"id": 1770
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 170,
									"character": 18
								}
							]
						},
						{
							"id": 1783,
							"name": "setPerformanceMode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1784,
									"name": "setPerformanceMode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extended option for controlling additional accuracy / speed trade-offs in performing face detection. In general,\nchoosing the more accurate mode will generally result in longer runtime, whereas choosing the faster mode will\ngenerally result in detecting fewer faces.",
										"text": "Defaults to `VisionFaceDetectorPerformanceMode.FAST`.\n"
									},
									"parameters": [
										{
											"id": 1785,
											"name": "performanceMode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Fast/accurate trade-off mode.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FAST",
														"id": 1836
													},
													{
														"type": "reference",
														"name": "ACCURATE",
														"id": 1837
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionFaceDetectorOptions",
										"id": 1770
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 181,
									"character": 22
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1771,
								1774,
								1777,
								1780,
								1783
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 101,
							"character": 40
						}
					]
				},
				{
					"id": 1786,
					"name": "VisionImageLabelerOptions",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Options for on device image labeler. Confidence threshold could be provided for the label detection.",
						"text": "For example, if the confidence threshold is set to 0.7, only labels with confidence >= 0.7 would be returned.\nThe default threshold is 0.5.\n\n#### Example\n\n```js\nconst labelerOptions = new VisionImageLabelerOptions();\nlabelerOptions.setConfidenceThreshold(0.8);\n\nawait firebase.mlKitVision().imageLabelerProcessImage(filePath, labelerOptions);\n```\n"
					},
					"children": [
						{
							"id": 1787,
							"name": "setConfidenceThreshold",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1788,
									"name": "setConfidenceThreshold",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets confidence threshold of detected labels. Only labels detected with confidence higher than this threshold are returned.",
										"text": "Defaults to 0.5.\n\n#### Example\n\n```js\nconst labelerOptions = new VisionImageLabelerOptions();\nlabelerOptions.setConfidenceThreshold(0.8);\n```\n"
									},
									"parameters": [
										{
											"id": 1789,
											"name": "confidenceThreshold",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A confidence threshold in the range of [0.0 - 1.0].\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VisionImageLabelerOptions",
										"id": 1786
									}
								}
							],
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 218,
									"character": 26
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1787
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 203,
							"character": 40
						}
					]
				},
				{
					"id": 1747,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 1765,
							"name": "VisionBarcodeAddressType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 77,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeAddressType",
								"id": 1765
							}
						},
						{
							"id": 1769,
							"name": "VisionBarcodeDetectorOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 81,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeDetectorOptions",
								"id": 1769
							}
						},
						{
							"id": 1766,
							"name": "VisionBarcodeEmailType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 78,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeEmailType",
								"id": 1766
							}
						},
						{
							"id": 1763,
							"name": "VisionBarcodeFormat",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 75,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeFormat",
								"id": 1763
							}
						},
						{
							"id": 1767,
							"name": "VisionBarcodePhoneType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 79,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodePhoneType",
								"id": 1767
							}
						},
						{
							"id": 1764,
							"name": "VisionBarcodeValueType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 76,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeValueType",
								"id": 1764
							}
						},
						{
							"id": 1768,
							"name": "VisionBarcodeWifiEncryptionType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 80,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeWifiEncryptionType",
								"id": 1768
							}
						},
						{
							"id": 1753,
							"name": "VisionCloudDocumentTextRecognizerOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 65,
									"character": 44
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionCloudDocumentTextRecognizerOptions",
								"id": 1817
							}
						},
						{
							"id": 1750,
							"name": "VisionCloudImageLabelerOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 62,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionCloudImageLabelerOptions",
								"id": 1790
							}
						},
						{
							"id": 1761,
							"name": "VisionCloudLandmarkRecognizerModelType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 73,
									"character": 42
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionCloudLandmarkRecognizerModelType",
								"id": 1805
							}
						},
						{
							"id": 1752,
							"name": "VisionCloudLandmarkRecognizerOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 64,
									"character": 40
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionCloudLandmarkRecognizerOptions",
								"id": 1796
							}
						},
						{
							"id": 1754,
							"name": "VisionCloudTextRecognizerModelType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 66,
									"character": 38
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionCloudTextRecognizerModelType",
								"id": 1823
							}
						},
						{
							"id": 1751,
							"name": "VisionCloudTextRecognizerOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 63,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionCloudTextRecognizerOptions",
								"id": 1808
							}
						},
						{
							"id": 1762,
							"name": "VisionDocumentTextRecognizedBreakType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 74,
									"character": 41
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionDocumentTextRecognizedBreakType",
								"id": 1868
							}
						},
						{
							"id": 1760,
							"name": "VisionFaceContourType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 72,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceContourType",
								"id": 1943
							}
						},
						{
							"id": 1755,
							"name": "VisionFaceDetectorClassificationMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 67,
									"character": 40
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceDetectorClassificationMode",
								"id": 1826
							}
						},
						{
							"id": 1756,
							"name": "VisionFaceDetectorContourMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 68,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceDetectorContourMode",
								"id": 1829
							}
						},
						{
							"id": 1757,
							"name": "VisionFaceDetectorLandmarkMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 69,
									"character": 34
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceDetectorLandmarkMode",
								"id": 1832
							}
						},
						{
							"id": 1748,
							"name": "VisionFaceDetectorOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 60,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceDetectorOptions",
								"id": 1770
							}
						},
						{
							"id": 1758,
							"name": "VisionFaceDetectorPerformanceMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 70,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceDetectorPerformanceMode",
								"id": 1835
							}
						},
						{
							"id": 1759,
							"name": "VisionFaceLandmarkType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 71,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceLandmarkType",
								"id": 1929
							}
						},
						{
							"id": 1749,
							"name": "VisionImageLabelerOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 61,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionImageLabelerOptions",
								"id": 1786
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1765,
								1769,
								1766,
								1763,
								1767,
								1764,
								1768,
								1753,
								1750,
								1761,
								1752,
								1754,
								1751,
								1762,
								1760,
								1755,
								1756,
								1757,
								1748,
								1758,
								1759,
								1749
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 59,
							"character": 26
						}
					]
				},
				{
					"id": 1617,
					"name": "VisionBarcode",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A representation of a barcode detected in an image.",
						"text": "#### Example\n\n```js\nconst [barcode, ...otherBarcodes] = await firebase.mlKitVision().barcodeDetectorProcessImage(filePath);\nconsole.log(barcode);\n```\n"
					},
					"children": [
						{
							"id": 1618,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected barcode."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 52,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							}
						},
						{
							"id": 1624,
							"name": "calendarEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed calendar event (set if `valueType` is `VisionBarcodeValueType.CALENDAR_EVENT`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.CALENDAR_EVENT) {\n  console.log(barcode.calendarEvent);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 113,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeCalendarEvent",
								"id": 1661
							}
						},
						{
							"id": 1625,
							"name": "contactInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed contact details (set if `valueType` is `VisionBarcodeValueType.CONTACT_INFO`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.CONTACT_INFO) {\n  console.log(barcode.contactInfo);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 130,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeContactInfo",
								"id": 1669
							}
						},
						{
							"id": 1619,
							"name": "cornerPoints",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the four corner points in clockwise direction starting with top-left. Due to the possible perspective distortions, this is not necessarily a rectangle. Parts of the region could be outside of the image."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 57,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionPoint",
									"id": 1998
								}
							}
						},
						{
							"id": 1622,
							"name": "displayValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns barcode value in a user-friendly format.",
								"text": "May omit some of the information encoded in the barcode. For example, if `'rawValue returns `MEBKM:TITLE:Invertase;URL://invertase.io;;'`, the display_value might be `'//invertase.io'`.\n\nIf `valueType` === `VisionBarcodeValueType.TEXT`, this field will be identical to `rawValue`.\n\nThis value can also be multiline, for example, when line breaks are encoded into the original `TEXT` barcode value.\n\nReturns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 87,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1626,
							"name": "driverLicense",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed drivers license details (set if `valueType` is `VisionBarcodeValueType.DRIVER_LICENSE`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.DRIVER_LICENSE) {\n  console.log(barcode.driverLicense);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 147,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeDriverLicense",
								"id": 1646
							}
						},
						{
							"id": 1627,
							"name": "email",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed email details (set if `valueType` is `VisionBarcodeValueType.EMAIL`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.EMAIL) {\n  console.log(barcode.email);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 164,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeEmail",
								"id": 1688
							}
						},
						{
							"id": 1620,
							"name": "format",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the barcode format, for example `VisionBarcodeFormat.QR_CODE`",
								"text": "Use with `VisionBarcodeFormat` to switch based on format if needed.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 64,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1628,
							"name": "geoPoint",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed Geo Point details (set if `valueType` is `VisionBarcodeValueType.GEO`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.GEO) {\n  console.log(barcode.geoPoint);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 181,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeGeoPoint",
								"id": 1643
							}
						},
						{
							"id": 1629,
							"name": "phone",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed phone details (set if `valueType` is `VisionBarcodeValueType.PHONE`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.PHONE) {\n  console.log(barcode.phone);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 198,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodePhone",
								"id": 1692
							}
						},
						{
							"id": 1623,
							"name": "rawValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns barcode value as it was encoded in the barcode.",
								"text": "Structured values are not parsed.\n\nReturns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 96,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1630,
							"name": "sms",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed sms details (set if `valueType` is `VisionBarcodeValueType.SMS`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.SMS) {\n  console.log(barcode.sms);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 215,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeSms",
								"id": 1640
							}
						},
						{
							"id": 1631,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed url details (set if `valueType` is `VisionBarcodeValueType.URL`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.URL) {\n  console.log(barcode.url);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 232,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeUrl",
								"id": 1637
							}
						},
						{
							"id": 1621,
							"name": "valueType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns type of the barcode value, for example `VisionBarcodeValueType.EMAIL`.",
								"text": "If the value structure cannot be parsed, `VisionBarcodeValueType.TEXT` will be returned.\nIf the recognized structure type is not defined in the current version of the native Firebase SDKs, `VisionBarcodeValueType.UNKNOWN` will be returned.\n\nNote that the built-in parsers only recognize a few popular value structures. For your specific use case, you might want to directly consume `rawValue` and implement your own parsing logic.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 74,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1632,
							"name": "wifi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gets parsed wifi details (set if `valueType` is `VisionBarcodeValueType.WIFI`).",
								"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.WIFI) {\n  console.log(barcode.wifi);\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 249,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodeWifi",
								"id": 1633
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1618,
								1624,
								1625,
								1619,
								1622,
								1626,
								1627,
								1620,
								1628,
								1629,
								1623,
								1630,
								1631,
								1621,
								1632
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 48,
							"character": 32
						}
					]
				},
				{
					"id": 1677,
					"name": "VisionBarcodeAddress",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A contacts address."
					},
					"children": [
						{
							"id": 1678,
							"name": "lines",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of address line strings of the formatted address."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 629,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1679,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The address type, e.g. `VisionBarcodeAddressType.WORK`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 634,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1678,
								1679
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 625,
							"character": 39
						}
					]
				},
				{
					"id": 1661,
					"name": "VisionBarcodeCalendarEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A calendar event extracted from QRCode.",
						"text": "```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.CALENDAR_EVENT) {\n  console.log(barcode.calendarEvent);\n}\n```\n"
					},
					"children": [
						{
							"id": 1662,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The description of the calendar event.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 513,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1663,
							"name": "end",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The end date time of the calendar event.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 520,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1664,
							"name": "location",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The location of the calendar event.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 527,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1665,
							"name": "organizer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The organizer of the calendar event.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 534,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1666,
							"name": "start",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The start date time of the calendar event.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 541,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1667,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The status of the calendar event.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 548,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1668,
							"name": "summary",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The summary of the calendar event.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 555,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1662,
								1663,
								1664,
								1665,
								1666,
								1667,
								1668
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 507,
							"character": 45
						}
					]
				},
				{
					"id": 1669,
					"name": "VisionBarcodeContactInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A persons or organization's business card. For example a VCARD.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.CONTACT_INFO) {\n  console.log(barcode.contactInfo);\n}\n```\n"
					},
					"children": [
						{
							"id": 1676,
							"name": "addresses",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an array of the contact persons addresses.",
								"text": "Returns an empty array if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 619,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionBarcodeAddress",
									"id": 1677
								}
							}
						},
						{
							"id": 1674,
							"name": "emails",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the contact persons emails.",
								"text": "Returns an empty array if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 607,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionBarcodeEmail",
									"id": 1688
								}
							}
						},
						{
							"id": 1675,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the contact persons name."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 612,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionBarcodePersonName",
								"id": 1680
							}
						},
						{
							"id": 1672,
							"name": "organization",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the contact persons organization.",
								"text": "Returns `null` if no organization detected.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 593,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1673,
							"name": "phones",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the contact persons phones.",
								"text": "Returns an empty array if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 600,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionBarcodePhone",
									"id": 1692
								}
							}
						},
						{
							"id": 1671,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the contact persons title. E.g. `Dr`",
								"text": "Returns `null` if no title detected.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 586,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1670,
							"name": "urls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Get an array of detected urls for the contact.",
								"text": "Returns an empty array if nothing found;\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 579,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1676,
								1674,
								1675,
								1672,
								1673,
								1671,
								1670
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 573,
							"character": 43
						}
					]
				},
				{
					"id": 1646,
					"name": "VisionBarcodeDriverLicense",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A driver license or ID card.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.DRIVER_LICENSE) {\n  console.log(barcode.driverLicense);\n}\n```\n"
					},
					"children": [
						{
							"id": 1647,
							"name": "addressCity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets city of holder's address.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 400,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1648,
							"name": "addressState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets state of holder's address.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 407,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1649,
							"name": "addressStreet",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The holder's street address.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 414,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1650,
							"name": "addressZip",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The zip code of holder's address.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 421,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1651,
							"name": "birthDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The birth date of the holder.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 428,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1652,
							"name": "documentType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The \"DL\" for driver licenses, \"ID\" for ID cards.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 435,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1653,
							"name": "expiryDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The expiry date of the license.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 442,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1654,
							"name": "firstName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The holder's first name.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 449,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1655,
							"name": "gender",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The holder's gender.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 456,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1656,
							"name": "issueDate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The issue date of the license.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 463,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1657,
							"name": "issuingCountry",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The country in which DL/ID was issued.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 470,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1658,
							"name": "lastName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The holder's last name.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 477,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1659,
							"name": "licenseNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The driver license ID number.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 484,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1660,
							"name": "middleName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The holder's middle name.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 491,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1647,
								1648,
								1649,
								1650,
								1651,
								1652,
								1653,
								1654,
								1655,
								1656,
								1657,
								1658,
								1659,
								1660
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 394,
							"character": 45
						}
					]
				},
				{
					"id": 1688,
					"name": "VisionBarcodeEmail",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An email message from a 'MAILTO:' or similar QRCode type, or from a ContactInfo/VCARD.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.EMAIL) {\n  console.log(barcode.email);\n} else if (barcode && barcode.valueType === VisionBarcodeValueType.CONTACT_INFO) {\n  console.log(barcode.contactInfo.emails[0]);\n}\n```\n"
					},
					"children": [
						{
							"id": 1689,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The email address.",
								"text": "Returns `null` if non detected for this `type`.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 712,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1690,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The email body content.",
								"text": "Returns `null` if no body detected.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 719,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1691,
							"name": "subject",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The email subject.",
								"text": "Returns `null` if no subject was detected.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 726,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1689,
								1690,
								1691
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 706,
							"character": 37
						}
					]
				},
				{
					"id": 1643,
					"name": "VisionBarcodeGeoPoint",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "GPS coordinates from a 'GEO:' or similar QRCode type.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.GEO) {\n  console.log(barcode.geoPoint);\n}\n```\n"
					},
					"children": [
						{
							"id": 1644,
							"name": "lat",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The latitude for these GPS coordinates."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 371,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1645,
							"name": "lng",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The longitude for these GPS coordinates."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 376,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1644,
								1645
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 367,
							"character": 40
						}
					]
				},
				{
					"id": 1680,
					"name": "VisionBarcodePersonName",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A persons name, both formatted version and their individual name components."
					},
					"children": [
						{
							"id": 1681,
							"name": "first",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The persons first name.",
								"text": "Returns `null` if not found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 646,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1682,
							"name": "formatted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A properly formatted name.",
								"text": "Returns `null` if no name components found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 653,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1683,
							"name": "last",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The persons last name.",
								"text": "Returns `null` if not found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 660,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1684,
							"name": "middle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The persons middle name.",
								"text": "Returns `null` if not found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 667,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1685,
							"name": "prefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The prefix of the name.",
								"text": "Returns `null` if not found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 674,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1686,
							"name": "pronunciation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Designates a text string to be set as the kana name in the phonebook."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 679,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1687,
							"name": "suffix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The suffix of the persons name.",
								"text": "Returns `null` if not found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 686,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1681,
								1682,
								1683,
								1684,
								1685,
								1686,
								1687
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 640,
							"character": 42
						}
					]
				},
				{
					"id": 1692,
					"name": "VisionBarcodePhone",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A phone number and it's detected type, e.g. `VisionBarcodePhoneType.MOBILE`",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.PHONE) {\n  console.log(barcode.phone);\n} else if (barcode && barcode.valueType === VisionBarcodeValueType.CONTACT_INFO) {\n  console.log(barcode.contactInfo.phones[0]);\n}\n```\n"
					},
					"children": [
						{
							"id": 1693,
							"name": "number",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The detected phone number.",
								"text": "Returns `null` if no number detected for this type.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 752,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1694,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets type of the phone number, e.g. `VisionBarcodePhoneType.MOBILE`.",
								"text": "See also `VisionBarcodePhoneType`.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 759,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1693,
								1694
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 746,
							"character": 37
						}
					]
				},
				{
					"id": 1640,
					"name": "VisionBarcodeSms",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An sms message from an 'SMS:' or similar QRCode type.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.SMS) {\n  console.log(barcode.sms);\n}\n```\n"
					},
					"children": [
						{
							"id": 1641,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The message text for this SMS.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 342,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1642,
							"name": "phoneNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The phone number for this SMS.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 349,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1641,
								1642
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 336,
							"character": 35
						}
					]
				},
				{
					"id": 1637,
					"name": "VisionBarcodeUrl",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A URL and title from a 'MEBKM:' or similar QRCode type.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.URL) {\n  console.log(barcode.url);\n}\n```\n"
					},
					"children": [
						{
							"id": 1638,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The title for this url.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 311,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1639,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The URL.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 318,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1638,
								1639
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 305,
							"character": 35
						}
					]
				},
				{
					"id": 1633,
					"name": "VisionBarcodeWifi",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Wifi network parameters from a 'WIFI:' or similar QRCode type.",
						"text": "#### Example\n\n```js\nimport vision, { VisionBarcodeValueType } from '@react-native-firebase/ml-vision';\n\nconst [barcode, ...otherBarcodes] = await vision().barcodeDetectorProcessImage(filePath);\n\nif (barcode && barcode.valueType === VisionBarcodeValueType.WIFI) {\n  console.log(barcode.wifi);\n}\n```\n"
					},
					"children": [
						{
							"id": 1634,
							"name": "encryptionType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The encryption type of the WIFI. e.g. `VisionBarcodeWifiEncryptionType.WPA`",
								"text": "See all types at `VisionBarcodeWifiEncryptionType`.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 273,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1635,
							"name": "password",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The password for this WIFI.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 280,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1636,
							"name": "ssid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The SSID for this WIFI.",
								"text": "Returns `null` if nothing found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
									"line": 287,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1634,
								1635,
								1636
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
							"line": 267,
							"character": 36
						}
					]
				},
				{
					"id": 1884,
					"name": "VisionDocumentText",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A hierarchical representation of document text recognized in an image."
					},
					"children": [
						{
							"id": 1885,
							"name": "blocks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an array `VisionTextBlock`, which is a block of text that can be further decomposed to an array of `VisionDocumentTextParagraph`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 703,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionDocumentTextBlock",
									"id": 1841
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "VisionText.blocks",
								"id": 1840
							}
						},
						{
							"id": 1886,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Retrieve the recognized text as a string."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 569,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionText.text",
								"id": 1839
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1885,
								1886
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 699,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionText",
							"id": 1838
						}
					]
				},
				{
					"id": 1878,
					"name": "VisionDocumentTextBase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A shared type that all VisionDocumentText components inherit from"
					},
					"children": [
						{
							"id": 1882,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 688,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							}
						},
						{
							"id": 1880,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 676,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1883,
							"name": "recognizedBreak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized break - the detected start or end of a structural component."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 693,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionDocumentTextRecognizedBreak",
								"id": 1875
							}
						},
						{
							"id": 1881,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 683,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							}
						},
						{
							"id": 1879,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 671,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1882,
								1880,
								1883,
								1881,
								1879
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 667,
							"character": 41
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "VisionDocumentTextBlock",
							"id": 1841
						},
						{
							"type": "reference",
							"name": "VisionDocumentTextParagraph",
							"id": 1848
						},
						{
							"type": "reference",
							"name": "VisionDocumentTextWord",
							"id": 1855
						},
						{
							"type": "reference",
							"name": "VisionDocumentTextSymbol",
							"id": 1862
						}
					]
				},
				{
					"id": 1841,
					"name": "VisionDocumentTextBlock",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a block of text."
					},
					"children": [
						{
							"id": 1846,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 688,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.boundingBox",
								"id": 1882
							}
						},
						{
							"id": 1844,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 676,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.confidence",
								"id": 1880
							}
						},
						{
							"id": 1842,
							"name": "paragraphs",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an Array of `VisionDocumentTextParagraph`s that make up this block."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 584,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionDocumentTextParagraph",
									"id": 1848
								}
							}
						},
						{
							"id": 1847,
							"name": "recognizedBreak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized break - the detected start or end of a structural component."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 693,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionDocumentTextRecognizedBreak",
								"id": 1875
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedBreak",
								"id": 1883
							}
						},
						{
							"id": 1845,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 683,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedLanguages",
								"id": 1881
							}
						},
						{
							"id": 1843,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 671,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.text",
								"id": 1879
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1846,
								1844,
								1842,
								1847,
								1845,
								1843
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 580,
							"character": 42
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionDocumentTextBase",
							"id": 1878
						}
					]
				},
				{
					"id": 1848,
					"name": "VisionDocumentTextParagraph",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A structural unit of text representing a number of words in certain order."
					},
					"children": [
						{
							"id": 1853,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 688,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.boundingBox",
								"id": 1882
							}
						},
						{
							"id": 1851,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 676,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.confidence",
								"id": 1880
							}
						},
						{
							"id": 1854,
							"name": "recognizedBreak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized break - the detected start or end of a structural component."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 693,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionDocumentTextRecognizedBreak",
								"id": 1875
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedBreak",
								"id": 1883
							}
						},
						{
							"id": 1852,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 683,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedLanguages",
								"id": 1881
							}
						},
						{
							"id": 1850,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 671,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.text",
								"id": 1879
							}
						},
						{
							"id": 1849,
							"name": "words",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an Array of `VisionDocumentTextWord`s that make up this paragraph.",
								"text": "Returns an empty list if no Word is found.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 596,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionDocumentTextWord",
									"id": 1855
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1853,
								1851,
								1854,
								1852,
								1850,
								1849
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 590,
							"character": 46
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionDocumentTextBase",
							"id": 1878
						}
					]
				},
				{
					"id": 1875,
					"name": "VisionDocumentTextRecognizedBreak",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A recognized break is the detected start or end of a structural component."
					},
					"children": [
						{
							"id": 1876,
							"name": "breakType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets detected break type."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 657,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionDocumentTextRecognizedBreakType",
								"id": 1868
							}
						},
						{
							"id": 1877,
							"name": "isPrefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns true if break prepends an element."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 662,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1876,
								1877
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 653,
							"character": 52
						}
					]
				},
				{
					"id": 1862,
					"name": "VisionDocumentTextSymbol",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A single symbol representation."
					},
					"children": [
						{
							"id": 1866,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 688,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.boundingBox",
								"id": 1882
							}
						},
						{
							"id": 1864,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 676,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.confidence",
								"id": 1880
							}
						},
						{
							"id": 1867,
							"name": "recognizedBreak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized break - the detected start or end of a structural component."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 693,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionDocumentTextRecognizedBreak",
								"id": 1875
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedBreak",
								"id": 1883
							}
						},
						{
							"id": 1865,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 683,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedLanguages",
								"id": 1881
							}
						},
						{
							"id": 1863,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 671,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.text",
								"id": 1879
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1866,
								1864,
								1867,
								1865,
								1863
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 613,
							"character": 43
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionDocumentTextBase",
							"id": 1878
						}
					]
				},
				{
					"id": 1855,
					"name": "VisionDocumentTextWord",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A single word representation."
					},
					"children": [
						{
							"id": 1860,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 688,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.boundingBox",
								"id": 1882
							}
						},
						{
							"id": 1858,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 676,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.confidence",
								"id": 1880
							}
						},
						{
							"id": 1861,
							"name": "recognizedBreak",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized break - the detected start or end of a structural component."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 693,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionDocumentTextRecognizedBreak",
								"id": 1875
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedBreak",
								"id": 1883
							}
						},
						{
							"id": 1859,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 683,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.recognizedLanguages",
								"id": 1881
							}
						},
						{
							"id": 1856,
							"name": "symbols",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an Array of `VisionDocumentTextSymbol`s that make up this word.\nThe order of the symbols follows the natural reading order."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 607,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionDocumentTextSymbol",
									"id": 1862
								}
							}
						},
						{
							"id": 1857,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 671,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionDocumentTextBase.text",
								"id": 1879
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1860,
								1858,
								1861,
								1859,
								1856,
								1857
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 602,
							"character": 41
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionDocumentTextBase",
							"id": 1878
						}
					]
				},
				{
					"id": 1917,
					"name": "VisionFace",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a face returned from `faceDetectorProcessImage()`."
					},
					"children": [
						{
							"id": 1918,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the axis-aligned bounding rectangle of the detected face."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 796,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							}
						},
						{
							"id": 1919,
							"name": "faceContours",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Represent a face contour. A contour is a list of points on a detected face, such as the mouth.",
								"text": "When 'left' and 'right' are used, they are relative to the subject in the image. For example, the `LEFT_EYE`\nlandmark is the subject's left eye, not the eye that is on the left when viewing the image.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 804,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionFaceContour",
									"id": 1940
								}
							}
						},
						{
							"id": 1920,
							"name": "headEulerAngleY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the rotation of the face about the vertical axis of the image. Positive euler y is when the face turns\ntoward the right side of the of the image that is being processed."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 810,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1921,
							"name": "headEulerAngleZ",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the rotation of the face about the axis pointing out of the image. Positive euler z is a\ncounter-clockwise rotation within the image plane."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 816,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1922,
							"name": "landmarks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an array of `VisionFaceLandmark`.",
								"text": "Returns an empty array if the landmark mode has not been enabled via `setLandmarkMode()`.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 823,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionFaceLandmark",
									"id": 1926
								}
							}
						},
						{
							"id": 1923,
							"name": "leftEyeOpenProbability",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a value between 0.0 and 1.0 giving a probability that the face's left eye is open.",
								"text": "Returns -1 if the classification mode has not been enabled via `setClassificationMode()`.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 830,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1924,
							"name": "rightEyeOpenProbability",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a value between 0.0 and 1.0 giving a probability that the face's right eye is open.",
								"text": "Returns -1 if the classification mode has not been enabled via `setClassificationMode()`.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 837,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1925,
							"name": "smilingProbability",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a value between 0.0 and 1.0 giving a probability that the face is smiling.",
								"text": "Returns -1 if the classification mode has not been enabled via `setClassificationMode()`.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 844,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1918,
								1919,
								1920,
								1921,
								1922,
								1923,
								1924,
								1925
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 792,
							"character": 29
						}
					]
				},
				{
					"id": 1940,
					"name": "VisionFaceContour",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represent a face contour. A contour is a list of points on a detected face, such as the mouth.\nWhen 'left' and 'right' are used, they are relative to the subject in the image. For example, the `LEFT_EYE` landmark\nis the subject's left eye, not the eye that is on the left when viewing the image."
					},
					"children": [
						{
							"id": 1942,
							"name": "points",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of 2D points for this face contour, where (0, 0) is the upper-left corner of the image. The point is\nguaranteed to be within the bounds of the image."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 935,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionPoint",
									"id": 1998
								}
							}
						},
						{
							"id": 1941,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the contour type."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 929,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceContourType",
								"id": 1943
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1942,
								1941
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 925,
							"character": 36
						}
					]
				},
				{
					"id": 1926,
					"name": "VisionFaceLandmark",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represent a face landmark. A landmark is a point on a detected face, such as an eye, nose, or mouth.",
						"text": "When 'left' and 'right' are used, they are relative to the subject in the image.  For example, the `LEFT_EYE` landmark\nis the subject's left eye, not the eye that is on the left when viewing the image.\n"
					},
					"children": [
						{
							"id": 1928,
							"name": "position",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a 2D point for landmark position, where (0, 0) is the upper-left corner of the image."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 862,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionPoint",
									"id": 1998
								}
							}
						},
						{
							"id": 1927,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the landmark type."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 857,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionFaceLandmarkType",
								"id": 1929
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1928,
								1927
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 853,
							"character": 37
						}
					]
				},
				{
					"id": 1913,
					"name": "VisionImageLabel",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents an image label return from `imageLabelerProcessImage()` and `cloudImageLabelerProcessImage()`."
					},
					"children": [
						{
							"id": 1916,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets overall confidence of the result.",
								"text": "Range between 0 (low confidence) and 1 (high confidence).\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 786,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1915,
							"name": "entityId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an opaque entity ID. IDs are available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 779,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1914,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a detected label from the given image. The label returned here is in English only.",
								"text": "Use `entityId` to retrieve a unique id.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 774,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1916,
								1915,
								1914
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 768,
							"character": 35
						}
					]
				},
				{
					"id": 1958,
					"name": "VisionLandmark",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a detected landmark returned from `cloudLandmarkRecognizerProcessImage()`."
					},
					"children": [
						{
							"id": 1959,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets image region of the detected landmark. Returns null if nothing was detected"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1020,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "VisionRectangle",
										"id": 1997
									},
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						},
						{
							"id": 1960,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets overall confidence of the result. Ranging between 0 & 1."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1025,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1961,
							"name": "entityId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1030,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1962,
							"name": "landmark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the detected landmark."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1035,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1963,
							"name": "locations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the location information for the detected entity.",
								"text": "Multiple FirebaseVisionLatLng elements can be present because one location may indicate the location of the scene\nin the image, and another location may indicate the location of the place where the image was taken.\nLocation information is usually present for landmarks.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 1044,
									"character": 13
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionLatLng",
									"id": 1999
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1959,
								1960,
								1961,
								1962,
								1963
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 1016,
							"character": 33
						}
					]
				},
				{
					"id": 1838,
					"name": "VisionText",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A hierarchical representation of texts recognized in an image."
					},
					"children": [
						{
							"id": 1840,
							"name": "blocks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an array `VisionTextBlock`, which is a block of text that can be further decomposed to an array of `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 574,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionTextBlock",
									"id": 1893
								}
							}
						},
						{
							"id": 1839,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Retrieve the recognized text as a string."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 569,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1840,
								1839
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 565,
							"character": 29
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "VisionDocumentText",
							"id": 1884
						}
					]
				},
				{
					"id": 1887,
					"name": "VisionTextBase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A shared type that all Vision Text components inherit from"
					},
					"children": [
						{
							"id": 1891,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 730,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							}
						},
						{
							"id": 1889,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 718,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 1892,
							"name": "cornerPoints",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the four corner points in clockwise direction starting with top-left. Due to the possible perspective distortions, this is not necessarily a rectangle. Parts of the region could be outside of the image."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionPoint",
									"id": 1998
								}
							}
						},
						{
							"id": 1890,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 725,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							}
						},
						{
							"id": 1888,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 713,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1891,
								1889,
								1892,
								1890,
								1888
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 709,
							"character": 33
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "VisionTextBlock",
							"id": 1893
						},
						{
							"type": "reference",
							"name": "VisionTextLine",
							"id": 1900
						},
						{
							"type": "reference",
							"name": "VisionTextElement",
							"id": 1907
						}
					]
				},
				{
					"id": 1893,
					"name": "VisionTextBlock",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a block of text (similar to a paragraph)."
					},
					"children": [
						{
							"id": 1898,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 730,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.boundingBox",
								"id": 1891
							}
						},
						{
							"id": 1896,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 718,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.confidence",
								"id": 1889
							}
						},
						{
							"id": 1899,
							"name": "cornerPoints",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the four corner points in clockwise direction starting with top-left. Due to the possible perspective distortions, this is not necessarily a rectangle. Parts of the region could be outside of the image."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionPoint",
									"id": 1998
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.cornerPoints",
								"id": 1892
							}
						},
						{
							"id": 1894,
							"name": "lines",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an Array of VisionTextLine's that make up this text block."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 745,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionTextLine",
									"id": 1900
								}
							}
						},
						{
							"id": 1897,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 725,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.recognizedLanguages",
								"id": 1890
							}
						},
						{
							"id": 1895,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 713,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.text",
								"id": 1888
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1898,
								1896,
								1899,
								1894,
								1897,
								1895
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 741,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionTextBase",
							"id": 1887
						}
					]
				},
				{
					"id": 1907,
					"name": "VisionTextElement",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Roughly equivalent to a space-separated \"word\" in most Latin languages, or a character in others. For instance, if a word is split between two lines by a hyphen, each part is encoded as a separate Element."
					},
					"children": [
						{
							"id": 1911,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 730,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.boundingBox",
								"id": 1891
							}
						},
						{
							"id": 1909,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 718,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.confidence",
								"id": 1889
							}
						},
						{
							"id": 1912,
							"name": "cornerPoints",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the four corner points in clockwise direction starting with top-left. Due to the possible perspective distortions, this is not necessarily a rectangle. Parts of the region could be outside of the image."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionPoint",
									"id": 1998
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.cornerPoints",
								"id": 1892
							}
						},
						{
							"id": 1910,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 725,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.recognizedLanguages",
								"id": 1890
							}
						},
						{
							"id": 1908,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 713,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.text",
								"id": 1888
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1911,
								1909,
								1912,
								1910,
								1908
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 763,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionTextBase",
							"id": 1887
						}
					]
				},
				{
					"id": 1900,
					"name": "VisionTextLine",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a line of text."
					},
					"children": [
						{
							"id": 1905,
							"name": "boundingBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the bounding rectangle of the detected text."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 730,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "VisionRectangle",
								"id": 1997
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.boundingBox",
								"id": 1891
							}
						},
						{
							"id": 1903,
							"name": "confidence",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The confidence of the recognized text. It only return valid result from cloud recognizers. For on-device text recognition, the confidence is always null."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 718,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "null"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.confidence",
								"id": 1889
							}
						},
						{
							"id": 1906,
							"name": "cornerPoints",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the four corner points in clockwise direction starting with top-left. Due to the possible perspective distortions, this is not necessarily a rectangle. Parts of the region could be outside of the image."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 735,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionPoint",
									"id": 1998
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.cornerPoints",
								"id": 1892
							}
						},
						{
							"id": 1901,
							"name": "elements",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets an Array of VisionTextElement's that make up this text block.",
								"text": "An element is roughly equivalent to a space-separated \"word\" in most Latin languages, or a character in others. For instance, if a word is split between two lines by a hyphen, each part is encoded as a separate Element.\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 757,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "VisionTextElement",
									"id": 1907
								}
							}
						},
						{
							"id": 1904,
							"name": "recognizedLanguages",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets a list of recognized languages. (Cloud API only. On-Device returns empty array)",
								"text": "A language is the BCP-47 language code, such as \"en-US\" or \"sr-Latn\".\n"
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 725,
									"character": 23
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "String"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.recognizedLanguages",
								"id": 1890
							}
						},
						{
							"id": 1902,
							"name": "text",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Gets the recognized text as a string. Returned in reading order for the language. For Latin, this is top to bottom within a `VisionTextBlock`, and left-to-right within a `VisionTextLine`."
							},
							"sources": [
								{
									"fileName": "ml-vision/lib/index.d.ts",
									"line": 713,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "VisionTextBase.text",
								"id": 1888
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1905,
								1903,
								1906,
								1901,
								1904,
								1902
							]
						}
					],
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 751,
							"character": 33
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "VisionTextBase",
							"id": 1887
						}
					]
				},
				{
					"id": 1999,
					"name": "VisionLatLng",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An object representing a latitude/longitude pair. This is expressed as a pair of doubles representing degrees latitude and degrees longitude.",
						"text": "Unless specified otherwise, this must conform to the [WGS84](https://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf)\nstandard. Values must be within normalized ranges.\n"
					},
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 1053,
							"character": 26
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 1998,
					"name": "VisionPoint",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A point holds two number coordinates relative to the processed image.\nPoints are represented as [x, y].",
						"text": "Used by Vision Text Recognizer, Face Detector & Landmark Recognition APIs.\n"
					},
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 560,
							"character": 25
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 1997,
					"name": "VisionRectangle",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A Rectangle holds four number coordinates relative to the processed image.\nRectangle are represented as [left, top, right, bottom].",
						"text": "Used by Vision Text Recognizer, Face Detector & Landmark Recognition APIs.\n"
					},
					"sources": [
						{
							"fileName": "ml-vision/lib/index.d.ts",
							"line": 552,
							"character": 29
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						1729,
						1733,
						1699,
						1737,
						1715,
						1743,
						1805,
						1823,
						1868,
						1943,
						1826,
						1829,
						1832,
						1835,
						1929
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1964,
						1695,
						1817,
						1790,
						1796,
						1808,
						1770,
						1786
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1747,
						1617,
						1677,
						1661,
						1669,
						1646,
						1688,
						1643,
						1680,
						1692,
						1640,
						1637,
						1633,
						1884,
						1878,
						1841,
						1848,
						1875,
						1862,
						1855,
						1917,
						1940,
						1926,
						1913,
						1958,
						1838,
						1887,
						1893,
						1907,
						1900
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1999,
						1998,
						1997
					]
				}
			],
			"sources": [
				{
					"fileName": "ml-vision/lib/BarcodeDetectorTypes.d.ts",
					"line": 37,
					"character": 28
				},
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 56,
					"character": 28
				}
			]
		},
		{
			"id": 1456,
			"name": "Messaging",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Messaging package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `messaging` package:\n\n```js\nimport { firebase } from '@react-native-firebase/messaging';\n\n// firebase.messaging().X\n```\n\n#### Example 2\n\nUsing the default export from the `messaging` package:\n\n```js\nimport messaging from '@react-native-firebase/messaging';\n\n// messaging().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/messaging';\n\n// firebase.messaging().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "messaging\n"
					}
				]
			},
			"children": [
				{
					"id": 1493,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Messaging service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Messaging service for the default app:\n\n```js\nconst defaultAppMessaging = firebase.messaging();\n```\n"
					},
					"children": [
						{
							"id": 1561,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 1496,
							"name": "isAutoInitEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns whether messaging auto initialization is enabled or disabled for the device.",
								"text": "#### Example\n\n```js\nconst isAutoInitEnabled = firebase.messaging().isAutoInitEnabled;\n```\n"
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 268,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1524,
							"name": "isRegisteredForRemoteNotifications",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns a boolean value whether the user has registered for remote notifications via\n`registerForRemoteNotifications()`.",
								"text": "#### Example\n\n```js\nconst isRegisteredForRemoteNotifications = firebase.messaging().isRegisteredForRemoteNotifications;\n```\n",
								"tags": [
									{
										"tag": "platform",
										"text": "ios\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 466,
									"character": 38
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1504,
							"name": "deleteToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1505,
									"name": "deleteToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes access to an FCM token previously authorized by it's scope. Messages sent by the server\nto this token will fail.",
										"text": "#### Example\n\n```js\nawait firebase.messaging().deleteToken();\n```\n"
									},
									"parameters": [
										{
											"id": 1506,
											"name": "authorizedEntity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The messaging sender ID. In most cases this will be the current default app."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1507,
											"name": "scope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The scope to assign when token will be deleted.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "\"FCM\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 349,
									"character": 15
								}
							]
						},
						{
							"id": 1527,
							"name": "getAPNSToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1528,
									"name": "getAPNSToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "On iOS, it is possible to get the users APNS token. This may be required if you want to send messages to your\niOS devices without using the FCM service.",
										"text": "#### Example\n\n```js\nconst apnsToken = await firebase.messaging().getAPNSToken();\n\nif (apnsToken) {\n  console.log('User APNS Token:', apnsToken);\n}\n```\n",
										"tags": [
											{
												"tag": "platform",
												"text": "ios\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 499,
									"character": 16
								}
							]
						},
						{
							"id": 1500,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1501,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an FCM token for this device. Optionally you can specify a custom authorized entity\nor scope to tailor tokens to your own use-case.",
										"text": "It is recommended you call this method on app start and update your backend with the new token.\n\n#### Example - Default token\n\n```js\nconst fcmToken = await firebase.messaging().getToken();\n\n// Update backend (e.g. Firestore) with our scoped token for the user\nconst uid = firebase.auth().currentUser.uid;\nawait firebase.firestore().doc(`users/${uid}`)\n  .update({\n    fcmTokens: firebase.firestore.FieldValues.arrayUnion(fcmToken),\n  });\n```\n\n#### Example - Scoped Token\n\nThe below example creates a new token for a specific notification scope (in this case, ALARM).\nYour server can specifically send messages to 'ALARM' tokens. By default, all notification scopes\nwill be received.\n\n```js\n// Get a token for 'ALARM' notifications\nconst alarmFcmToken = await firebase.messaging().getToken(\n  firebase.app().options.messagingSenderId, // default to this app\n  'ALARM', // defaults to 'FCM'\n);\n\n// Update backend (e.g. Firestore) with our scoped token for the user\nconst uid = firebase.auth().currentUser.uid;\nawait firebase.firestore().doc(`users/${uid}`)\n  .update({\n    alarmFcmTokens: firebase.firestore.FieldValues.arrayUnion(alarmFcmToken),\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 1502,
											"name": "authorizedEntity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The messaging sender ID. In most cases this will be the current default app."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 1503,
											"name": "scope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The scope to assign a token, which the sever can use to target messages at.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											},
											"defaultValue": "\"FCM\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 334,
									"character": 12
								}
							]
						},
						{
							"id": 1529,
							"name": "hasPermission",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1530,
									"name": "hasPermission",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a boolean value as to whether the user has messaging permission for this app.",
										"text": "#### Example\n\n```js\nconst hasPermission = await firebase.messaging().hasPermission();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 510,
									"character": 17
								}
							]
						},
						{
							"id": 1494,
							"name": "newRemoteMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1495,
									"name": "newRemoteMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new `RemoteMessageBuilder` which can be passed to `sendMessage()`.",
										"text": "#### Example\n\n```js\nconst messageBuilder = firebase.messaging().newRemoteMessage();\nmessageBuilder.setData({\n  timestamp: Date.now(),\n});\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "RemoteMessageBuilder",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 257,
									"character": 20
								}
							]
						},
						{
							"id": 1531,
							"name": "onDeletedMessages",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1532,
									"name": "onDeletedMessages",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when the FCM server deletes pending messages. This may be due to:",
										"text": "1. Too many messages stored on the FCM server. This can occur when an app's servers send a bunch\nof non-collapsible messages to FCM servers while the device is offline.\n\n2. The device hasn't connected in a long time and the app server has recently (within the last\n4 weeks) sent a message to the app on that device.\n\nIt is recommended that the app do a full sync with the server after receiving this call (e.g.\nrequesting all user messages from the database).\n\nReturns an unsubscribe function to stop listening for deleted messages.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.messaging().onDeletedMessages(() => {\n  // Perform a full app re-sync\n});\n\n// Unsubscribe from deleted messages events\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 1533,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the FCM deletes pending messages.\n"
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 539,
									"character": 21
								}
							]
						},
						{
							"id": 1508,
							"name": "onMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1509,
									"name": "onMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "When any FCM payload is received, the listener callback is called with a `RemoteMessage`.",
										"text": "Returns an unsubscribe function to stop listening for new messages.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.messaging().onMessage(async (remoteMessage) => {\n  console.log('FCM Message Data:', remoteMessage.data);\n\n   // Update a users messages list using AsyncStorage\n   const currentMessages = await AsyncStorage.get('messages');\n   const messageArray = JSON.parse(currentMessages);\n   messageArray.push(remoteMessage.data);\n   await AsyncStorage.set('messages', JSON.stringify(messageArray));\n});\n\n// Unsubscribe from further message events\nunsubscribe();\n```\n\n> This subscriber method is only called when the app is active (in the foreground).\n"
									},
									"parameters": [
										{
											"id": 1510,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with a `RemoteMessage` when a new FCM payload is received from the server.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1511,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1512,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1513,
																	"name": "message",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "RemoteMessage",
																		"id": 1458
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "__type"
															}
														}
													],
													"sources": [
														{
															"fileName": "messaging/lib/index.d.ts",
															"line": 377,
															"character": 23
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 377,
									"character": 13
								}
							]
						},
						{
							"id": 1534,
							"name": "onMessageSent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1535,
									"name": "onMessageSent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "When sending a `RemoteMessage`, this listener is called when the message has been sent to FCM.",
										"text": "Returns an unsubscribe function to stop listening for sent messages.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().onMessageSent((messageId) => {\n  console.log('Message has been sent to the FCM server', messageId);\n});\n\n// Unsubscribe from message sent events\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 1536,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called when the FCM sends the remote message to FCM.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1537,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1538,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1539,
																	"name": "messageId",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "__type"
															}
														}
													],
													"sources": [
														{
															"fileName": "messaging/lib/index.d.ts",
															"line": 559,
															"character": 27
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 559,
									"character": 17
								}
							]
						},
						{
							"id": 1540,
							"name": "onSendError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1541,
									"name": "onSendError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "When sending a `RemoteMessage`, this listener is called when an error is thrown and the\nmessage could not be sent.",
										"text": "Returns an unsubscribe function to stop listening for sent errors.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.firestore().onSendError(({ messageId, error }) => {\n  console.log('An error occurred when sending a message to FCM', messageId, error);\n});\n\n// Unsubscribe from message sent error events\nunsubscribe();\n```\n"
									},
									"parameters": [
										{
											"id": 1542,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1543,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1544,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1545,
																	"name": "evt",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "SendErrorEvent",
																		"id": 1490
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "messaging/lib/index.d.ts",
															"line": 580,
															"character": 25
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 580,
									"character": 15
								}
							]
						},
						{
							"id": 1514,
							"name": "onTokenRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1515,
									"name": "onTokenRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called when a new registration token is generated for the device. For example, this event can happen when a\ntoken expires or when the server invalidates the token.",
										"text": "Your app should always subscribe to this event and update your backend to ensure your device will\nreceive new messages. The listener is only called when the app is active (in foreground), so ensure\nyou call `getToken()` on app open to handle any new tokens generated when the app was not active.\n\nReturns an unsubscribe function to stop listening for token refresh events.\n\n#### Example\n\n```js\nconst unsubscribe = firebase.messaging().onTokenRefresh(async (fcmToken) => {\n  console.log('New FCM Token:', fcmToken);\n\n  // Append the database with the users new FCM token (e.g. with Firestore)\n  const uid = firebase.auth().currentUser.uid;\n  await firebase.firestore().doc(`users/${uid}`)\n    .update({\n      fcmTokens: firebase.firestore.FieldValues.arrayUnion(fcmToken),\n    });\n});\n```\n\n> This subscriber method is only called when the app is active (in the foreground).\n"
									},
									"parameters": [
										{
											"id": 1516,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Called with a FCM token when the token is refreshed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1517,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1518,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1519,
																	"name": "token",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "__type"
															}
														}
													],
													"sources": [
														{
															"fileName": "messaging/lib/index.d.ts",
															"line": 408,
															"character": 28
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 408,
									"character": 18
								}
							]
						},
						{
							"id": 1522,
							"name": "registerForRemoteNotifications",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1523,
									"name": "registerForRemoteNotifications",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "On iOS, if your app wants to receive remote messages from FCM (via APNS), you must explicitly register\nthis request with APNS. For example if you want to display alerts, play sounds\nor perform other user-facing actions (via the Notification library), you must call this method.",
										"text": "#### Example\n\n```js\nif (Platform.OS === 'ios' && !firebase.messaging().isRegisteredForRemoteNotifications) {\n  await firebase.messaging().registerForRemoteNotifications();\n}\n```\n",
										"tags": [
											{
												"tag": "platform",
												"text": "ios\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 452,
									"character": 34
								}
							]
						},
						{
							"id": 1520,
							"name": "requestPermission",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1521,
									"name": "requestPermission",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "On iOS, messaging permission must be requested by the current application before messages can\nbe received or sent.",
										"text": "On iOS < 12, a modal will be shown to the user requesting messaging permissions for the app.\nOnce handled, the promise will resolve with `true` if permission was granted.\n\nOn iOS >= 12, the app will be granted [Provisional Authorization](http://iosbrain.com/blog/2018/07/05/new-in-ios-12-implementing-provisional-authorization-for-quiet-notifications-in-swift/),\nand will resolve `true`. The user will be able to receive FCM payloads, however when Notifications\nare displayed, the user will then grant permission.\n\n#### Example\n\n```js\nlet permissionGranted;\n\nif (Platform.OS === 'ios') {\n  permissionGranted = await firebase.messaging().requestPermission();\n} else {\n  permissionGranted = true;\n}\n```\n",
										"tags": [
											{
												"tag": "platform",
												"text": "ios\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 435,
									"character": 21
								}
							]
						},
						{
							"id": 1552,
							"name": "sendMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1553,
									"name": "sendMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Send a new `RemoteMessage` to the FCM server.",
										"text": "The promise resolves when the message has been added to the internal queue. Use `onMessageSent()`\nand `onSendError()` to determine when the message has been sent to the server.\n\n#### Example\n\n```js\nconst message = firebase.firestore().newRemoteMessage();\n\nmessage.data({\n  loggedIn: Date.now(),\n  uid: firebase.auth().currentUser.uid,\n});\n\nawait firebase.firestore().sendMessage(message);\n```\n"
									},
									"parameters": [
										{
											"id": 1554,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A `RemoteMessage` created from a `RemoteMessageBuilder`.\n"
											},
											"type": {
												"type": "reference",
												"name": "RemoteMessageBuilder",
												"id": 1468
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 627,
									"character": 15
								}
							]
						},
						{
							"id": 1497,
							"name": "setAutoInitEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1498,
									"name": "setAutoInitEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets whether auto initialization for messaging is enabled or disabled.",
										"text": "Set this to false to allow for an 'opt-in-first' flow for your users. By default auto\ninitialization is enabled, which updates the device identifier and configuration data needed\nfor messaging to Firebase.\n\nTo ensure first app opens have an initial value set, set the argument in the `firebase.json`\nconfig.\n\n#### Example\n\n```js\n// Disable auto initialization\nawait firebase.messaging().setAutoInitEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 1499,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A boolean value to enable or disabled auto initialization.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 289,
									"character": 22
								}
							]
						},
						{
							"id": 1546,
							"name": "setBackgroundMessageHandler",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1547,
									"name": "setBackgroundMessageHandler",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "On Android, set a message handler function which is called when the app is in the background\nor terminated. A headless task is created, allowing you to access the React Native environment\nto perform tasks such as updating local storage, or sending a network request.",
										"text": "This method must be called **outside** of your application lifecycle, e.g. alongside your\n`AppRegistry.registerComponent()` method call at the the entry point of your application code.\n\n#### Example\n\n```js\nfirebase.messaging().setBackgroundMessageHandler(async (remoteMessage) => {\n   // Update a users messages list using AsyncStorage\n   const currentMessages = await AsyncStorage.get('messages');\n   const messageArray = JSON.parse(currentMessages);\n   messageArray.push(remoteMessage.data);\n   await AsyncStorage.set('messages', JSON.stringify(messageArray));\n});\n```\n",
										"tags": [
											{
												"tag": "platform",
												"text": "android\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1548,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1549,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1550,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1551,
																	"name": "message",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "RemoteMessage",
																		"id": 1458
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "__type"
															}
														}
													],
													"sources": [
														{
															"fileName": "messaging/lib/index.d.ts",
															"line": 604,
															"character": 40
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 604,
									"character": 31
								}
							]
						},
						{
							"id": 1555,
							"name": "subscribeToTopic",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1556,
									"name": "subscribeToTopic",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Apps can subscribe to a topic, which allows the FCM server to send targeted messages to only those\ndevices subscribed to that topic.",
										"text": "#### Example\n\n```js\nawait firebase.messaging().subscribeToTopic('news');\n```\n"
									},
									"parameters": [
										{
											"id": 1557,
											"name": "topic",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The topic name.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 641,
									"character": 20
								}
							]
						},
						{
							"id": 1525,
							"name": "unregisterForRemoteNotifications",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1526,
									"name": "unregisterForRemoteNotifications",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unregisters the app from receiving remote notifications.",
										"text": "#### Example\n\n```js\nif (Platform.OS === 'ios' && firebase.messaging().isRegisteredForRemoteNotifications) {\n  await firebase.messaging().unregisterForRemoteNotifications();\n}\n```\n",
										"tags": [
											{
												"tag": "platform",
												"text": "ios\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 481,
									"character": 36
								}
							]
						},
						{
							"id": 1558,
							"name": "unsubscribeFromTopic",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1559,
									"name": "unsubscribeFromTopic",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unsubscribe the device from a topic.",
										"text": "#### Example\n\n```js\nawait firebase.messaging().unsubscribeFromTopic('news');\n```\n"
									},
									"parameters": [
										{
											"id": 1560,
											"name": "topic",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The topic name.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 654,
									"character": 24
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1561,
								1496,
								1524
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1504,
								1527,
								1500,
								1529,
								1494,
								1531,
								1508,
								1534,
								1540,
								1514,
								1522,
								1520,
								1552,
								1497,
								1546,
								1555,
								1525,
								1558
							]
						}
					],
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 244,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 1458,
					"name": "RemoteMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The `RemoteMessage` interface describes an incoming message from the remote FCM server."
					},
					"children": [
						{
							"id": 1459,
							"name": "collapseKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The collapse key a message was sent with. Used to override existing messages with the same\nkey."
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 72,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1464,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Any additional data which was sent with the message."
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 97,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1465,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 1466,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1467,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "messaging/lib/index.d.ts",
											"line": 97,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 1460,
							"name": "messageId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A unique ID assigned to every message."
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 77,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1461,
							"name": "messageType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The message type of the message."
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 82,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1462,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The address for the message."
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 87,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1463,
							"name": "ttl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The time to live for the message."
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 92,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1459,
								1464,
								1460,
								1461,
								1462,
								1463
							]
						}
					],
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 67,
							"character": 32
						}
					]
				},
				{
					"id": 1468,
					"name": "RemoteMessageBuilder",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The `RemoteMessageBuilder` interface allows a `RemoteMessage` to be constructed which can later\nbe sent to the FCM server from the application."
					},
					"children": [
						{
							"id": 1469,
							"name": "setCollapseKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1470,
									"name": "setCollapseKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If provided, messages with the same key will override any pending messages which have not yet been\nsent to the FCM server.",
										"text": "For example, sending an unread messages count for a chat app, the key could be the app user ID.\n\n#### Example\n\n```js\nconst messageBuilder = firebase.messaging().newRemoteMessage()\n  .setCollapseKey('1234')\n  .setData({\n    unread: 3,\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 1471,
											"name": "collapseKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RemoteMessageBuilder",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 123,
									"character": 18
								}
							]
						},
						{
							"id": 1484,
							"name": "setData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1485,
									"name": "setData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a custom data payload to be sent with the message.",
										"text": "const messageBuilder = firebase.messaging().newRemoteMessage()\n  .setData({\n    unread: 3,\n  });\n```\n\n@param data An object of data.\n"
									},
									"parameters": [
										{
											"id": 1486,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1487,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 1488,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1489,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "messaging/lib/index.d.ts",
															"line": 205,
															"character": 17
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RemoteMessageBuilder",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 205,
									"character": 11
								}
							]
						},
						{
							"id": 1472,
							"name": "setMessageId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1473,
									"name": "setMessageId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Provide a custom message ID for the message. If not provided, a unique ID will be created\nfor the message."
									},
									"parameters": [
										{
											"id": 1474,
											"name": "messageId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A custom message ID.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RemoteMessageBuilder",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 131,
									"character": 16
								}
							]
						},
						{
							"id": 1475,
							"name": "setMessageType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1476,
									"name": "setMessageType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Provide a custom message type which the FCM server can read.",
										"text": "#### Example\n\n```js\nconst messageBuilder = firebase.messaging().newRemoteMessage()\n  .setMessageType('unread_count')\n  .setData({\n    unread: 3,\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 1477,
											"name": "messageType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A message type.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RemoteMessageBuilder",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 148,
									"character": 18
								}
							]
						},
						{
							"id": 1478,
							"name": "setTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1479,
									"name": "setTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Provide a custom message destination. This is in the format of the receiving app server, e.g.\n`SENDER_ID@fcm.googleapis.com`.",
										"text": "Defaults to the default Firebase app messaging sender ID.\n\n#### Example\n\n```js\nconst destination = firebase.app().options.messagingSenderId + '@fcm.googleapis.com';\n\nconst messageBuilder = firebase.messaging().newRemoteMessage()\n  .setTo(destination)\n```\n"
									},
									"parameters": [
										{
											"id": 1480,
											"name": "to",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The server ID.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RemoteMessageBuilder",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 167,
									"character": 9
								}
							]
						},
						{
							"id": 1481,
							"name": "setTtl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1482,
									"name": "setTtl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A time to live for the message. If the message has not yet been sent to the FCM server and the time\nsurpasses the TTL, the message will be dropped from the queue and will not be sent.",
										"text": "If `0`, the message send will be attempted immediately and will be dropped if the device is not\nconnected. Otherwise, the message will be queued.\n\nIf a message is dropped, the `onSendError()` listener will be called with the message ID.\n\nDefaults to 3600 seconds (1 hour).\n\n#### Example\n\n```js\nconst messageBuilder = firebase.messaging().newRemoteMessage()\n  .setTtl(600) // 10 minutes\n  .setData({\n    unread: 3,\n  });\n```\n"
									},
									"parameters": [
										{
											"id": 1483,
											"name": "ttl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of seconds this message should live for.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RemoteMessageBuilder",
										"id": 1468
									}
								}
							],
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 192,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1469,
								1484,
								1472,
								1475,
								1478,
								1481
							]
						}
					],
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 104,
							"character": 39
						}
					]
				},
				{
					"id": 1490,
					"name": "SendErrorEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An event that is received when a message fails to send.",
						"text": "### Example\n\n```js\nfirebase.messaging().onSendError(event => {\n  console.log(event.messageId);\n  console.log(event.error);\n});\n"
					},
					"children": [
						{
							"id": 1492,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A native firebase error that indicates the failure reason."
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 228,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "NativeFirebaseError"
							}
						},
						{
							"id": 1491,
							"name": "messageId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The id of the message that failed to send"
							},
							"sources": [
								{
									"fileName": "messaging/lib/index.d.ts",
									"line": 223,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1492,
								1491
							]
						}
					],
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 219,
							"character": 33
						}
					]
				},
				{
					"id": 1457,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "messaging/lib/index.d.ts",
							"line": 60,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1493
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1458,
						1468,
						1490,
						1457
					]
				}
			],
			"sources": [
				{
					"fileName": "messaging/lib/index.d.ts",
					"line": 56,
					"character": 26
				}
			]
		},
		{
			"id": 2036,
			"name": "Perf",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Performance Monitoring package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `perf` package:\n\n```js\nimport { firebase } from '@react-native-firebase/perf';\n\n// firebase.perf().X\n```\n\n#### Example 2\n\nUsing the default export from the `perf` package:\n\n```js\nimport perf from '@react-native-firebase/perf';\n\n// perf().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/perf';\n\n// firebase.perf().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "perf\n"
					}
				]
			},
			"children": [
				{
					"id": 2068,
					"name": "HttpMetric",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Metric used to collect data for network requests/responses. A new instance must be used for every request/response."
					},
					"children": [
						{
							"id": 2069,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2070,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the value of an attribute. Returns null if it does not exist.",
										"text": "#### Example\n\n```js\nconst attribute = metric.getAttribute('user_role');\n```\n"
									},
									"parameters": [
										{
											"id": 2071,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute to fetch the value of\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 225,
									"character": 16
								}
							]
						},
						{
							"id": 2072,
							"name": "getAttributes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2073,
									"name": "getAttributes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an object of all the currently added attributes.",
										"text": "#### Example\n\n```js\nconst attributes = metric.getAttributes();\n\nattributes.forEach(($) => {\n  console.log($);\n});\n```\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2074,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2075,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2076,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "perf/lib/index.d.ts",
													"line": 240,
													"character": 20
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 240,
									"character": 17
								}
							]
						},
						{
							"id": 2077,
							"name": "putAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2078,
									"name": "putAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a String value for the specified attribute. Updates the value of the attribute if it already exists.\nThe maximum number of attributes that can be added is 5.",
										"text": "#### Example\n\n```js\nmetric.putAttribute('user_role', 'admin');\n```\n"
									},
									"parameters": [
										{
											"id": 2079,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute. Max length is 40 chars."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2080,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value of the attribute. Max length is 100 chars.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 255,
									"character": 16
								}
							]
						},
						{
							"id": 2081,
							"name": "removeAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2082,
									"name": "removeAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes an already added attribute. Does nothing if attribute does not exist.",
										"text": "#### Example\n\n```js\nmetric.removeAttribute('user_role');\n```\n"
									},
									"parameters": [
										{
											"id": 2083,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute to be removed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 268,
									"character": 19
								}
							]
						},
						{
							"id": 2084,
							"name": "setHttpResponseCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2085,
									"name": "setHttpResponseCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the httpResponse code of the request.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setHttpResponseCode(response.status);\n```\n> This is required for every request, if you do not provide this your metric will not be captured.\n\n"
									},
									"parameters": [
										{
											"id": 2086,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value must be greater than 0. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 284,
									"character": 23
								}
							]
						},
						{
							"id": 2087,
							"name": "setRequestPayloadSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2088,
									"name": "setRequestPayloadSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the size of the request payload.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setRequestPayloadSize(response.headers.get('Content-Type'));\n```\n"
									},
									"parameters": [
										{
											"id": 2089,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value must be greater than 0. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 298,
									"character": 25
								}
							]
						},
						{
							"id": 2093,
							"name": "setResponseContentType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2094,
									"name": "setResponseContentType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Content type of the response e.g. `text/html` or `application/json`.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setResponsePayloadSize(response.headers.get('Content-Type'));\n```\n"
									},
									"parameters": [
										{
											"id": 2095,
											"name": "contentType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Valid string of MIME type. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 326,
									"character": 26
								}
							]
						},
						{
							"id": 2090,
							"name": "setResponsePayloadSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2091,
									"name": "setResponsePayloadSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the size of the response payload.",
										"text": "#### Example\n\n```js\nconst response = await fetch(url);\nmetric.setResponsePayloadSize(response.headers.get('Content-Length'));\n```\n"
									},
									"parameters": [
										{
											"id": 2092,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value must be greater than 0. Set to null to remove. Invalid usage will be logged natively.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 312,
									"character": 26
								}
							]
						},
						{
							"id": 2096,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2097,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the start time of the request. Does nothing if already started.",
										"text": "#### Example\n\n```js\nconst metric = firebase.perf().newHttpMetric('https://api.com/login', 'POST');\nawait metric.start();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 338,
									"character": 9
								}
							]
						},
						{
							"id": 2098,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2099,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the end time of the response and queues the network request metric on the device for transmission. Does nothing if already stopped.",
										"text": "#### Example\n\n```js\nconst metric = firebase.perf().newHttpMetric('https://api.com/login', 'POST');\nawait metric.start();\nmetric.putAttribute('user_role', 'admin');\nawait metric.stop();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 352,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2069,
								2072,
								2077,
								2081,
								2084,
								2087,
								2093,
								2090,
								2096,
								2098
							]
						}
					],
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 213,
							"character": 25
						}
					]
				},
				{
					"id": 2101,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Firebase Performance Monitoring service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Performance Monitoring service for the default app:\n\n```js\nconst defaultAppPerf = firebase.perf();\n```\n"
					},
					"children": [
						{
							"id": 2116,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 2102,
							"name": "isPerformanceCollectionEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Determines whether performance monitoring is enabled or disabled.",
								"text": "#### Example\n\n```js\nconst isEnabled = firebase.perf().isPerformanceCollectionEnabled;\nconsole.log('Performance collection enabled: ', isEnabled);\n```\n"
							},
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 381,
									"character": 34
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2112,
							"name": "newHttpMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2113,
									"name": "newHttpMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a HttpMetric instance for collecting network performance data for a single request/response",
										"text": "#### Example\n\n```js\nconst metric = firebase.perf().newHttpMetric('https://api.com/user/1', 'GET');\nawait metric.start();\n```\n"
									},
									"parameters": [
										{
											"id": 2114,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A valid url String, cannot be empty"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2115,
											"name": "httpMethod",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "One of the values GET, PUT, POST, DELETE, HEAD, PATCH, OPTIONS, TRACE, or CONNECT\n"
											},
											"type": {
												"type": "reference",
												"name": "HttpMethod",
												"id": 2117
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpMetric",
										"id": 2068
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 437,
									"character": 17
								}
							]
						},
						{
							"id": 2106,
							"name": "newTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2107,
									"name": "newTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Trace instance with the given identifier.",
										"text": "#### Example\n\n```js\nconst trace = firebase.perf().newTrace('user_profile');\nawait trace.start();\n```\n"
									},
									"parameters": [
										{
											"id": 2108,
											"name": "identifier",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the trace, no leading or trailing whitespace allowed, no leading underscore '_' character allowed, max length is 100.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Trace",
										"id": 2037
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 409,
									"character": 12
								}
							]
						},
						{
							"id": 2103,
							"name": "setPerformanceCollectionEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2104,
									"name": "setPerformanceCollectionEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Enables or disables performance monitoring.",
										"text": "#### Example\n\n```js\n// Disable performance monitoring collection\nawait firebase.perf().setPerformanceCollectionEnabled(false);\n```\n"
									},
									"parameters": [
										{
											"id": 2105,
											"name": "enabled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Should performance monitoring be enabled\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 395,
									"character": 35
								}
							]
						},
						{
							"id": 2109,
							"name": "startTrace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2110,
									"name": "startTrace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a Trace instance with the given identifier and immediately starts it.",
										"text": "#### Example\n\n```js\nconst trace = await firebase.perf().startTrace('user_profile');\n```\n"
									},
									"parameters": [
										{
											"id": 2111,
											"name": "identifier",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the trace, no leading or trailing whitespace allowed, no leading underscore '_' character allowed, max length is 100.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Trace",
												"id": 2037
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 422,
									"character": 14
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2116,
								2102
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2112,
								2106,
								2103,
								2109
							]
						}
					],
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 370,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 2037,
					"name": "Trace",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Trace allows you to time the beginning to end of a certain action in your app with additional metric values and attributes."
					},
					"children": [
						{
							"id": 2038,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2039,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the value of an attribute. Returns null if it does not exist.",
										"text": "#### Example\n\n```js\nconst attribute = trace.getAttribute('userId');\n```\n"
									},
									"parameters": [
										{
											"id": 2040,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute to fetch the value of.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 93,
									"character": 16
								}
							]
						},
						{
							"id": 2045,
							"name": "getMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2046,
									"name": "getMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the value of the metric with the given name in the current trace. If the metric\ndoesn't exist, it will not be created and a 0 is returned.",
										"text": "#### Example\n\n```js\nconst metric = trace.getMetric('hits');\n```\n"
									},
									"parameters": [
										{
											"id": 2047,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to get.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 122,
									"character": 13
								}
							]
						},
						{
							"id": 2048,
							"name": "getMetrics",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2049,
									"name": "getMetrics",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an object of all the currently added metrics and their number values.",
										"text": "#### Example\n\n```js\nconst metrics = trace.getMetrics();\n\nmetrics.forEach(($) => {\n  console.log($);\n});\n```\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2050,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2051,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2052,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "perf/lib/index.d.ts",
													"line": 137,
													"character": 17
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 137,
									"character": 14
								}
							]
						},
						{
							"id": 2057,
							"name": "incrementMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2058,
									"name": "incrementMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Increments the named metric by the `incrementBy` value.",
										"text": "If a metric with the given name doesn't exist, a new one will be created starting with the value of `incrementBy`.\n\n```js\ntrace.incrementMetric('hits', 1);\n```\n"
									},
									"parameters": [
										{
											"id": 2059,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to increment. Must not have a leading or trailing whitespace, no leading underscore '_' character and have a max length of 32 characters."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2060,
											"name": "incrementBy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value the metric should be incremented by.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 168,
									"character": 19
								}
							]
						},
						{
							"id": 2041,
							"name": "putAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2042,
									"name": "putAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a String value for the specified attribute. Updates the value of the attribute if it already exists.\nThe maximum number of attributes that can be added is 5.",
										"text": "#### Example\n\n```js\ntrace.putAttribute('userId', '123456789');\n```\n"
									},
									"parameters": [
										{
											"id": 2043,
											"name": "attribute",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute. Max length is 40 chars."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2044,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value of the attribute. Max length is 100 chars.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 108,
									"character": 16
								}
							]
						},
						{
							"id": 2053,
							"name": "putMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2054,
									"name": "putMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the value of the named metric with the provided number.",
										"text": "If a metric with the given name exists it will be overwritten.\nIf a metric with the given name doesn't exist, a new one will be created.\n\n#### Example\n\n```js\ntrace.putMetric('hits', 1);\n```\n"
									},
									"parameters": [
										{
											"id": 2055,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to set. Must not have a leading or trailing whitespace, no leading underscore '_' character and have a max length of 32 characters."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2056,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value the metric should be set to.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 154,
									"character": 13
								}
							]
						},
						{
							"id": 2061,
							"name": "removeMetric",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2062,
									"name": "removeMetric",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes a metric by name if it exists.",
										"text": "#### Example\n\n```js\ntrace.removeMetric('hits');\n```\n"
									},
									"parameters": [
										{
											"id": 2063,
											"name": "metricName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the metric to remove.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 181,
									"character": 16
								}
							]
						},
						{
							"id": 2064,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2065,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the start time of the trace. Does nothing if already started.",
										"text": "#### Example\n\n```js\nconst trace = firebase.perf().newTrace('example');\nawait trace.start();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 193,
									"character": 9
								}
							]
						},
						{
							"id": 2066,
							"name": "stop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2067,
									"name": "stop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Marks the end time of the trace and queues the metric on the device for transmission. Does nothing if already stopped.",
										"text": "* #### Example\n\n```js\nconst trace = firebase.perf().newTrace('example');\nawait trace.start();\ntrace.putMetric('hits', 1);\nawait trace.stop();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "perf/lib/index.d.ts",
									"line": 207,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2038,
								2045,
								2048,
								2057,
								2041,
								2053,
								2061,
								2064,
								2066
							]
						}
					],
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 81,
							"character": 20
						}
					]
				},
				{
					"id": 2100,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 355,
							"character": 26
						}
					]
				},
				{
					"id": 2117,
					"name": "HttpMethod",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "perf/lib/index.d.ts",
							"line": 67,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "GET"
							},
							{
								"type": "stringLiteral",
								"value": "HEAD"
							},
							{
								"type": "stringLiteral",
								"value": "PUT"
							},
							{
								"type": "stringLiteral",
								"value": "POST"
							},
							{
								"type": "stringLiteral",
								"value": "PATCH"
							},
							{
								"type": "stringLiteral",
								"value": "TRACE"
							},
							{
								"type": "stringLiteral",
								"value": "DELETE"
							},
							{
								"type": "stringLiteral",
								"value": "CONNECT"
							},
							{
								"type": "stringLiteral",
								"value": "OPTIONS"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2068,
						2101,
						2037
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2100
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2117
					]
				}
			],
			"sources": [
				{
					"fileName": "perf/lib/index.d.ts",
					"line": 56,
					"character": 21
				}
			]
		},
		{
			"id": 53,
			"name": "ReactNativeFirebase",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": " @firebase app"
			},
			"children": [
				{
					"id": 86,
					"name": "FirebaseModule",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 87,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp",
								"id": 68
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								87
							]
						}
					],
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 183,
							"character": 29
						}
					]
				},
				{
					"id": 68,
					"name": "FirebaseApp",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 69,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name (identifier) for this App. '[DEFAULT]' is the default App."
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 129,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 70,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The (read-only) configuration options from the app initialization."
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 134,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseAppOptions",
								"id": 89
							}
						},
						{
							"id": 71,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 72,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Make this app unusable and free up resources."
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 139,
									"character": 10
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								69,
								70
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								71
							]
						}
					],
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 125,
							"character": 30
						}
					]
				},
				{
					"id": 64,
					"name": "FirebaseAppConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 66,
							"name": "automaticDataCollectionEnabled",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 116,
									"character": 34
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 67,
							"name": "automaticResourceManagement",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If set to true it indicates that Firebase should close database connections\nautomatically when the app is in the background. Disabled by default."
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 122,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 65,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The Firebase App name, defaults to [DEFAULT] if none provided."
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 111,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								66,
								67,
								65
							]
						}
					],
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 107,
							"character": 36
						}
					]
				},
				{
					"id": 88,
					"name": "FirebaseConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "React Native Firebase json config"
					},
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 208,
							"character": 33
						}
					]
				},
				{
					"id": 73,
					"name": "Module",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 85,
							"name": "SDK_VERSION",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current React Native Firebase version."
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 180,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 84,
							"name": "apps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A (read-only) array of all the initialized Apps."
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 175,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "FirebaseApp",
									"id": 68
								}
							}
						},
						{
							"id": 81,
							"name": "app",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 82,
									"name": "app",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve an instance of a FirebaseApp.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```js\nconst app = firebase.app('foo');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 83,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional name of the app to return ('[DEFAULT]' if omitted)\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseApp",
										"id": 68
									}
								}
							],
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 170,
									"character": 7
								}
							]
						},
						{
							"id": 74,
							"name": "initializeApp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 75,
									"name": "initializeApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create (and initialize) a FirebaseApp."
									},
									"parameters": [
										{
											"id": 76,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options to configure the services used in the App."
											},
											"type": {
												"type": "reference",
												"name": "FirebaseAppOptions",
												"id": 89
											}
										},
										{
											"id": 77,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional config for your firebase app\n"
											},
											"type": {
												"type": "reference",
												"name": "FirebaseAppConfig",
												"id": 64
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseApp",
										"id": 68
									}
								},
								{
									"id": 78,
									"name": "initializeApp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create (and initialize) a FirebaseApp."
									},
									"parameters": [
										{
											"id": 79,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options to configure the services used in the App."
											},
											"type": {
												"type": "reference",
												"name": "FirebaseAppOptions",
												"id": 89
											}
										},
										{
											"id": 80,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional name of the app to initialize ('[DEFAULT]' if\nomitted)\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FirebaseApp",
										"id": 68
									}
								}
							],
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 149,
									"character": 17
								},
								{
									"fileName": "app/lib/index.d.ts",
									"line": 158,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								85,
								84
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								81,
								74
							]
						}
					],
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 142,
							"character": 25
						}
					]
				},
				{
					"id": 55,
					"name": "NativeFirebaseError",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 63,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						},
						{
							"id": 56,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Firebase error code, e.g. `auth/invalid-email`"
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 27,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 57,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Firebase error message"
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 32,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 61,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 963,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 58,
							"name": "namespace",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The firebase module namespace that this error originated from, e.g. 'analytics'"
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 37,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 59,
							"name": "nativeErrorCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The native sdks returned error code, different per platform"
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 42,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 60,
							"name": "nativeErrorMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The native sdks returned error message, different per platform"
							},
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 47,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 62,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 965,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								63,
								56,
								57,
								61,
								58,
								59,
								60,
								62
							]
						}
					],
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 23,
							"character": 38
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 54,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 22,
							"character": 26
						}
					]
				},
				{
					"id": 89,
					"name": "FirebaseAppOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 50,
							"character": 32
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 90,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": [
								{
									"id": 101,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 102,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"children": [
								{
									"id": 99,
									"name": "androidClientId",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "iOS only - The Android client ID used in Google AppInvite when an iOS app has its Android version, for\nexample \"12345.apps.googleusercontent.com\"."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 98,
											"character": 19
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 92,
									"name": "apiKey",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An API key used for authenticating requests from your app, e.g.\n\"AIzaSyDdVgKwhZl0sTTTLZ7iTmt1r3N2cJLnaDk\", used to identify your app to Google servers."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 60,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 91,
									"name": "appId",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"comment": {
										"shortText": "The Google App ID that is used to uniquely identify an instance of an app."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 54,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 98,
									"name": "clientId",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "iOS only - The OAuth2 client ID for iOS application used to authenticate Google users, for example\n\"12345.apps.googleusercontent.com\", used for signing in with Google."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 92,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 93,
									"name": "databaseURL",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The database root URL, e.g. \"http://abc-xyz-123.firebaseio.com\"."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 65,
											"character": 15
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 100,
									"name": "deepLinkURLScheme",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "iOS only - The URL scheme used to set up Durable Deep Link service."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 103,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 95,
									"name": "gaTrackingId",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The tracking ID for Google Analytics, e.g. \"UA-12345678-1\", used to configure Google Analytics."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 75,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 97,
									"name": "messagingSenderId",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The Project Number from the Google Developer's console, for example \"012345678901\", used to\nconfigure Google Cloud Messaging."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 86,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 94,
									"name": "projectId",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"comment": {
										"shortText": "The Project ID from the Firebase console, for example \"abc-xyz-123\"."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 70,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 96,
									"name": "storageBucket",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The Google Cloud Storage bucket name, e.g. \"abc-xyz-123.storage.firebase.com\"."
									},
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 80,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										99,
										92,
										91,
										98,
										93,
										100,
										95,
										97,
										94,
										96
									]
								}
							],
							"sources": [
								{
									"fileName": "app/lib/index.d.ts",
									"line": 50,
									"character": 34
								}
							]
						}
					}
				},
				{
					"id": 103,
					"name": "FirebaseModuleWithStatics",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 104,
							"name": "M",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 105,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 187,
							"character": 39
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 106,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 107,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "M"
											}
										}
									],
									"children": [
										{
											"id": 108,
											"name": "SDK_VERSION",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"comment": {
												"shortText": "This React Native Firebase module version."
											},
											"sources": [
												{
													"fileName": "app/lib/index.d.ts",
													"line": 193,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												108
											]
										}
									],
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 187,
											"character": 52
										}
									]
								}
							},
							{
								"type": "typeParameter",
								"name": "S"
							}
						]
					}
				},
				{
					"id": 109,
					"name": "FirebaseModuleWithStaticsAndApp",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 110,
							"name": "M",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 111,
							"name": "S",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"sources": [
						{
							"fileName": "app/lib/index.d.ts",
							"line": 196,
							"character": 45
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 112,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 113,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 114,
													"name": "app",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "FirebaseApp",
														"id": 68
													}
												}
											],
											"type": {
												"type": "typeParameter",
												"name": "M"
											}
										}
									],
									"children": [
										{
											"id": 115,
											"name": "SDK_VERSION",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"comment": {
												"shortText": "This React Native Firebase module version."
											},
											"sources": [
												{
													"fileName": "app/lib/index.d.ts",
													"line": 202,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												115
											]
										}
									],
									"sources": [
										{
											"fileName": "app/lib/index.d.ts",
											"line": 196,
											"character": 58
										}
									]
								}
							},
							{
								"type": "typeParameter",
								"name": "S"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						86
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						68,
						64,
						88,
						73,
						55,
						54
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						89,
						103,
						109
					]
				}
			],
			"sources": [
				{
					"fileName": "app/lib/index.d.ts",
					"line": 21,
					"character": 36
				}
			]
		},
		{
			"id": 2126,
			"name": "Storage",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Firebase Cloud Storage package for React Native.",
				"text": "#### Example 1\n\nAccess the firebase export from the `storage` package:\n\n```js\nimport { firebase } from '@react-native-firebase/storage';\n\n// firebase.storage().X\n```\n\n#### Example 2\n\nUsing the default export from the `storage` package:\n\n```js\nimport storage from '@react-native-firebase/storage';\n\n// storage().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/storage';\n\n// firebase.storage().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "storage\n"
					}
				]
			},
			"children": [
				{
					"id": 2278,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The Cloud Storage service is available for the default app, a given app or a specific storage bucket.",
						"text": "#### Example 1\n\nGet the storage instance for the **default app**:\n\n```js\nconst storageForDefaultApp = firebase.storage();\n```\n\n#### Example 2\n\nGet the storage instance for a **secondary app**:\n\n```js\nconst otherApp = firebase.app('otherApp');\nconst storageForOtherApp = firebase.storage(otherApp);\n```\n\n#### Example 3\n\nGet the storage instance for a **specific storage bucket**:\n\n```js\nconst defaultApp = firebase.app();\nconst storageForBucket = defaultApp.storage('gs://another-bucket-url');\n\nconst otherApp = firebase.app('otherApp');\nconst storageForOtherAppBucket = otherApp.storage('gs://another-bucket-url');\n```\n\n"
					},
					"children": [
						{
							"id": 2297,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 2283,
							"name": "maxDownloadRetryTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the maximum time to retry a download if a failure occurs.",
								"text": "#### Example\n\n```js\nconst downloadRetryTime = firebase.storage().maxUploadRetryTime;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1061,
									"character": 24
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2287,
							"name": "maxOperationRetryTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the maximum time to retry operations other than upload and download if a failure occurs.",
								"text": "#### Example\n\n```js\nconst maxOperationRetryTime = firebase.storage().maxOperationRetryTime;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1085,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2279,
							"name": "maxUploadRetryTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns the maximum time to retry an upload if a failure occurs.",
								"text": "#### Example\n\n```js\nconst uploadRetryTime = firebase.storage().maxUploadRetryTime;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1037,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2291,
							"name": "ref",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2292,
									"name": "ref",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new {@link storage.Reference} instance.",
										"text": "#### Example\n\n```js\nconst maxOperationRetryTime = firebase.storage().maxOperationRetryTime;\n```\n"
									},
									"parameters": [
										{
											"id": 2293,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional string pointing to a location on the storage bucket. If no path\nis provided, the returned reference will be the bucket root path.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 2184
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1112,
									"character": 7
								}
							]
						},
						{
							"id": 2294,
							"name": "refFromURL",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2295,
									"name": "refFromURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a new {@link storage.Reference} instance from a storage bucket URL.",
										"text": "#### Example\n\n```js\nconst maxOperationRetryTime = firebase.storage().maxOperationRetryTime;\n```\n"
									},
									"parameters": [
										{
											"id": 2296,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A storage bucket URL pointing to a single file or location. Must start with `gs://`,\ne.g. `gs://assets/logo.png` or `gs://assets`.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 2184
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1126,
									"character": 14
								}
							]
						},
						{
							"id": 2284,
							"name": "setMaxDownloadRetryTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2285,
									"name": "setMaxDownloadRetryTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the maximum time to retry a download if a failure occurs.",
										"text": "#### Example\n\n```js\nawait firebase.storage().setMaxDownloadRetryTime(5000);\n```\n"
									},
									"parameters": [
										{
											"id": 2286,
											"name": "time",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of times to retry.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1074,
									"character": 27
								}
							]
						},
						{
							"id": 2288,
							"name": "setMaxOperationRetryTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2289,
									"name": "setMaxOperationRetryTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the maximum time to retry operations other than upload and download if a failure occurs.",
										"text": "#### Example\n\n```js\nawait firebase.storage().setMaxOperationRetryTime(5000);\n```\n"
									},
									"parameters": [
										{
											"id": 2290,
											"name": "time",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of times to retry.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1098,
									"character": 28
								}
							]
						},
						{
							"id": 2280,
							"name": "setMaxUploadRetryTime",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2281,
									"name": "setMaxUploadRetryTime",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the maximum time to retry an upload if a failure occurs.",
										"text": "#### Example\n\n```js\nawait firebase.storage().setMaxUploadRetryTime(3);\n```\n"
									},
									"parameters": [
										{
											"id": 2282,
											"name": "time",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number of times to retry.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 1050,
									"character": 25
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2297,
								2283,
								2287,
								2279
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2291,
								2294,
								2284,
								2288,
								2280
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 1027,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 2165,
					"name": "FullMetadata",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The full readable metadata returned by `TaskSnapshot.metadata` or `StorageReference.getMetadata()`."
					},
					"children": [
						{
							"id": 2167,
							"name": "bucket",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bucket this storage object is contained in.",
								"text": "#### Example Value\n\n```\ngs://my-project-storage-bucket\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 482,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2175,
							"name": "cacheControl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Cache-Control' HTTP header that will be set on the storage object when it's requested.",
								"text": "#### Example 1\n\nTo turn off caching, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'no-store',\n}\n```\n\n#### Example 2\n\nTo aggressively cache an object, e.g. static assets, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'public, max-age=31536000',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 397,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.cacheControl",
								"id": 2156
							}
						},
						{
							"id": 2176,
							"name": "contentDisposition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Disposition' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 404,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentDisposition",
								"id": 2157
							}
						},
						{
							"id": 2177,
							"name": "contentEncoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Encoding' HTTP header that will be used on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 411,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentEncoding",
								"id": 2158
							}
						},
						{
							"id": 2178,
							"name": "contentLanguage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Language' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 418,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentLanguage",
								"id": 2159
							}
						},
						{
							"id": 2179,
							"name": "contentType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Type' HTTP header that will be set on the object when it's requested.",
								"text": "This is used to indicate the media type (or MIME type) of the object. When uploading a file\nFirebase Cloud Storage for React Native will attempt to automatically detect this if `contentType`\nis not already set, if it fails to detect a media type it will default to `application/octet-stream`.\n\nFor `DATA_URL` string formats uploaded via `putString` this will also be automatically extracted if available.\n\n#### Example\n\nSetting the content type as JSON, e.g. for when uploading a JSON string via `putString`.\n\n```js\n{\n  contentType: 'application/json',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 441,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.contentType",
								"id": 2160
							}
						},
						{
							"id": 2180,
							"name": "customMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Additional user-defined custom metadata for this storage object.",
								"text": "String values only are supported for custom metadata property values.\n\n#### Example\n\nAdding a user controlled NSFW meta data field.\n\n```js\n{\n  customMetadata: {\n    'nsfw': 'true'\n  },\n}\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 459,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2181,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2182,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2183,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "storage/lib/index.d.ts",
													"line": 459,
													"character": 20
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "SettableMetadata.customMetadata",
								"id": 2161
							}
						},
						{
							"id": 2168,
							"name": "fullPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The full path to this storage object in its bucket.",
								"text": "#### Example Value\n\n```\ninvertase/logo.png\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 493,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2169,
							"name": "generation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Storage object generation values enable users to uniquely identify data resources, e.g. object versioning.",
								"text": "Read more on generation on the [Google Cloud Storage documentation](https://cloud.google.com/storage/docs/generations-preconditions).\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 500,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2166,
							"name": "md5Hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A Base64-encoded MD5 hash of the storage object being uploaded."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 471,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2170,
							"name": "metageneration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Storage object metageneration values enable users to uniquely identify data resources, e.g. object versioning.",
								"text": "Read more on metageneration on the [Google Cloud Storage documentation](https://cloud.google.com/storage/docs/generations-preconditions).\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 507,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2171,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The short name of storage object in its bucket, e.g. it's file name.",
								"text": "#### Example Value\n\n```\nlogo.png\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 518,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2172,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The size of this storage object in bytes."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 523,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2173,
							"name": "timeCreated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A date string representing when this storage object was created.",
								"text": "#### Example Value\n\n```\n2019-05-02T00:34:56.264Z\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 534,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2174,
							"name": "updated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A date string representing when this storage object was last updated.",
								"text": "#### Example Value\n\n```\n2019-05-02T00:35:56.264Z\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 545,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2167,
								2175,
								2176,
								2177,
								2178,
								2179,
								2180,
								2168,
								2169,
								2166,
								2170,
								2171,
								2172,
								2173,
								2174
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 467,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "SettableMetadata",
							"id": 2155
						}
					]
				},
				{
					"id": 2140,
					"name": "Path",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A collection of native device file paths to aid in the usage of file path based storage methods.",
						"text": "Concatenate a file path with your target file name when using `putFile` or `getFile`.\n\n```js\nfirebase.storage.Path;\n```\n"
					},
					"children": [
						{
							"id": 2142,
							"name": "CachesDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the application specific cache directory on the filesystem.",
								"text": "The system will automatically delete files in this directory when disk space is needed elsewhere on the device, starting with the oldest files first.\n\n```js\nfirebase.storage.Path.CachesDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 227,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2143,
							"name": "DocumentDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the users Documents directory.",
								"text": "Use this directory to place documents that have been created by the user.\n\n```js\nfirebase.storage.Path.DocumentDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 238,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2146,
							"name": "ExternalDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the directory on the primary shared/external storage device.",
								"text": "Here your application can place persistent files it owns. These files are internal to the application, and not typically visible to the user as media.\n\nReturns null if no external storage directory found, e.g. removable media has been ejected by the user.\n\n```js\nfirebase.storage.Path.ExternalDirectory;\n```\n",
								"tags": [
									{
										"tag": "android",
										"text": "Android only - iOS returns null\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 275,
									"character": 21
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2147,
							"name": "ExternalStorageDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the primary shared/external storage directory.",
								"text": "Traditionally this is an SD card, but it may also be implemented as built-in storage on a device.\n\nReturns null if no external storage directory found, e.g. removable media has been ejected by the user.\n\n```js\nfirebase.storage.Path.ExternalStorageDirectory;\n```\n",
								"tags": [
									{
										"tag": "android",
										"text": "Android only - iOS returns null\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 290,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2145,
							"name": "LibraryDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the apps library/resources directory.",
								"text": "E.g. this can be used for things like documentation, support files, and configuration files and generic resources.\n\n```js\nfirebase.storage.Path.LibraryDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 260,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2141,
							"name": "MainBundle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to the applications main bundle.",
								"text": "```js\nfirebase.storage.Path.MainBundle;\n```\n",
								"tags": [
									{
										"tag": "ios",
										"text": "iOS only\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 216,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2149,
							"name": "MoviesDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to a directory in which to place movies that are available to the user.",
								"text": "```js\nfirebase.storage.Path.MoviesDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 308,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2148,
							"name": "PicturesDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to a directory in which to place pictures that are available to the user.",
								"text": "```js\nfirebase.storage.Path.PicturesDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 299,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2144,
							"name": "TempDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns an absolute path to a temporary directory.",
								"text": "Use this directory to create temporary files. The system will automatically delete files in this directory when disk space is needed elsewhere on the device, starting with the oldest files first.\n\n```js\nfirebase.storage.Path.TempDirectory;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 249,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2142,
								2143,
								2146,
								2147,
								2145,
								2141,
								2149,
								2148,
								2144
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 206,
							"character": 23
						}
					]
				},
				{
					"id": 2184,
					"name": "Reference",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Represents a reference to a Google Cloud Storage object in React Native Firebase.",
						"text": "A reference can be used to upload and download storage objects, get/set storage object metadata, retrieve storage object download urls and delete storage objects.\n\n#### Example 1\n\nGet a reference to a specific storage path.\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\n```\n\n#### Example 2\n\nGet a reference to a specific storage path on another bucket in the same firebase project.\n\n```js\nconst ref = firebase.storage().refFromURL('gs://other-bucket/invertase/logo.png');\n```\n"
					},
					"children": [
						{
							"id": 2185,
							"name": "bucket",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the bucket containing this reference's object."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 573,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2187,
							"name": "fullPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The full path of this object."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 581,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2188,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The short name of this object, which is the last component of the full path. For example,\nif fullPath is 'full/path/image.png', name is 'image.png'."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 586,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2186,
							"name": "parent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A reference pointing to the parent location of this reference, or null if this reference is the root."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 577,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Reference",
										"id": 2184
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2189,
							"name": "root",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A reference to the root of this reference's bucket."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 590,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 2184
							}
						},
						{
							"id": 2190,
							"name": "storage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The storage service associated with this reference."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 594,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Module",
								"id": 2278
							}
						},
						{
							"id": 2193,
							"name": "child",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2194,
									"name": "child",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a reference to a relative path from this reference.",
										"text": "#### Example\n\n```js\nconst parent = firebase.storage().ref('invertase');\nconst ref = parent.child('logo.png');\n```\n"
									},
									"parameters": [
										{
											"id": 2195,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The relative path from this reference. Leading, trailing, and consecutive slashes are removed.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Reference",
										"id": 2184
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 620,
									"character": 9
								}
							]
						},
						{
							"id": 2196,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2197,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes the object at this reference's location.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nawait ref.delete();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 632,
									"character": 10
								}
							]
						},
						{
							"id": 2198,
							"name": "getDownloadURL",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2199,
									"name": "getDownloadURL",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches a long lived download URL for this object.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nconst url = await ref.getDownloadURL();\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 644,
									"character": 18
								}
							]
						},
						{
							"id": 2206,
							"name": "getFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2207,
									"name": "getFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Downloads a file to the specified local file path on the device.",
										"text": "#### Example\n\nGet a Download Storage task to download a file:\n\n```js\nconst downloadTo = `${firebase.storage.Path.DocumentDirectory}/foobar.json`;\n\nconst task = firebase.storage().ref('/foo/bar.json').getFile(downloadTo);\n```"
									},
									"parameters": [
										{
											"id": 2208,
											"name": "localFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 2233
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 691,
									"character": 11
								}
							]
						},
						{
							"id": 2200,
							"name": "getMetadata",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2201,
									"name": "getMetadata",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fetches metadata for the object at this location, if one exists.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nconst metadata = await ref.getMetadata();\nconsole.log('Cache control: ', metadata.cacheControl);\n```\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "FullMetadata",
												"id": 2165
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 657,
									"character": 15
								}
							]
						},
						{
							"id": 2209,
							"name": "put",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2210,
									"name": "put",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Puts data onto the storage bucket.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/new-logo.png');\nconst task = ref.put(BLOB, {\n  cacheControl: 'no-store', // disable caching\n});\n```\n"
									},
									"parameters": [
										{
											"id": 2211,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data to upload to the storage bucket at the reference location."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Blob"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "ArrayBuffer"
													}
												]
											}
										},
										{
											"id": 2212,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 2155
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 2233
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 708,
									"character": 7
								}
							]
						},
						{
							"id": 2202,
							"name": "putFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2203,
									"name": "putFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Puts a file from local disk onto the storage bucket.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/new-logo.png');\nconst path = `${firebase.storage.Path.DocumentDirectory}/new-logo.png`;\nconst task = ref.putFile(path, {\n  cacheControl: 'no-store', // disable caching\n});\n```\n"
									},
									"parameters": [
										{
											"id": 2204,
											"name": "localFilePath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The local file path to upload to the bucket at the reference location."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2205,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Any additional `SettableMetadata` for this task.\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 2155
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 2233
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 675,
									"character": 11
								}
							]
						},
						{
							"id": 2213,
							"name": "putString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2214,
									"name": "putString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Puts a string on the storage bucket. Depending on the string type, set a {@link storage.StringFormat} type.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/new-logo.png');\nconst task = ref.putString('PEZvbyBCYXI+', firebase.storage.StringFormat.BASE64, {\n  cacheControl: 'no-store', // disable caching\n});\n```\n"
									},
									"parameters": [
										{
											"id": 2215,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The string data, must match the format provided."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2216,
											"name": "format",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The format type of the string, e.g. a Base64 format string."
											},
											"type": {
												"type": "reference",
												"name": "StringFormat",
												"id": 2127
											}
										},
										{
											"id": 2217,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Any additional `SettableMetadata` for this task.\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 2155
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Task",
										"id": 2233
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 726,
									"character": 13
								}
							]
						},
						{
							"id": 2191,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2192,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a gs:// URL for this object in the form `gs://<bucket>/<path>/<to>/<object>`.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/logo.png');\nconsole.log('Full path: ', ref.toString()); // gs://invertase.io/invertase/logo.png\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 606,
									"character": 12
								}
							]
						},
						{
							"id": 2218,
							"name": "updateMetadata",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2219,
									"name": "updateMetadata",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the metadata for this reference object on the storage bucket.",
										"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref('invertase/nsfw-logo.png');\nconst updatedMetadata = await ref.updateMetadata({\n  customMetadata: {\n    'nsfw': 'true',\n  }\n});\n```\n"
									},
									"parameters": [
										{
											"id": 2220,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A `SettableMetadata` instance to update.\n"
											},
											"type": {
												"type": "reference",
												"name": "SettableMetadata",
												"id": 2155
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "FullMetadata",
												"id": 2165
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 744,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2185,
								2187,
								2188,
								2186,
								2189,
								2190
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2193,
								2196,
								2198,
								2206,
								2200,
								2209,
								2202,
								2213,
								2191,
								2218
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 569,
							"character": 28
						}
					]
				},
				{
					"id": 2155,
					"name": "SettableMetadata",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An interface representing all the metadata properties that can be set.",
						"text": "This is used in updateMetadata, put, putString & putFile.\n"
					},
					"children": [
						{
							"id": 2156,
							"name": "cacheControl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Cache-Control' HTTP header that will be set on the storage object when it's requested.",
								"text": "#### Example 1\n\nTo turn off caching, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'no-store',\n}\n```\n\n#### Example 2\n\nTo aggressively cache an object, e.g. static assets, you can set the following cacheControl value.\n\n```js\n{\n  cacheControl: 'public, max-age=31536000',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 397,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2157,
							"name": "contentDisposition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Disposition' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 404,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2158,
							"name": "contentEncoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Encoding' HTTP header that will be used on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 411,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2159,
							"name": "contentLanguage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Language' HTTP header that will be set on the storage object when it's requested.",
								"text": "[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 418,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2160,
							"name": "contentType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The 'Content-Type' HTTP header that will be set on the object when it's requested.",
								"text": "This is used to indicate the media type (or MIME type) of the object. When uploading a file\nFirebase Cloud Storage for React Native will attempt to automatically detect this if `contentType`\nis not already set, if it fails to detect a media type it will default to `application/octet-stream`.\n\nFor `DATA_URL` string formats uploaded via `putString` this will also be automatically extracted if available.\n\n#### Example\n\nSetting the content type as JSON, e.g. for when uploading a JSON string via `putString`.\n\n```js\n{\n  contentType: 'application/json',\n}\n```\n\n[Learn more about this header on Mozilla.](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 441,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 2161,
							"name": "customMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Additional user-defined custom metadata for this storage object.",
								"text": "String values only are supported for custom metadata property values.\n\n#### Example\n\nAdding a user controlled NSFW meta data field.\n\n```js\n{\n  customMetadata: {\n    'nsfw': 'true'\n  },\n}\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 459,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 2162,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2163,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2164,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "storage/lib/index.d.ts",
													"line": 459,
													"character": 20
												}
											]
										}
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2156,
								2157,
								2158,
								2159,
								2160,
								2161
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 371,
							"character": 35
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "FullMetadata",
							"id": 2165
						}
					]
				},
				{
					"id": 2150,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Cloud Storage statics.",
						"text": "#### Example\n\n```js\nfirebase.storage;\n```\n"
					},
					"children": [
						{
							"id": 2154,
							"name": "Path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A collection of native device file paths to aid in the usage of file path based storage methods.",
								"text": "#### Example\n\n```js\nfirebase.storage.Path;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 363,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Path",
								"id": 2140
							}
						},
						{
							"id": 2151,
							"name": "StringFormat",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Possible string formats used for uploading via `StorageReference.putString()`",
								"text": "#### Example\n\n```js\nfirebase.storage.StringFormat;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 330,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "StringFormat",
								"id": 2127
							}
						},
						{
							"id": 2153,
							"name": "TaskEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An event to subscribe to that is triggered on a Upload or Download task.",
								"text": "#### Example\n\n```js\nfirebase.storage.TaskEvent;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 352,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TaskEvent",
								"id": 2132
							}
						},
						{
							"id": 2152,
							"name": "TaskState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "A collection of properties that indicates the current tasks state.",
								"text": "#### Example\n\n```js\nfirebase.storage.TaskState;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 341,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "TaskState",
								"id": 2134
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2154,
								2151,
								2153,
								2152
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 320,
							"character": 26
						}
					]
				},
				{
					"id": 2127,
					"name": "StringFormat",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Possible string formats used for uploading via `StorageReference.putString()`",
						"text": "```js\nfirebase.storage.StringFormat;\n```\n"
					},
					"children": [
						{
							"id": 2129,
							"name": "BASE64",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Base64 string format.",
								"text": "Learn more about Base64 [on the Mozilla Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding)\n\n#### Usage\n\n```js\nfirebase.storage.StringFormat.BASE64;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = 'PEZvbyBCYXI+';\n```\n\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 103,
									"character": 10
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "base64"
							}
						},
						{
							"id": 2130,
							"name": "BASE64URL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Base64Url string format.",
								"text": "#### Usage\n\n```js\nfirebase.storage.StringFormat.BASE64URL;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = 'PEZvbyBCYXI-';\n```\n\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 121,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "base64url"
							}
						},
						{
							"id": 2131,
							"name": "DATA_URL",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Data URL string format.",
								"text": "#### Usage\n\n```js\nfirebase.storage.StringFormat.DATA_URL;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = 'data:text/plain;base64,PEZvbyBCYXI+';\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 138,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "data_url"
							}
						},
						{
							"id": 2128,
							"name": "RAW",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Raw string format.",
								"text": "#### Usage\n\n```js\nfirebase.storage.StringFormat.RAW;\n```\n\n#### Example String Format\n\n```js\nconst sampleString = '<Foo Bar>';\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 83,
									"character": 7
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "raw"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2129,
								2130,
								2131,
								2128
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 67,
							"character": 31
						}
					]
				},
				{
					"id": 2233,
					"name": "Task",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Storage Task used for Uploading or Downloading files.",
						"text": "#### Example 1\n\nGet a Upload Storage task to upload a string:\n\n```js\nconst string = '{ \"foo\": 1 }';\nconst task = firebase\n .storage()\n .ref('/foo/bar.json')\n .putString(string);\n```\n\n#### Example 2\n\nGet a Download Storage task to download a file:\n\n```js\nconst downloadTo = `${firebase.storage.Path.DocumentDirectory}/bar.json`;\n\nconst task = firebase\n .storage()\n .ref('/foo/bar.json')\n .getFile(downloadTo);\n```\n"
					},
					"children": [
						{
							"id": 2238,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2239,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancel the current Download or Upload task.",
										"text": "#### Example\n\nCancel a task inside a state changed listener:\n\n```js\ntask.on('state_changed', taskSnapshot => {\n  console.log('Cancelling my task!');\n  task.cancel();\n});\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 874,
									"character": 10
								}
							]
						},
						{
							"id": 2264,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2265,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2266,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2267,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 2268,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 2269,
																	"name": "a",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "NativeFirebaseError"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"sources": [
														{
															"fileName": "storage/lib/index.d.ts",
															"line": 920,
															"character": 21
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 920,
									"character": 9
								}
							]
						},
						{
							"id": 2240,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2241,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Task event handler called when state has changed on the task.",
										"text": "#### Example\n\n```js\nconst task = firebase\n .storage()\n .ref('/foo/bar.json')\n .getFile(downloadTo);\n\ntask.on('state_changed', (taskSnapshot) => {\n  console.log(taskSnapshot.state);\n})\n.then(() => {]\n  console.log('Task complete');\n})\n.catch((error) => {\n  console.error(error.message);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 2242,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The event name to handle, always `state_changed`."
											},
											"type": {
												"type": "stringLiteral",
												"value": "state_changed"
											}
										},
										{
											"id": 2243,
											"name": "nextOrObserver",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The optional event observer function."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "TaskSnapshotObserver",
														"id": 2221
													},
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 2244,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2245,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2246,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "TaskSnapshot",
																				"id": 2270
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 905,
																	"character": 52
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 2247,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional JavaScript error handler."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2248,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2249,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2250,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NativeFirebaseError"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 906,
																	"character": 13
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 2251,
											"name": "complete",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional complete handler function.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2252,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2253,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 907,
																	"character": 16
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 903,
									"character": 6
								}
							]
						},
						{
							"id": 2234,
							"name": "pause",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2235,
									"name": "pause",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Pause the current Download or Upload task.",
										"text": "#### Example\n\nPause a running task inside a state changed listener:\n\n```js\ntask.on('state_changed', taskSnapshot => {\n  if (taskSnapshot.state === firebase.storage.TaskState.RUNNING) {\n    console.log('Pausing my task!');\n    task.pause();\n  }\n});\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 836,
									"character": 9
								}
							]
						},
						{
							"id": 2236,
							"name": "resume",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2237,
									"name": "resume",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resume the current Download or Upload task.",
										"text": "#### Example\n\nResume a previously paused task inside a state changed listener:\n\n```js\ntask.on('state_changed', taskSnapshot => {\n  // ... pause me ...\n  if (taskSnapshot.state === firebase.storage.TaskState.PAUSED) {\n    console.log('Resuming my task!');\n    task.resume();\n  }\n});\n```\n\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 856,
									"character": 10
								}
							]
						},
						{
							"id": 2254,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2255,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2256,
											"name": "onFulfilled",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2257,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2258,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2259,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "TaskSnapshot",
																				"id": 2270
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 916,
																	"character": 19
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 2260,
											"name": "onRejected",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 2261,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2262,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2263,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NativeFirebaseError"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "storage/lib/index.d.ts",
																	"line": 917,
																	"character": 18
																}
															]
														}
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 915,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2238,
								2264,
								2240,
								2234,
								2236,
								2254
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 818,
							"character": 23
						}
					]
				},
				{
					"id": 2132,
					"name": "TaskEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "An event to subscribe to that is triggered on a Upload or Download task.",
						"text": "Event subscription is created via `StorageTask.on()`.\n\n```js\nfirebase.storage.TaskEvent;\n```\n"
					},
					"children": [
						{
							"id": 2133,
							"name": "STATE_CHANGED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An event that indicates that the tasks state has changed.",
								"text": "```js\nfirebase.storage.TaskEvent.STATE_CHANGED;\n```\n"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 158,
									"character": 17
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "state_changed"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2133
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 150,
							"character": 28
						}
					]
				},
				{
					"id": 2270,
					"name": "TaskSnapshot",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A TaskSnapshot provides information about a storage tasks state.",
						"text": "#### Example 1\n\n```js\nfirebase\n  .storage()\n  .ref('/foo/bar.json')\n  .putString(JSON.stringify({ foo: 'bar' }))\n  .then((taskSnapshot) => {\n    if (taskSnapshot.state === firebase.storage.TaskState.SUCCESS) {\n      console.log('Total bytes uploaded: ', taskSnapshot.totalBytes);\n    }\n  });\n```\n\n#### Example 2\n\n```js\nconst task = firebase\n  .storage()\n  .ref('/foo/bar.json')\n  .putString(JSON.stringify({ foo: 'bar' }));\n\ntask.on('state_changed', taskSnapshot => {\n  if (taskSnapshot.state === firebase.storage.TaskState.PAUSED) {\n    console.log('Resuming my task!');\n    task.resume();\n  }\n});\n```\n"
					},
					"children": [
						{
							"id": 2271,
							"name": "bytesTransferred",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The number of bytes currently transferred."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 960,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2277,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If the {@link storage.TaskSnapshot#state} is `error`, returns a JavaScript error of the\ncurrent task snapshot."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 991,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "NativeFirebaseError",
								"id": 55
							}
						},
						{
							"id": 2272,
							"name": "metadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The metadata of the tasks via a {@link storage.FullMetadata} interface."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 965,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "FullMetadata",
								"id": 2165
							}
						},
						{
							"id": 2273,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The {@link storage.Reference} of the task."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 970,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Reference",
								"id": 2184
							}
						},
						{
							"id": 2274,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The current state of the task snapshot."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "cancelled"
									},
									{
										"type": "stringLiteral",
										"value": "error"
									},
									{
										"type": "stringLiteral",
										"value": "paused"
									},
									{
										"type": "stringLiteral",
										"value": "running"
									},
									{
										"type": "stringLiteral",
										"value": "success"
									}
								]
							}
						},
						{
							"id": 2275,
							"name": "task",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The parent {@link storage.Task} of this snapshot."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 980,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "Task",
								"id": 2233
							}
						},
						{
							"id": 2276,
							"name": "totalBytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The total amount of bytes for this task."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 985,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2271,
								2277,
								2272,
								2273,
								2274,
								2275,
								2276
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 956,
							"character": 31
						}
					]
				},
				{
					"id": 2221,
					"name": "TaskSnapshotObserver",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The snapshot observer returned from a {@link storage.Task#on} listener.",
						"text": "#### Example\n\n```js\nconst ref = firebase.storage().ref(...);\nconst task = ref.put(...)\n\ntask.on('state_changed', {\n  next(taskSnapshot) {\n    console.log(taskSnapshot.state);\n  },\n  error(error) {\n    console.error(error.message);\n  },\n  complete() {\n    console.log('Task complete');\n  },\n})\n```\n"
					},
					"children": [
						{
							"id": 2230,
							"name": "complete",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the task has completed successfully."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 787,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2231,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2232,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 787,
											"character": 13
										}
									]
								}
							}
						},
						{
							"id": 2226,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the task errors."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 782,
									"character": 9
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2227,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"comment": {
										"text": "A JavaScript error.\n"
									},
									"signatures": [
										{
											"id": 2228,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"text": "A JavaScript error.\n"
											},
											"parameters": [
												{
													"id": 2229,
													"name": "error",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "NativeFirebaseError"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 782,
											"character": 10
										}
									]
								}
							}
						},
						{
							"id": 2222,
							"name": "next",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the task state changes.",
								"tags": [
									{
										"tag": "param",
										"text": "A `TaskSnapshot` for the event.\n",
										"param": "taskSnapshot"
									}
								]
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 775,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2223,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2224,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2225,
													"name": "taskSnapshot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TaskSnapshot",
														"id": 2270
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "storage/lib/index.d.ts",
											"line": 775,
											"character": 9
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2230,
								2226,
								2222
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 769,
							"character": 39
						}
					]
				},
				{
					"id": 2134,
					"name": "TaskState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A collection of properties that indicates the current tasks state.",
						"text": "An event subscription is created via `StorageTask.on()`.\n\n```js\nfirebase.storage.TaskEvent;\n```\n"
					},
					"children": [
						{
							"id": 2135,
							"name": "CANCELLED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task has been cancelled by the user."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 174,
									"character": 13
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "cancelled"
							}
						},
						{
							"id": 2136,
							"name": "ERROR",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An Error occurred, see TaskSnapshot.error for details."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 179,
									"character": 9
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "error"
							}
						},
						{
							"id": 2137,
							"name": "PAUSED",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task has been paused. Resume the task via `StorageTask.resume()`."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 184,
									"character": 10
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "paused"
							}
						},
						{
							"id": 2138,
							"name": "RUNNING",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task is running. Pause the task via `StorageTask.pause()`"
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 189,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "running"
							}
						},
						{
							"id": 2139,
							"name": "SUCCESS",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Task has completed successfully."
							},
							"sources": [
								{
									"fileName": "storage/lib/index.d.ts",
									"line": 194,
									"character": 11
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "success"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2135,
								2136,
								2137,
								2138,
								2139
							]
						}
					],
					"sources": [
						{
							"fileName": "storage/lib/index.d.ts",
							"line": 170,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2278
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2165,
						2140,
						2184,
						2155,
						2150,
						2127,
						2233,
						2132,
						2270,
						2221,
						2134
					]
				}
			],
			"sources": [
				{
					"fileName": "storage/lib/index.d.ts",
					"line": 56,
					"character": 24
				}
			]
		},
		{
			"id": 2306,
			"name": "Utils",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "React Native Firebase Utilities package.",
				"text": "#### Example 1\n\nAccess the firebase export from the `utils` package:\n\n```js\nimport { firebase } from '@react-native-firebase/utils';\n\n// firebase.utils().X\n```\n\n#### Example 2\n\nUsing the default export from the `utils` package:\n\n```js\nimport utils from '@react-native-firebase/utils';\n\n// utils().X\n```\n\n#### Example 3\n\nUsing the default export from the `app` package:\n\n```js\nimport firebase from '@react-native-firebase/app';\nimport '@react-native-firebase/utils';\n\n// firebase.utils().X\n```\n",
				"tags": [
					{
						"tag": "firebase",
						"text": "utils\n"
					}
				]
			},
			"children": [
				{
					"id": 2308,
					"name": "Module",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The React Native Firebase Utils service interface.",
						"text": "> This module is available for the default app only.\n\n#### Example\n\nGet the Utils service for the default app:\n\n```js\nconst defaultAppUtils = firebase.utils();\n```\n"
					},
					"children": [
						{
							"id": 2310,
							"name": "app",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/Salakar/Documents/@react-native-firebase/node_modules/@react-native-firebase/app/lib/index.d.ts",
									"line": 184,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "FirebaseApp"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "FirebaseModule.app"
							}
						},
						{
							"id": 2309,
							"name": "isRunningInTestLab",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Returns true if this app is running inside a Firebase Test Lab environment. Always returns false on iOS.",
								"tags": [
									{
										"tag": "android",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "utils/lib/index.d.ts",
									"line": 80,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2310,
								2309
							]
						}
					],
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 74,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "FirebaseModule"
						}
					]
				},
				{
					"id": 2307,
					"name": "Statics",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "utils/lib/index.d.ts",
							"line": 59,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2308
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2307
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/lib/index.d.ts",
					"line": 56,
					"character": 22
				}
			]
		},
		{
			"id": 2020,
			"name": "VisionBarcodeAddressType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1237,
					"character": 37
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKITVision.VisionBarcodeAddressType"
		},
		{
			"id": 2006,
			"name": "VisionBarcodeDetectorOptions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1214,
					"character": 41
				},
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1241,
					"character": 41
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKITVision.VisionBarcodeDetectorOptions"
		},
		{
			"id": 2021,
			"name": "VisionBarcodeEmailType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1238,
					"character": 35
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKITVision.VisionBarcodeEmailType"
		},
		{
			"id": 2018,
			"name": "VisionBarcodeFormat",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1235,
					"character": 32
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKITVision.VisionBarcodeFormat"
		},
		{
			"id": 2022,
			"name": "VisionBarcodePhoneType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1239,
					"character": 35
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKITVision.VisionBarcodePhoneType"
		},
		{
			"id": 2019,
			"name": "VisionBarcodeValueType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1236,
					"character": 35
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKITVision.VisionBarcodeValueType"
		},
		{
			"id": 2023,
			"name": "VisionBarcodeWifiEncryptionType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1240,
					"character": 44
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKITVision.VisionBarcodeWifiEncryptionType"
		},
		{
			"id": 2011,
			"name": "VisionCloudDocumentTextRecognizerOptions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1221,
					"character": 53
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionCloudDocumentTextRecognizerOptions",
				"id": 1817
			},
			"defaultValue": "\n  MLKitVision.VisionCloudDocumentTextRecognizerOptions"
		},
		{
			"id": 2007,
			"name": "VisionCloudImageLabelerOptions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1215,
					"character": 43
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionCloudImageLabelerOptions",
				"id": 1790
			},
			"defaultValue": " MLKitVision.VisionCloudImageLabelerOptions"
		},
		{
			"id": 2017,
			"name": "VisionCloudLandmarkRecognizerModelType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1232,
					"character": 51
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionCloudLandmarkRecognizerModelType",
				"id": 1805
			},
			"defaultValue": "\n  MLKitVision.VisionCloudLandmarkRecognizerModelType"
		},
		{
			"id": 2010,
			"name": "VisionCloudLandmarkRecognizerOptions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1219,
					"character": 49
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionCloudLandmarkRecognizerOptions",
				"id": 1796
			},
			"defaultValue": "\n  MLKitVision.VisionCloudLandmarkRecognizerOptions"
		},
		{
			"id": 2009,
			"name": "VisionCloudTextRecognizerModelType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1218,
					"character": 47
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionCloudTextRecognizerModelType",
				"id": 1823
			},
			"defaultValue": " MLKitVision.VisionCloudTextRecognizerModelType"
		},
		{
			"id": 2008,
			"name": "VisionCloudTextRecognizerOptions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1216,
					"character": 45
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionCloudTextRecognizerOptions",
				"id": 1808
			},
			"defaultValue": " MLKitVision.VisionCloudTextRecognizerOptions"
		},
		{
			"id": 2016,
			"name": "VisionDocumentTextRecognizedBreakType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1230,
					"character": 50
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionDocumentTextRecognizedBreakType",
				"id": 1868
			},
			"defaultValue": "\n  MLKitVision.VisionDocumentTextRecognizedBreakType"
		},
		{
			"id": 2004,
			"name": "VisionFaceContourType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1211,
					"character": 34
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionFaceContourType",
				"id": 1943
			},
			"defaultValue": " MLKitVision.VisionFaceContourType"
		},
		{
			"id": 2012,
			"name": "VisionFaceDetectorClassificationMode",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1224,
					"character": 49
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionFaceDetectorClassificationMode",
				"id": 1826
			},
			"defaultValue": "\n  MLKitVision.VisionFaceDetectorClassificationMode"
		},
		{
			"id": 2013,
			"name": "VisionFaceDetectorContourMode",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1226,
					"character": 42
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionFaceDetectorContourMode",
				"id": 1829
			},
			"defaultValue": " MLKitVision.VisionFaceDetectorContourMode"
		},
		{
			"id": 2014,
			"name": "VisionFaceDetectorLandmarkMode",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1227,
					"character": 43
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionFaceDetectorLandmarkMode",
				"id": 1832
			},
			"defaultValue": " MLKitVision.VisionFaceDetectorLandmarkMode"
		},
		{
			"id": 2002,
			"name": "VisionFaceDetectorOptions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1209,
					"character": 38
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionFaceDetectorOptions",
				"id": 1770
			},
			"defaultValue": " MLKitVision.VisionFaceDetectorOptions"
		},
		{
			"id": 2015,
			"name": "VisionFaceDetectorPerformanceMode",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1228,
					"character": 46
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionFaceDetectorPerformanceMode",
				"id": 1835
			},
			"defaultValue": " MLKitVision.VisionFaceDetectorPerformanceMode"
		},
		{
			"id": 2003,
			"name": "VisionFaceLandmarkType",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1210,
					"character": 35
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionFaceLandmarkType",
				"id": 1929
			},
			"defaultValue": " MLKitVision.VisionFaceLandmarkType"
		},
		{
			"id": 2005,
			"name": "VisionImageLabelerOptions",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1213,
					"character": 38
				}
			],
			"type": {
				"type": "reference",
				"name": "VisionImageLabelerOptions",
				"id": 1786
			},
			"defaultValue": " MLKitVision.VisionImageLabelerOptions"
		},
		{
			"id": 2000,
			"name": "VisionPoint",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1207,
					"character": 24
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKitVision.VisionPoint"
		},
		{
			"id": 2001,
			"name": "VisionRectangle",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ml-vision/lib/index.d.ts",
					"line": 1208,
					"character": 28
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": " MLKitVision.VisionRectangle"
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				40,
				44,
				391,
				448,
				490,
				809,
				830,
				1174,
				1223,
				1248,
				1264,
				1331,
				1449,
				1562,
				1607,
				2024,
				2118,
				2298,
				2311,
				1,
				117,
				398,
				455,
				497,
				818,
				838,
				1181,
				1232,
				1255,
				1271,
				1338,
				1571,
				1616,
				1456,
				2036,
				53,
				2126,
				2306
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				2020,
				2006,
				2021,
				2018,
				2022,
				2019,
				2023,
				2011,
				2007,
				2017,
				2010,
				2009,
				2008,
				2016,
				2004,
				2012,
				2013,
				2014,
				2002,
				2015,
				2003,
				2005,
				2000,
				2001
			]
		}
	]
}