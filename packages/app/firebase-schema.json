{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "react-native": {
      "type": "object",
      "properties": {
        "analytics_auto_collection_enabled": {
          "description": "Disable or enable auto collection of analytics data.\n This is useful for opt-in-first data flows, for example when dealing with GDPR compliance. This can be overridden in JavaScript. \n Re-enable analytics data collection, e.g. once user has granted permission.",
          "type": "boolean"
        },
        "analytics_collection_deactivated": {
          "description": "If you need to deactivate Analytics collection permanently in a version of your app.\n This cannot be altered at runtime once set in the config.",
          "type": "boolean"
        },
        "analytics_idfv_collection_enabled": {
          "description": "If you wish to disable collection of the IDFV (Identifier for Vendor) in your iOS app.\n This cannot be altered at runtime once set in the config.",
          "type": "boolean"
        },
        "google_analytics_adid_collection_enabled": {
          "description": " If you wish to disable collection of the Advertising ID in your Android app.\n This cannot be altered at runtime once set in the config.",
          "type": "boolean"
        },
        "google_analytics_ssaid_collection_enabled": {
          "description": "If you wish to disable collection of SSAID (Settings.Secure.ANDROID_ID) in your Android app,.\n This cannot be altered at runtime once set in the config.",
          "type": "boolean"
        },
        "analytics_default_allow_ad_personalization_signals": {
          "description": "Configure whether a user's Analytics data may be used for personalized advertising in other products.\n If set, may be overridden at runtime by calling setUserProperty on the key 'allow_personalized_ads'",
          "type": "boolean"
        },
        "app_data_collection_default_enabled": {
          "description": "Whether automatic data collection is enabled for all products, unless overridden by product-specific data collection settings.\n Setting this to false is useful for opt-in-first data flows, for example when dealing with GDPR compliance. \nThis may be overridden dynamically in Javascript via automaticDataCollectionEnabled FirebaseAppConfig property.",
          "type": "boolean"
        },
        "app_log_level": {
          "description": "Set the log level across all modules. Only applies to iOS currently. Can be 'error', 'warn', 'info', 'debug'.\n Logs messages at the configured level or lower.\n Note that if an app is running from AppStore, it will never log above info even if level is set to a higher (more verbose) setting",
          "type": "string"
        },
        "app_check_token_auto_refresh": {
          "description": "If this flag is disabled then Firebase App Check will not periodically auto-refresh the app check token.\n This is useful for opt-in-first data flows, for example when dealing with GDPR compliance. \nIf unset it will default to the SDK-wide data collection default enabled setting. This may be overridden dynamically in Javascript.",
          "type": "boolean"
        },
        "crashlytics_auto_collection_enabled": {
          "description": "Additionally, you can configure whether Crashlytics sends out any reports through the auto_collection_enabled option in your firebase.json config. If you want users to opt-in, it is recommended that you disable this here and enable it later through the method once they opt-in.",
          "type": "boolean"
        },
        "crashlytics_debug_enabled": {
          "description": "Stack traces are readily available while you`re debugging your app, so Crashlytics is disabled by default in debug mode. You can set Crashlytics to be enabled regardless of debug mode through the debug_enabled option in your firebase.json. This may be useful to test your integration, remembering reports are sent next app start.",
          "type": "boolean"
        },
        "crashlytics_is_error_generation_on_js_crash_enabled": {
          "description": "By default React Native Firebase Crashlytics installs a global javascript-level unhandled exception handler that will log unhandled javascript exceptions as fatal crashes (since v11.3.0, non-fatal prior) with javascript stacks. Set to false to disable javascript-level crash handling.",
          "type": "boolean"
        },
        "crashlytics_javascript_exception_handler_chaining_enabled": {
          "description": "By default React Native Firebase Crashlytics will preserve existing global javascript-level uhandled exception handlers by reporting to Crashlytics then passing the exception on for further handling. This could lead to duplicate reports, for example a fatal javascript-level report and a fatal native level report for the same crash. Set to false to terminate error handling after logging the javascript-level crash.",
          "type": "boolean"
        },
        "crashlytics_ndk_enabled": {
          "description": "React Native Firebase supports Crashlytics NDK reporting which is enabled by default. This allows Crashlytics to capture crashes originating from the Yoga layout engine used by React Native. You can disable Crashlytics NDK in your firebase.json config.",
          "type": "boolean"
        },
        "in_app_messaging_auto_collection_enabled": {
          "description": "In App Messaging can be further configured to enable or disable automatic data collection for Firebase In-App Messaging. This is useful for opt-in-first data flows, for example when dealing with GDPR compliance. This can be overridden in JavaScript.",
          "type": "boolean"
        },
        "messaging_auto_init_enabled": {
          "description": "Firebase generates an Instance ID, which FCM uses to generate a registration token and which Analytics uses for data collection. When an Instance ID is generated, the library will upload the identifier and configuration data to Firebase. In most cases, you do not need to change this behavior. \nIf you prefer to prevent Instance ID auto-generation, disable auto initialization for FCM and Analytics",
          "type": "boolean"
        },
        "messaging_android_headless_task_timeout": {
          "description": "On Android, a background event sent to setBackgroundMessageHandler has 60 seconds to resolve before it is automatically canceled to free up device resources. If you wish to override this value, set the number of milliseconds in your config.",
          "type": "number",
          "minimum": 0
        },
        "messaging_android_notification_channel_id": {
          "description": "On Android, any message which displays a Notification use a default Notification Channel (created by FCM called `Miscellaneous`). This channel contains basic notification settings which may not be appropriate for your application. You can change what Channel is used by updating the `messaging_android_notification_channel_id` property.",
          "type": "string"
        },
        "messaging_android_notification_color": {
          "description": "On Android, any messages which display a Notification do not use a color to tint the content (such as the small icon, title etc). To provide a custom tint color, update the messaging_android_notification_color property with a Android color resource name. \n The library provides a set of predefined colors corresponding to the HTML colors for convenience",
          "type": "string"
        },
        "messaging_ios_auto_register_for_remote_messages": {
          "description": "Whether RNFirebase Messaging automatically calls `[[UIApplication sharedApplication] registerForRemoteNotifications];`\nautomatically on app launch (recommended) - defaults to true.\n If set to false; make sure to call `firebase.messaging().registerDeviceForRemoteMessages()`\nearly on in your app startup - otherwise you will NOT receive remote messages/notifications\nin your app.\n",
          "type": "boolean"
        },
        "perf_auto_collection_enabled": {
          "description": "Disable or enable auto collection of performance monitoring data collection.\n This is useful for opt-in-first data flows, for example when dealing with GDPR compliance.\nThis can be overridden in JavaScript.",
          "type": "boolean"
        },
        "perf_collection_deactivated": {
          "description": "If you need to deactivate Performance collection permanently in a version of your app.\n This cannot be altered at runtime once set in the config.",
          "type": "boolean"
        },
        "android_task_executor_maximum_pool_size": {
          "description": "Maximum pool size of ThreadPoolExecutor used by RNFirebase for Android. Defaults to `1`.\n Larger values typically improve performance when executing large numbers of asynchronous tasks, e.g. Firestore queries.",
          "type": "number"
        },
        "android_task_executor_keep_alive_seconds": {
          "description": "Keep-alive time of ThreadPoolExecutor used by RNFirebase for Android, in seconds. Defaults to `3`.\n Excess threads in the pool executor will be terminated if they have been idle for more than the keep-alive time.",
          "type": "number"
        },
        "android_background_activity_names": {
          "description": "The names (as returned by `getShortClassName()` of Activities used outside the context of react native.\nThese are ignored when determining if the app is in foreground for purposes of calling javascript background handlers",
          "type": "array"
        },
        "android_bypass_emulator_url_remap": {
          "description": "On android devices, the urls of firebase emulators will be remapped from localhost to 10.0.2.2. If you don't need this behaviour set this fleg to `true`.",
          "type": "boolean"
        }
      }
    }
  }
}
