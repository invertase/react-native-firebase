/* eslint-disable import/no-duplicates */
/*
 * Copyright (c) 2016-present Invertase Limited & Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this library except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import type { ReactNativeFirebaseModule } from '@react-native-firebase/app-types/index.js.flow';

export interface Statics {}

/**
 * An Interface representing a Remote Config value
 */
export interface ConfigValue {
  /**
   * Where the value was retrieved from
   */
  source: 'remote' | 'default' | 'static';

  /**
   * The value
   */
  value: undefined | number | boolean | string;
}

/**
 * An Interface representing multiple Config Values
 */
export interface ConfigValues {
  [key: string]: ConfigValue;
}

/**
 * An Interface representing settable config settings.
 */
export interface ConfigSettingsWrite {
  isDeveloperModeEnabled: boolean;
}

/**
 * An Interface representing readable config settings.
 */
export interface ConfigSettingsRead {
  lastFetchTime: number;
  isDeveloperModeEnabled: boolean;
  lastFetchStatus: 'success' | 'failure' | 'no_fetch_yet' | 'throttled';
}

/**
 * An Interface representing a Config Defaults object.
 */
export interface ConfigDefaults {
  [key: string]: number | string | boolean;
}

export interface Module extends ReactNativeFirebaseModule {
  /**
   * Moves fetched data to the apps active config.
   * Always successfully resolves with a boolean value of whether the fetched config was moved successfully.
   */
  activateFetched(): Promise<boolean>;

  /**
   * Fetches the remote config data from Firebase, defined in the dashboard. If duration is defined (seconds), data will be locally cached for this duration.
   *
   * @param cacheExpirationSeconds Duration in seconds to cache the data for. To force a cache use a duration of 0.
   */
  fetch(cacheExpirationSeconds?: number): Promise<null>;

  /**
   * Fetches the remote config data from Firebase, defined in the dashboard. If duration is defined (seconds), data will be locally cached for this duration.
   *
   * Once fetching is completely this method immediately calls activateFetched on native and returns a boolean value of activation status.
   *
   * @param cacheExpirationSeconds Duration in seconds to cache the data for. To force a cache use a duration of 0.
   */
  fetchAndActivate(cacheExpirationSeconds?: number): Promise<boolean>;

  /**
   * Retrieve the configuration settings and status for Remote Config.
   */
  getConfigSettings(): Promise<ConfigSettingsRead>;

  /**
   * Returns all keys matching the prefix as an array. If no prefix is defined all keys are returned.
   *
   * @param prefix
   */
  getKeysByPrefix(prefix?: string): Promise<string[]>;

  /**
   * Returns all config values for the keys matching the prefix provided. In no prefix is provided all values are returned.
   *
   * @param prefix
   */
  getValuesByKeysPrefix(prefix?: string): Promise<ConfigValues>;

  /**
   * Gets a ConfigValue by key.
   *
   * @param key
   */
  getValue(key: string): Promise<ConfigValue>;

  /**
   * Set the Remote Config settings, specifically the `isDeveloperModeEnabled` flag.
   */
  setConfigSettings(configSettings: ConfigSettingsWrite): Promise<ConfigSettingsRead>;

  /**
   * Sets default values for the app to use when accessing values.
   * Any data fetched and activated will override any default values. Any values in the defaults but not on Firebase will be untouched.
   *
   */
  setDefaults(defaults: ConfigDefaults): Promise<null>;

  /**
   * Sets the default values from a resource file.
   * On iOS this is a plist file and on Android this is an XML defaultsMap file.
   * TODO(ehesp): insert link to guide here somehow?
   *
   * @param resourceName The plist/xml file name with no extension.
   */
  setDefaultsFromResource(resourceName: string): Promise<null>;
}

declare module '@react-native-firebase/config' {
  import type {
    ReactNativeFirebaseNamespace,
    ReactNativeFirebaseModuleAndStatics,
  } from '@react-native-firebase/app-types/index.js.flow';
  /**
   * @example
   * ```js
   * import { firebase } from '@react-native-firebase/config';
   * firebase.config().X(...);
   * ```
   */
  declare export var firebase: {} & ReactNativeFirebaseNamespace;

  /**
   * @example
   * ```js
   * import config from '@react-native-firebase/config';
   * config().X(...);
   * ```
   */
  declare export default ReactNativeFirebaseModuleAndStatics<Module, Statics>;
}

/**
 * Attach namespace to `firebase.` and `FirebaseApp.`.
 */
declare module '@react-native-firebase/app-types' {
  import type { ReactNativeFirebaseModuleAndStatics } from '@react-native-firebase/app-types/index.js.flow';

  declare interface ReactNativeFirebaseNamespace {
    /**
     * Config
     */
    config: ReactNativeFirebaseModuleAndStatics<Module, Statics>;
  }

  declare interface FirebaseApp {
    /**
     * Config
     */
    config(): Module;
  }
}
