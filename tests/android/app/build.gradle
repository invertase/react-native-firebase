apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.appdistribution'

import com.android.build.OutputFile
import org.apache.tools.ant.taskdefs.condition.Os
import groovy.json.JsonSlurper

project.ext.react = [
    enableHermes: true,  // clean and rebuild if changing
]

// up to mono root
apply from: '../../node_modules/react-native/react.gradle'

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Use international variant JavaScriptCore
 * International variant includes ICU i18n library and necessary data allowing to use
 * e.g. Date.toLocaleString and String.localeCompare that give correct results
 * when using with locales other than en-US.
 * Note that this variant is about 6MiB larger per architecture than default.
 */
def useIntlJsc = false

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
  ndkVersion rootProject.ext.ndkVersion
  compileSdkVersion rootProject.ext.compileSdkVersion
  aaptOptions {
    // https://firebase.google.com/docs/ml/android/use-custom-models#local_model
    noCompress 'tflite'
  }
  defaultConfig {
    applicationId 'com.invertase.testing'
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 200
    versionName '1.0'
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    if (isNewArchitectureEnabled()) {
      // We configure the CMake build only if you decide to opt-in for the New Architecture.
      externalNativeBuild {
        cmake {
          arguments "-DPROJECT_BUILD_DIR=$buildDir",
            "-DREACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
            "-DREACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build",
            "-DNODE_MODULES_DIR=$rootDir/../node_modules",
            "-DANDROID_STL=c++_shared"
        }
      }
      if (!enableSeparateBuildPerCPUArchitecture) {
        ndk {
          abiFilters (*reactNativeArchitectures())
        }
      }
    }

    // detox items
    testBuildType System.getProperty('testBuildType', 'debug')
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    missingDimensionStrategy 'detox', 'full'
  }

  if (isNewArchitectureEnabled()) {
    // We configure the NDK build only if you decide to opt-in for the New Architecture.
    externalNativeBuild {
      cmake {
        path "$projectDir/src/main/jni/CMakeLists.txt"
      }
    }
    def reactAndroidProjectDir = project(':ReactAndroid').projectDir
    def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
      dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
      from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
      into("$buildDir/react-ndk/exported")
    }
    def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
      dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
      from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
      into("$buildDir/react-ndk/exported")
    }
    afterEvaluate {
      // If you wish to add a custom TurboModule or component locally,
      // you should uncomment this line.
      // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
      preDebugBuild.dependsOn(packageReactNdkDebugLibs)
      preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)
      // Due to a bug inside AGP, we have to explicitly set a dependency
      // between configureCMakeDebug* tasks and the preBuild tasks.
      // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
      configureCMakeRelWithDebInfo.dependsOn(preReleaseBuild)
      configureCMakeDebug.dependsOn(preDebugBuild)
      reactNativeArchitectures().each { architecture ->
        tasks.findByName("configureCMakeDebug[${architecture}]")?.configure {
          dependsOn("preDebugBuild")
        }
        tasks.findByName("configureCMakeRelWithDebInfo[${architecture}]")?.configure {
          dependsOn("preReleaseBuild")
        }
      }
    }
  }

  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include (*reactNativeArchitectures())
    }
  }

  signingConfigs {
    release {
      storeFile file('keystore.jks')
      storePassword '12345678'
      keyAlias 'key0'
      keyPassword '12345678'
    }
  }

  buildTypes {
    debug {
      debuggable true
      testCoverageEnabled true
      signingConfig signingConfigs.release // sign with shared SHA256; configured in firebase dynamic-links
    }
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
      signingConfig signingConfigs.release
      firebaseCrashlytics {
        nativeSymbolUploadEnabled true
          unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
      }
    }
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }

  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // https://developer.android.com/studio/build/configure-apk-splits.html
      def versionCodes = ['armeabi-v7a': 1, 'x86': 2, 'arm64-v8a': 3, 'x86_64': 4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
          versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }
}

apply from: './jacoco.gradle'

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'

  implementation("androidx.annotation:annotation:${rootProject.ext.androidxAnnotationVersion}")
  implementation("androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}")
  implementation("androidx.core:core:${rootProject.ext.supportLibVersion}")
  implementation("androidx.fragment:fragment:${rootProject.ext.fragmentVersion}")
  implementation("androidx.legacy:legacy-support-core-ui:${rootProject.ext.supportV4Version}")
  implementation("androidx.legacy:legacy-support-core-utils:${rootProject.ext.supportV4Version}")
  implementation("androidx.swiperefreshlayout:swiperefreshlayout:${rootProject.ext.swiperefreshlayoutVersion}")
  implementation("androidx.vectordrawable:vectordrawable-animated:${rootProject.ext.vectordrawableVersion}")
  implementation("androidx.vectordrawable:vectordrawable:${rootProject.ext.vectordrawableVersion}")

  if (project.ext.react.enableHermes) {
    //noinspection GradleDynamicVersion
    implementation("com.facebook.react:hermes-engine:+") { // From node_modules
      exclude group:'com.facebook.fbjni'
    }
  } else {
    implementation jscFlavor
  }

  if (isNewArchitectureEnabled()) {
    // If new architecture is enabled, we let you build RN from source
    // Otherwise we fallback to a prebuilt .aar bundled in the NPM package.
    // This will be applied to all the imported transtitive dependency.
    configurations.all {
        resolutionStrategy.dependencySubstitution {
            substitute(module("com.facebook.react:react-native"))
                    .using(project(":ReactAndroid"))
                    .because("On New Architecture we're building React Native from source")
            substitute(module("com.facebook.react:hermes-engine"))
                    .using(project(":ReactAndroid:hermes-engine"))
                    .because("On New Architecture we're building Hermes from source")
        }
    }
}

  /* ------------------------
   *  TESTING SDKS/LIBRARIES
   * ------------------------ */
    androidTestImplementation(project(path: ':detox'))

    def firebaseBomVersion = new JsonSlurper().parseText(new File('../../node_modules/@react-native-firebase/app/package.json').text).sdkVersions.android.firebase
    androidTestImplementation platform("com.google.firebase:firebase-bom:${firebaseBomVersion}")
    androidTestImplementation "com.google.firebase:firebase-appcheck-debug-testing"
}

apply from: file('../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle'); applyNativeModulesAppBuildGradle(project)

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}