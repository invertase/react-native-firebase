apply plugin: 'com.android.application'
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.google.firebase.appdistribution'

import groovy.json.JsonSlurper

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
  ndkVersion rootProject.ext.ndkVersion
  compileSdkVersion rootProject.ext.compileSdkVersion
  namespace "com.invertase.testing"
  aaptOptions {
    // https://firebase.google.com/docs/ml/android/use-custom-models#local_model
    noCompress 'tflite'
  }
  defaultConfig {
    applicationId 'com.invertase.testing'
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 200
    versionName '1.0'

    // detox items
    testBuildType System.getProperty('testBuildType', 'debug')
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    missingDimensionStrategy 'detox', 'full'
  }

  signingConfigs {
    release {
      storeFile file('keystore.jks')
      storePassword '12345678'
      keyAlias 'key0'
      keyPassword '12345678'
    }
  }

  buildTypes {
    debug {
      debuggable true
      testCoverageEnabled true
      signingConfig signingConfigs.release // sign with shared SHA256; configured in firebase dynamic-links
    }
    release {
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
      signingConfig signingConfigs.release
      firebaseCrashlytics {
        nativeSymbolUploadEnabled true
          unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
      }
    }
  }

  testOptions {
    unitTests {
      includeAndroidResources = true
    }
  }
}

apply from: './jacoco.gradle'

dependencies {
  // The version of react-native is set by the React Native Gradle Plugin
  implementation("com.facebook.react:react-android")

  implementation("androidx.annotation:annotation:${rootProject.ext.androidxAnnotationVersion}")
  implementation("androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}")
  implementation("androidx.core:core:${rootProject.ext.supportLibVersion}")
  implementation("androidx.fragment:fragment:${rootProject.ext.fragmentVersion}")
  implementation("androidx.legacy:legacy-support-core-ui:${rootProject.ext.supportV4Version}")
  implementation("androidx.legacy:legacy-support-core-utils:${rootProject.ext.supportV4Version}")
  implementation("androidx.swiperefreshlayout:swiperefreshlayout:${rootProject.ext.swiperefreshlayoutVersion}")
  implementation("androidx.vectordrawable:vectordrawable-animated:${rootProject.ext.vectordrawableVersion}")
  implementation("androidx.vectordrawable:vectordrawable:${rootProject.ext.vectordrawableVersion}")

  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    exclude group:'com.squareup.okhttp3', module:'okhttp'
  }

  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
  
  /* ------------------------
   *  TESTING SDKS/LIBRARIES
   * ------------------------ */
    androidTestImplementation(project(path: ':detox'))

    def firebaseBomVersion = new JsonSlurper().parseText(new File('../../node_modules/@react-native-firebase/app/package.json').text).sdkVersions.android.firebase
    androidTestImplementation platform("com.google.firebase:firebase-bom:${firebaseBomVersion}")
    androidTestImplementation "com.google.firebase:firebase-appcheck-debug-testing"
}

apply from: file('../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle'); applyNativeModulesAppBuildGradle(project)
