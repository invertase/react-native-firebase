apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "com.google.firebase.firebase-perf"

import com.android.build.OutputFile

project.ext.react = [
    enableHermes: false,
]

// up to mono root
apply from: "../../node_modules/react-native/react.gradle"

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Use international variant JavaScriptCore
 * International variant includes ICU i18n library and necessary data allowing to use
 * e.g. Date.toLocaleString and String.localeCompare that give correct results
 * when using with locales other than en-US.
 * Note that this variant is about 6MiB larger per architecture than default.
 */
def useIntlJsc = false

android {
  compileSdkVersion 29
  aaptOptions {
    noCompress "tflite"
  }
  defaultConfig {
    applicationId "com.invertase.testing"
    minSdkVersion 21
    targetSdkVersion 29
    versionCode 1
    versionName "1.0"

    // detox
    testBuildType System.getProperty('testBuildType', 'debug')
    // detox
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }
  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }
  }

  signingConfigs {
    release {
      storeFile file("keystore.jks")
      storePassword "12345678"
      keyAlias "key0"
      keyPassword "12345678"
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
      signingConfig signingConfigs.release
    }
  }

  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }

  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // https://developer.android.com/studio/build/configure-apk-splits.html
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
          versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }

  packagingOptions {
    exclude 'META-INF/proguard/androidx-annotations.pro'
    exclude 'META-INF/-no-jdk.kotlin_module'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    pickFirst "lib/armeabi-v7a/libc++_shared.so"
    pickFirst "lib/arm64-v8a/libc++_shared.so"
    pickFirst "lib/x86/libc++_shared.so"
    pickFirst "lib/x86_64/libc++_shared.so"
  }
}

// Can probably remove this when tests upgrades to react-native 0.63
configurations.all {
    resolutionStrategy {
        force "com.facebook.soloader:soloader:0.8.2"
    }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'
  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

  // JSC from node_modules
  implementation jscFlavor

  /* ------------------------
   *  TESTING SDKS/LIBRARIES
   * ------------------------ */
    androidTestImplementation(project(path: ":detox"))
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}


apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
